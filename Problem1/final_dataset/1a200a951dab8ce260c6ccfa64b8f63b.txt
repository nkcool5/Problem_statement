/lib64/ld-linux-x86-64.so.2
DON.
([@ 
 B	1
0B(!
ddDa+	
0a1|
dkD`
" @a
@HD	
!2qH
_%K]
KfAO
pX(6
y#'X
){V.%HS
][B\
%d9nHX
0f4s[
NmW	
3$#u
oRI;
%=,vE
^Hw<
})8fr<
,V~t5{
 "QC
ssW5
oj"K
x[%6w
5+6G
9yU4g
l74@z&
NMX:h
{)V]s
?bDG
D<A=Y
:pyF
FG~Z
Kj]=C
Km!sN
G]H(
!uI>
^;6C
HGx(
qIsw
{Q;)P
a/dR
yWBfK
JusW
CGrp
q_eL+
-MU8V
!xqF
eEzW#
yzxb
+Z_dC
	 a%zi
dtE9`/M@
*m+9
tz+PHQ
'a+w
"@]h
`*Pu
"kJ}X
[L/\u
`d|d
a\F9kH4
libpthread.so.0
libdl.so.2
libutil.so.1
libz.so.1
libm.so.6
_ITM_deregisterTMCloneTable
_Jv_RegisterClasses
_ITM_registerTMCloneTable
libc.so.6
__libc_start_main
__xstat64
__lxstat64
stdin
strcmp
stderr
__fprintf_chk
fwrite
malloc
memcpy
getenv
free
strtok
fopen64
__fxstat64
__errno_location
setvbuf
stdout
__stack_chk_fail
fclose
_IO_getc
ungetc
strchr
memset
setlocale
__strdup
nl_langinfo
mmap64
sem_init
perror
strlen
sem_wait
sem_trywait
sem_post
pthread_self
memcmp
calloc
munmap
strrchr
__vsnprintf_chk
strncpy
readlink
__strcpy_chk
fread
strcat
strncat
__strncpy_chk
strcpy
getcwd
__rawmemchr
__ctype_b_loc
__sprintf_chk
memmove
__memcpy_chk
sigemptyset
sigaction
getpid
__libc_current_sigrtmin
__libc_current_sigrtmax
fflush
abort
fseek
ftell
__fread_chk
ferror
unlink
fdopen
strstr
feof
flockfile
funlockfile
__uflow
fgets
__ctype_tolower_loc
strncmp
__environ
sysconf
qsort
__realpath_chk
rewind
__printf_chk
_IO_putc
geteuid
fputc
getuid
getegid
getgid
clearerr
fputs
modf
opendir
readdir64
closedir
lseek64
mktime
__vfprintf_chk
ldexp
localeconv
_setjmp
uname
setreuid
setregid
frexp
sem_destroy
localtime
gettimeofday
rename
__ctype_toupper_loc
strftime
bind
ioctl
sscanf
getaddrinfo
freeaddrinfo
mkdir
popen
pclose
kill
gmtime
waitpid
tzset
access
rmdir
putenv
unsetenv
getsockopt
__memset_chk
getsockname
getnameinfo
pthread_attr_init
pthread_attr_setscope
pthread_create
pthread_attr_destroy
pthread_detach
pthread_attr_setstacksize
listen
accept
poll
connect
recv
__fdelt_chk
send
getpeername
setsockopt
pipe
fork
dup2
execv
execve
copysign
shutdown
umask
gethostname
gethostbyaddr_r
__h_errno_location
hstrerror
epoll_create
epoll_ctl
epoll_wait
ftruncate64
__memmove_chk
symlink
setgrent
getgrent
endgrent
getgrnam
getgrgid
fsync
getpwnam
setuid
utimes
utime
system
strcoll
wcscoll
asctime
socketpair
tempnam
tmpfile64
tmpnam_r
fchdir
fchmod
fchown
fdatasync
fpathconf
fstatvfs64
tcgetpgrp
tcsetpgrp
ttyname
setegid
seteuid
setgid
ctermid
getloadavg
getgroups
getppid
confstr
getresgid
getresuid
initgroups
getpwuid
lchown
setresgid
setresuid
alarm
setpwent
getpwent
endpwent
mkfifo
siginterrupt
setitimer
getitimer
pause
gai_strerror
getservbyname
getservbyport
inet_aton
inet_pton
sendto
inet_ntoa
inet_ntop
recvfrom
clock
gethostbyname_r
wait3
wait4
closelog
chroot
setlogmask
bind_textdomain_codeset
dcgettext
getprotobyname
_exit
openlog
__syslog_chk
setspent
getspent
endspent
getspnam
__xmknod
setpgid
setsid
getsid
killpg
getlogin
getpgid
nice
flock
bindtextdomain
setgroups
strxfrm
setbuf
putchar
__gmon_start__
dlsym
dlopen
dlerror
forkpty
openpty
inflateInit2_
adler32
deflate
deflateInit2_
inflateCopy
inflate
crc32
inflateEnd
deflateEnd
deflateCopy
deflateInit_
fabs
hypot
atan2
acos
floor
sincos
asin
atan
fmod
log10
sqrt
ceil
PyDictKeys_Type
PyList_Insert
_Py_Assert
PyInt_GetMax
PyMember_Set
PyCObject_SetVoidPtr
_Py_Assign
PyUnicodeEncodeError_GetEnd
_PyObject_Str
PyModule_AddObject
Py_SetRecursionLimit
PyLong_AsLongLongAndOverflow
_Py_title__doc__
init_sha256
PyExc_BaseException
PyExc_ImportError
PyErr_WarnExplicit
PyArg_VaParse
PyUnicodeEncodeError_GetReason
PyOS_string_to_double
PyArena_AddPyObject
PyString_Fini
partial_reduce
PyParser_SimpleParseFile
PySys_GetObject
PyUnicodeDecodeError_SetReason
Py_GetPath
PyString_AsDecodedString
PyDict_SetItemString
PyString_InternFromString
PyClass_IsSubclass
_PyImport_Fini
_Py_bytes_isupper
PyProperty_Type
Py_IncRef
_Py_Mangle
PyExc_UserWarning
_PyUnicodeUCS4_IsLinebreak
_Py_ZeroStruct
PyString_AsString
Py_NewInterpreter
PyExc_StopIteration
PyGen_Type
_PyImport_Inittab
PyType_GenericNew
PyUnicodeUCS4_FromEncodedObject
PyFrame_New
PyImport_Import
PyMemoryView_GetContiguous
PyIOBase_Type
_Py_lower__doc__
_Py_isalnum__doc__
_Py_alias
PyExc_UnicodeTranslateError
PyFunction_GetClosure
PyEval_SetTrace
PyMapping_Size
PyUnicodeUCS4_FromFormatV
_Py_bytes_isalpha
_PySequence_IterSearch
PyBool_Type
PyFileIO_Type
initoperator
PyGrammar_LabelRepr
_Py_svnversion
PyExc_OSError
PyEval_GetFrame
PyArg_UnpackTuple
_PyOS_ResetGetOpt
PyUnicodeUCS4_AsLatin1String
_Py_isalpha__doc__
PyObject_Cmp
_Py_List
PyThread_delete_key
PyMarshal_WriteObjectToString
PyCFunction_Call
PyObject_InitVar
PyOS_StdioReadline
PyList_GetItem
_PyGILState_Init
PyST_GetScope
initerrno
initimp
PyUnicodeDecodeError_SetEnd
__libc_csu_fini
PyObject_Print
_Py_BinOp
_Py_bytes_isspace
PyClass_Type
PyFunction_GetModule
PyFrame_Type
PyCFunction_GetFlags
PyUnicodeUCS4_Concat
_PyThreadState_GetFrame
_Py_Ellipsis
_PyObject_GenericGetAttrWithDict
_Py_AugAssign
_Py_translatelabels
_PyImport_FindExtension
PyNumber_InPlaceRshift
_PyUnicodeUCS4_IsTitlecase
_Py_asinh
PyGetSetDescr_Type
PyUnicodeUCS4_GetMax
Py_CompileStringFlags
PyImport_ExtendInittab
PyObject_CallMethod
_Py_addarc
_PyIO_str_isatty
PyOS_InterruptOccurred
_Py_hgidentifier
PyFrozenSet_Type
_PyObject_RealIsInstance
Py_ReprEnter
_PyEval_CallTracing
PyBufferedRWPair_Type
PyFrame_GetLineNumber
_PyUnicodeUCS4_ToTitlecase
_Py_ExceptHandler
PyIter_Next
PyString_Encode
_Py_While
PyByteArray_Concat
PyExc_SystemExit
_PyImport_ReleaseLock
_PyRandom_Fini
_Py_Str
Py_GetProgramFullPath
PyNumber_Remainder
init_codecs
PyFloat_GetInfo
PyModule_New
Py_InitModule4_64
Py_SetPythonHome
PyArena_New
PyExc_ValueError
PyType_Ready
PyClassMethod_New
PyUnicodeUCS4_DecodeUTF32Stateful
_Py_CheckInterval
_PyEval_SliceIndex
_PyIO_str_fileno
_PyIO_str_flush
PyInt_AsUnsignedLongMask
PyLong_FromVoidPtr
_Py_Set
_PySlice_FromIndices
PyWrapper_New
PyInstance_Type
PyExc_AssertionError
_PyIO_str_read
_PyCodec_LookupTextEncoding
_Py_TryFinally
PyErr_SetFromErrnoWithFilename
PyLong_AsVoidPtr
PyUnicodeUCS4_EncodeASCII
PyFile_SetBufSize
_Py_bytes_swapcase
PyFile_AsFile
_Py_Attribute
PyUnicodeUCS4_FromObject
init_sockobject
_Py_swapcase__doc__
_PyImport_DynLoadFiletab
PyList_AsTuple
PyEval_ReleaseThread
PyObject_Unicode
_PyTrash_delete_nesting
Py_NoSiteFlag
PyUnicodeUCS4_TranslateCharmap
_Py_expm1
PySuper_Type
PyParser_SimpleParseStringFlags
PyLong_FromUnsignedLong
PyNumber_Divmod
PyModule_AddStringConstant
_PyTime_DoubleToTimet
PyEval_ReleaseLock
initspwd
PyObject_SelfIter
PyLong_FromUnsignedLongLong
_PyOS_ReadlineTState
PySys_SetArgv
PyMem_Free
PyImport_ImportModuleNoBlock
init_heapq
PyAST_Check
PyNumber_InPlaceXor
PyExc_SystemError
PyTextIOWrapper_Type
_PyObject_GC_Resize
Py_EndInterpreter
PyObject_CallMethodObjArgs
PyRun_AnyFileFlags
_PyUnicodeUCS4_Fini
Py_GetPythonHome
_PyUnicodeUCS4_IsUppercase
PyNumber_InPlaceOr
PyInt_AsUnsignedLongLongMask
PyExc_IndentationError
PyUnicodeUCS4_DecodeUTF16Stateful
PyByteArray_Init
PyNumber_CoerceEx
PyFloat_GetMax
PyByteArray_AsString
PyGILState_Release
PyUnicodeUCS4_FromString
_PyTuple_MaybeUntrack
PyBuffer_FromReadWriteMemory
PyCObject_FromVoidPtr
_PyCodec_Lookup
PyExc_EOFError
PyErr_ProgramText
PyFile_DecUseCount
PyUnicode_BuildEncodingMap
PySys_SetPath
_PyArg_ParseTuple_SizeT
PyBool_FromLong
_PyString_Eq
initsyslog
_Py_bytes_isdigit
PyUnicodeEncodeError_SetStart
PyObject_AsWriteBuffer
initzipimport
_Py_Delete
PyBuffer_FromContiguous
PyDict_Items
PyCapsule_Type
_PyIO_str_close
PyMarshal_ReadObjectFromFile
_Py_Index
PyNumber_InPlaceRemainder
_Py_DictComp
_PyUnicode_EastAsianWidthNames
PyUnicodeDecodeError_SetStart
_PyImport_GetDynLoadFunc
_PyDict_Contains
_PyTuple_Resize
PyExc_PendingDeprecationWarning
PyUnicode_DecodeUTF7
PySequence_InPlaceConcat
PyErr_NoMemory
PyThreadState_Clear
PyGen_NeedsFinalizing
_Py_ReleaseInternedStrings
PyOS_ascii_atof
PyParser_SetError
PyEval_CallObjectWithKeywords
PyCodec_Encode
PyList_Type
PyExc_ImportWarning
_PyObject_CallFunction_SizeT
PyComplex_ImagAsDouble
PyInterpreterState_Delete
PyImport_ExecCodeModuleEx
Py_GetPlatform
PyString_InternInPlace
_Py_istitle__doc__
_PyImport_ReInitLock
PyImport_ImportModuleLevel
_PyObject_GetDictPtr
PyNode_ListTree
PyByteArray_FromStringAndSize
_Py_InsertThousandsGroupingLocale
PyNumber_Invert
PyCapsule_GetDestructor
PyObject_CallFunctionObjArgs
PyInt_ClearFreeList
PyCFunction_ClearFreeList
_PyWeakref_GetWeakrefCount
PyInterpreterState_Next
PyParser_SimpleParseStringFilename
_PyImport_FindModule
_PyTime_FloatTime
PyObject_IsTrue
PyBuffer_FromMemory
_PyThreadState_Prealloc
_PyIO_str_newlines
_PyTrash_deposit_object
Py_OptimizeFlag
_Py_c_prod
PyFunction_GetDefaults
PyCodec_StreamReader
_Py_Call
PyLong_FromDouble
PyCodec_XMLCharRefReplaceErrors
_PyCodec_DecodeText
_Py_NotImplementedStruct
PyExc_TypeError
Py_InitializeEx
Py_AddPendingCall
_PyOS_URandom
PyExc_UnicodeDecodeError
PyMarshal_ReadLongFromFile
PyList_SetSlice
PyByteArray_Size
PyFloat_FromString
PyLong_FromSize_t
PyMem_Realloc
PyMethod_Class
PyExc_Exception
PyExc_UnicodeError
PyBuffer_FillInfo
PyClassMethod_Type
_PyUnicode_DecodeUnicodeInternal
_Py_addlabel
PyFrame_BlockSetup
_Py_Exec
_PyArg_VaParseTupleAndKeywords_SizeT
PyObject_Not
PyDict_Type
PyErr_GivenExceptionMatches
_Py_HashSecret
PyBufferedWriter_Type
_Py_Return
_PyLong_AsByteArray
PyCode_Type
_Py_Interactive
PySTEntry_Type
PyMarshal_ReadObjectFromString
PyEllipsis_Type
PyThread_free_lock
_Py_QnewFlag
PyObject_AsFileDescriptor
PyStringIO_Type
PyNumber_Lshift
_PyUnicodeUCS4_ToUppercase
PyParser_SimpleParseStringFlagsFilename
PyExc_KeyError
Py_TabcheckFlag
PyNumber_InPlaceMultiply
PyListRevIter_Type
PySet_Fini
_PyObject_New
PyNumber_Negative
initxxsubtype
PyObject_HasAttr
PySys_AddWarnOption
PyMemoryView_FromBuffer
PyByteArray_Type
Py_FdIsInteractive
_PyIO_str_readinto
initselect
PyString_Repr
PyRun_InteractiveLoop
PyInt_Type
PyComplex_Type
PyFloat_Fini
Py_InspectFlag
PyExc_ReferenceError
_PyObject_NextNotImplemented
PyNumber_Positive
PyExc_FloatingPointError
PyOS_snprintf
PyEval_GetCallStats
PyDict_Merge
PyObject_GetItem
PyUnicodeUCS4_Decode
PyBuffer_Type
PyFunction_GetCode
init_sha
PySet_Size
_Py_ClassDef
PyUnicodeUCS4_AsUTF16String
_PyIO_os_module
PyAST_Compile
PyThread_allocate_lock
init_collections
PyString_Decode
PyNumber_Absolute
_PyWeakref_RefType
PyString_FromStringAndSize
PyFile_IncUseCount
initpwd
Py_DivisionWarningFlag
_PyObject_SlotCompare
PyFloat_AsReprString
Py_FindMethod
PyModule_Type
_PyUnicodeUCS4_IsAlpha
PyErr_SyntaxLocation
PyWeakref_GetObject
PyObject_CopyData
_PySet_NextEntry
_Py_add_one_to_index_C
_Py_HashDouble
PySequence_In
_PyIO_empty_str
PyImport_AddModule
PyArena_Free
_PyWarnings_Init
_Py_c_abs
PyThreadState_Delete
PyDictValues_Type
PyLong_AsLong
_PyLong_Format
PyObject_Length
PyNumber_InPlaceLshift
fast_save_leave
PyFrame_LocalsToFast
PyString_Size
_PyObject_GC_Malloc
_PyUnicodeUCS4_ToNumeric
PyParser_ParseStringFlagsFilename
PyCell_Set
PyUnicodeDecodeError_GetEncoding
PyModule_AddIntConstant
PyList_Fini
PyComplex_AsCComplex
PyThread_get_stacksize
PyDict_Update
PyExc_RuntimeWarning
PyFPE_jbuf
PyUnicodeUCS4_AsCharmapString
PyCObject_Import
_PyString_InsertThousandsGrouping
_Py_c_neg
PyComplex_RealAsDouble
PyErr_Format
PyFloat_FromDouble
PyDictIterItem_Type
PyFunction_New
PyNumber_Power
PyFunction_SetClosure
_PyLong_Init
PyBaseObject_Type
PyNumber_And
_PyFloat_Unpack4
_PySys_Init
_PyObject_Dump
PyUnicodeTranslateError_GetEnd
PyNumber_ToBase
PyNumber_Long
PyFrame_FastToLocals
init_sre
PyDictIterKey_Type
PyUnicodeUCS4_AsWideChar
PyUnicodeUCS4_DecodeUTF32
PyCode_New
PyArg_ParseTuple
PyList_GetSlice
PySequence_InPlaceRepeat
_PyList_Extend
PyDict_Fini
_PyArg_NoKeywords
PyCallIter_Type
PyByteArray_Fini
PyNumber_InPlaceAdd
_IO_stdin_used
_Py_FunctionDef
PyExc_ArithmeticError
Py_SetProgramName
_Py_samebitset
PyParser_AddToken
_PyDict_GetItemWithError
PyFile_Name
_PyIOBase_check_readable
PyMapping_HasKey
PyObject_GetAttr
PyErr_ExceptionMatches
_PyInt_FormatAdvanced
PyErr_Occurred
_PyModule_Clear
_PyWeakref_CallableProxyType
_Py_bytes_istitle
PyExc_RecursionErrorInst
PyDict_Copy
_PyString_FormatLong
_PyOS_GetOpt
PyTuple_GetSlice
PyFile_WriteObject
PyUnicodeEncodeError_GetObject
PyObject_GenericSetAttr
PyUnicodeUCS4_DecodeLatin1
PyOS_Readline
_PyThreadState_Init
initposix
PyNumber_InPlaceTrueDivide
Py_VaBuildValue
PyUnicodeDecodeError_GetReason
_PyFloat_Unpack8
PyThreadState_DeleteCurrent
_PyObject_RealIsSubclass
PyUnicodeUCS4_SetDefaultEncoding
Py_FindMethodInChain
PyMarshal_ReadShortFromFile
PyRun_SimpleFile
PySet_Pop
PyArena_Malloc
_PyIOBase_check_writable
PyThread_release_lock
PyLong_AsDouble
PyBuffer_ToContiguous
PyObject_IsSubclass
PyType_Modified
PyExc_BufferError
PyEval_GetLocals
PyIncrementalNewlineDecoder_Type
_PyLong_FromByteArray
PyCodec_LookupError
PyMapping_Check
PyByteArray_Resize
PyObject_GetBuffer
PySys_GetFile
_PyTrash_delete_later
alula
PyExc_BlockingIOError
_PyUnicode_CategoryNames
PyDictIterValue_Type
_PyObject_GenericSetAttrWithDict
_Py_hgversion
PyMethod_Fini
__data_start
PyBaseString_Type
PyExc_SyntaxError
_PyInstance_Lookup
PyRun_InteractiveOne
initdatetime
PyCodec_IncrementalDecoder
Py_UseClassExceptionsFlag
PyArg_ParseTupleAndKeywords
PyParser_ParseStringFlagsFilenameEx
PyLong_AsLongAndOverflow
PyNumber_Divide
PyNode_Compile
_PyExc_Init
PyCapsule_New
PyAST_FromNode
Py_GetProgramName
PyEval_GetGlobals
PyFloat_Type
PyDict_Keys
PyUnicodeUCS4_DecodeUTF8Stateful
PySequence_Index
_PyParser_Grammar
PyNumber_FloorDivide
PyComplex_FromDoubles
_PySet_Update
PyCell_New
_Py_md5_init
_PyIO_str_writable
PyExc_TabError
PyMember_GetOne
PyExc_EnvironmentError
init_socket
PyObject_AsReadBuffer
PyUnicode_EncodeUTF7
Py_DebugFlag
Py_FlushLine
PyTuple_Fini
PyParser_ParseFile
_PyIO_str_seekable
_PyIO_str_nl
PyObject_Dir
PyExc_ZeroDivisionError
_Py_GeneratorExp
_Py_isspace__doc__
_PyIO_zero
PyExc_IndexError
_PyObject_Del
PySet_Type
PyEval_InitThreads
PyErr_SetObject
PyRun_SimpleFileExFlags
PyParser_ASTFromString
PyNumber_Multiply
PyReversed_Type
PyEval_RestoreThread
PySequence_Concat
asdl_int_seq_new
PyAST_mod2obj
_PyArg_VaParse_SizeT
PyErr_WriteUnraisable
PyMarshal_WriteLongToFile
_PyObject_NewVar
_PyUnicodeUCS4_AsDefaultEncodedString
PyRun_FileExFlags
_Py_Import
PyUnicodeEncodeError_GetEncoding
PyUnicodeUCS4_FromStringAndSize
PyEval_EvalCodeEx
PyExc_LookupError
PyFloat_ClearFreeList
PyBytesIO_Type
PyMethod_ClearFreeList
PyUnicode_Type
PyExc_MemoryError
PyExc_DeprecationWarning
init_struct
Py_BytesWarningFlag
_PyCode_CheckLineNumber
_Py_Tuple
PyUnicodeEncodeError_Create
PyRun_AnyFile
PyTupleIter_Type
PyObject_Size
PyNumber_Float
_Py_HashPointer
PySignal_SetWakeupFd
PyCodec_BackslashReplaceErrors
initcmath
_PyIO_str_readable
PyThread_get_thread_ident
PyUnicodeDecodeError_GetObject
PyByteArrayIter_Type
Py_FrozenFlag
PyUnicodeTranslateError_GetStart
PyEval_CallMethod
PyCObject_GetDesc
PyBufferedReader_Type
PyUnicodeUCS4_GetDefaultEncoding
init_ast
partial_setstate
Py_UniversalNewlineFread
Py_HashRandomizationFlag
_Py_mergebitset
_Py_TrueStruct
PyUnicodeUCS4_DecodeCharmap
PyFrozenSet_New
PyRun_InteractiveLoopFlags
PyThreadState_New
PyString_FromString
_Py_Lambda
_Py_meta_grammar
_PyObject_GC_New
PyUnicodeUCS4_RichCompare
PyRawIOBase_Type
PySequence_DelItem
PyString_FromFormat
PyNumber_InPlaceAnd
_Py_upper__doc__
PyErr_Display
_PyUnicode_TypeRecords
PyMember_SetOne
_Py_CheckRecursionLimit
PyTuple_Pack
PyString_Concat
PyInt_FromLong
PyLong_FromString
PyUnicode_DecodeUTF7Stateful
PySymtable_Free
PyEval_SaveThread
_PyInt_FromUid
PySlice_GetIndicesEx
initcPickle
Py_VerboseFlag
_Py_VaBuildValue_SizeT
PyExc_UnboundLocalError
PyThread_set_stacksize
PyNumber_AsOff_t
PyThreadState_Get
PyLong_FromUnicode
PyTuple_Type
PyParser_ParseFileFlags
PyInt_AsSsize_t
PyModule_GetFilename
_PyIO_str_encode
PyEval_AcquireThread
PyRun_String
PyCodec_ReplaceErrors
_PyTrash_thread_destroy_chain
PyInt_FromSize_t
initstrop
PyBuffer_FromObject
Py_AtExit
PyOS_mystricmp
PyCapsule_SetDestructor
_PyCode_ConstantKey
PyOS_getsig
PyDict_Size
_Py_For
_PyComplex_FormatAdvanced
_PyGC_Dump
PyCallIter_New
_PyFrame_Init
_PyInt_Format
PyModule_GetDict
PyCapsule_SetPointer
_Py_Raise
_Py_bytes_upper
PyUnicodeTranslateError_GetReason
PyCode_NewEmpty
_Py_md5_finish
PyBufferedRandom_Type
PyRun_FileFlags
_Py_BoolOp
Py_InteractiveFlag
_PyIO_empty_bytes
PySequence_GetItem
_PyCodecInfo_GetIncrementalDecoder
PyErr_SetFromErrnoWithFilenameObject
Py_SymtableString
PyDict_GetItem
PyRange_Type
PyMemoryView_FromObject
_PyImport_IsScript
PyErr_Restore
PyEval_GetRestricted
PyCapsule_GetName
_PyOS_ascii_formatd
PyDescr_NewWrapper
Py_NoUserSiteDirectory
PyObject_SetItem
PyBuffer_IsContiguous
_PyOS_ascii_strtod
PyFile_Type
PyInt_AsLong
_Py_Expr
PyObject_GenericGetAttr
PyToken_TwoChars
PyLong_AsSsize_t
PyUnicodeUCS4_AsRawUnicodeEscapeString
PySys_WriteStdout
PyCObject_AsVoidPtr
PyCell_Get
PyNumber_InPlaceFloorDivide
PyOS_AfterFork
_PyLong_New
PyString_AsDecodedObject
PyObject_RichCompare
PyGrammar_FindDFA
PyCFunction_NewEx
_PyUnicode_FormatAdvanced
PyInterpreterState_Clear
PyCFunction_GetSelf
_Py_cobject_hack
PyExc_BytesWarning
PyLong_AsUnsignedLongLongMask
PyDict_Values
PySequence_Size
_Py_addstate
PyObject_GetIter
PyUnicodeUCS4_Translate
PyExc_RuntimeError
PyList_Size
PyUnicodeUCS4_Encode
PyImport_ImportFrozenModule
_Py_add_one_to_index_F
PyNumber_Rshift
_Py_c_quot
PyStaticMethod_New
PyType_IsSubtype
PyTokenizer_Get
_Py_newgrammar
PyInterpreterState_Head
PyBufferedIOBase_Type
_Py_Uid_Converter
PyErr_NewExceptionWithDoc
PyType_Type
PyUnicodeUCS4_Splitlines
_PyNumber_ConvertIntegralToInt
PyOS_InitInterrupts
PyByteArray_FromObject
__libc_csu_init
asdl_seq_new
_PyIncrementalNewlineDecoder_decode
PyExc_IOError
_Py_isupper__doc__
PyObject_AsCharBuffer
PyUnicodeUCS4_EncodeUTF8
PyFrame_BlockPop
PyInterpreterState_New
initthread
PyExc_MemoryErrorInst
_PyImport_Init
PyUnicodeTranslateError_GetObject
PyThread_ReInitTLS
_PyTrash_thread_deposit_object
PyThread_init_thread
init_symtable
PyDescr_NewMethod
_PyFloat_Pack4
_Py_Pass
_PyIO_str_closed
_PyUnicode_Database_Records
_PyParser_TokenNames
PySys_WriteStderr
Py_SubversionShortBranch
PyObject_Init
PyTokenizer_FromFile
PyEval_EvalCode
PyCode_Optimize
Py_GetVersion
Py_DecRef
_PyLong_DigitValue
PyThread_get_key_value
PyNumber_Add
PyErr_BadArgument
PyFPE_dummy
_PyExc_Fini
PyWeakref_NewProxy
_Py_If
PyNumber_Coerce
_Py_addfirstsets
PyGILState_Ensure
PyInt_Fini
Py_SubversionRevision
_Py_bytes_title
_Py_c_diff
_Py_Continue
PyDict_DelItem
PyList_Sort
PySequence_DelSlice
Py_FileSystemDefaultEncoding
PyObject_DelItemString
PyRun_InteractiveOneFlags
_Py_Break
PyUnicode_AsDecodedObject
_PyThread_CurrentFrames
PyErr_WarnEx
_Py_comprehension
PyTokenizer_RestoreEncoding
_PyFloat_Pack8
PyErr_Warn
_PyErr_ReplaceException
PyErr_NormalizeException
_PyFileIO_closed
PyMethod_Type
PyTraceBack_Type
PyEval_EvalFrame
PyObject_CallObject
PyStaticMethod_Type
PyUnicodeUCS4_FromOrdinal
PyNumber_AsSsize_t
PyNumber_Xor
_PyIO_str_seek
PyUnicodeUCS4_Partition
_PyUnicodeUCS4_IsLowercase
PyCapsule_GetContext
_PyTrash_destroy_chain
_Py_atanh
PyUnicodeUCS4_EncodeUnicodeEscape
_PyIOBase_check_closed
PyObject_Malloc
PyUnicodeUCS4_EncodeDecimal
_PyCodec_EncodeText
PyErr_Fetch
Py_Initialize
PyModule_GetName
PyFile_GetLine
PyUnicodeDecodeError_GetEnd
PyString_AsEncodedObject
PyUnicodeUCS4_DecodeRawUnicodeEscape
PyImport_ReloadModule
_Py_bytes_lower
PyUnicodeUCS4_Resize
PyObject_Type
PyFloat_AsDouble
PyCodec_Decoder
PyParser_SimpleParseFileFlags
_Py_dg_dtoa
_Py_delbitset
PyParser_ParseString
PyThreadState_GetDict
PyWrapperDescr_Type
PyObject_Format
PyEval_GetFuncName
PyUnicodeUCS4_Join
PySequence_Fast
PyRun_AnyFileEx
PyAST_obj2mod
PyCell_Type
PySeqIter_Type
PyStructSequence_InitType
_PyUnicode_BidirectionalNames
PySequence_Check
PyObject_Hash
PyFile_SoftSpace
PyObject_ClearWeakRefs
PyUnicodeEncodeError_GetStart
_Py_ImportFrom
PyNullImporter_Type
PyGC_Collect
_PyObject_GC_Track
PyNode_AddChild
_PyObject_LengthHint
PyEnum_Type
PyTraceBack_Print
PyCodec_Encoder
initzlib
PyEval_SetProfile
_PyIO_str_reset
PyUnicodeTranslateError_SetReason
_PyUnicodeUCS4_IsDigit
PySet_Add
PyNumber_InPlacePower
PyOS_mystrnicmp
Py_BuildValue
PyUnicodeUCS4_FromWideChar
initsignal
PyObject_HashNotImplemented
PySlice_GetIndices
PyNumber_Subtract
PySlice_New
PyFunction_GetGlobals
_Py_isdigit__doc__
PyObject_GetAttrString
PyUnicodeEncodeError_SetReason
_Py_parse_inf_or_nan
PyCFunction_GetFunction
_Py_newbitset
PyOS_vsnprintf
PyCObject_FromVoidPtrAndDesc
__bss_start
_PyIO_locale_module
PyObject_IsInstance
PyLong_Type
PyParser_ParseFileFlagsEx
_PyIO_unsupported_operation
PyExc_Warning
PyRun_StringFlags
Py_GetRecursionLimit
PyCodec_StrictErrors
PyType_ClearCache
PyMapping_HasKeyString
PyMemberDescr_Type
_PyObject_GC_NewVar
PyCFunction_New
PyUnicodeUCS4_Split
PyMemoryView_Type
init_random
PyInt_FromString
_Py_EllipsisObject
PyMethod_Function
PyMethod_Self
_PyString_Join
PyBuffer_FillContiguousStrides
PyCodec_RegisterError
PyObject_SetAttrString
initarray
_Py_Repr
_Py_NoneStruct
PyStructSequence_New
init_md5
PyParser_SimpleParseString
PyUnicodeUCS4_EncodeCharmap
_PyFloat_FormatAdvanced
PyExc_OverflowError
PyUnicodeUCS4_Count
PyWeakref_NewRef
init_weakref
PyNumber_Check
PyString_FromFormatV
PyUnicodeDecodeError_Create
PyErr_NewException
PyList_Append
_PySet_Next
PyObject_SetAttr
_PyUnicodeUCS4_ToLowercase
PyEval_GetBuiltins
_PyOS_opterr
PyCFunction_Fini
PyMember_Get
PyErr_SetNone
PyTokenizer_FromString
_PyUnicodeUCS4_ToDecimalDigit
PyUnicodeUCS4_DecodeUTF16
PyFrame_Fini
_Py_UnaryOp
PyThreadState_SetAsyncExc
_PyDict_MaybeUntrack
PyDictProxy_Type
_PyIO_str_truncate
_Py_c_pow
PySet_Clear
_PyLong_Sign
PyErr_CheckSignals
_Py_capitalize__doc__
_PyImport_AcquireLock
PyThreadState_Swap
_Py_IfExp
PyBuffer_GetPointer
PyDict_GetItemString
Py_UniversalNewlineFgets
PyNumber_InPlaceDivide
_Py_Compare
PyLong_AsLongLong
init_sha512
_Py_Gid_Converter
_PyArg_Parse_SizeT
PyParser_New
_Py_TryExcept
Py_Finalize
_PyInt_FromGid
PyUnicodeDecodeError_GetStart
PySequence_Tuple
PyObject_Call
PyThread_set_key_value
initmath
PyErr_Print
_Py_md5_append
PyCapsule_SetContext
_Py_findlabel
PyTokenizer_Free
PyExc_AttributeError
PyUnicodeUCS4_AsEncodedString
_PyImport_LoadDynamicModule
_Py_acosh
PySys_SetArgvEx
PyUnicodeUCS4_EncodeLatin1
_PyIO_find_line_ending
PySlice_Type
PyExc_StandardError
PyLong_FromLong
_Py_Print
PyDescr_NewClassMethod
PyLong_AsUnsignedLongLong
_Py_arguments
PyOS_FiniInterrupts
_Py_Global
_Py_ListComp
PyObject_Compare
_Py_Subscript
PyRun_AnyFileExFlags
_Py_dg_strtod
PyString_ConcatAndDel
PyTraceBack_Here
PyDict_DelItemString
PyNumber_Or
_PyObject_GC_UnTrack
PyOS_strtoul
_PyThreadState_Current
PyGrammar_RemoveAccelerators
_PyFile_SanitizeMode
PyThreadState_Next
PyOS_setsig
PyObject_DelItem
_Py_SwappedOp
PyMarshal_WriteObjectToFile
_PyWeakref_ClearRef
_PyRandom_Init
_PyNode_SizeOf
PyDescr_NewMember
PyNumber_InPlaceSubtract
PyEval_MergeCompilerFlags
PySet_New
PyArg_Parse
PyLong_FromLongLong
PyNode_New
Py_GetExecPrefix
_Py_bytes_isalnum
PyExc_NameError
_PyIO_str_decode
_PyOS_optind
_PyLong_Frexp
PyRun_SimpleStringFlags
_Py_SetComp
_PyUnicodeUCS4_IsWhitespace
PyUnicodeUCS4_DecodeUTF8
_Py_ctype_tolower
PyOS_InputHook
_Py_Num
PyInt_FromSsize_t
PyCapsule_SetName
init_locale
_Py_capsule_hack
PyUnicodeUCS4_Replace
PyMethod_New
PyUnicodeUCS4_Compare
_PyInt_Init
PyString_AsStringAndSize
PyExc_FutureWarning
PyEval_CallFunction
_PyByteArray_empty_string
_PyGC_generation0
PyObject_Free
Py_Main
_Py_Suite
PySequence_GetSlice
PyTuple_Size
PyImport_ImportModule
_end
PyMapping_GetItemString
PyUnicodeUCS4_DecodeASCII
PyCodec_IncrementalEncoder
_Py_keyword
PyFuture_FromAST
PyExc_KeyboardInterrupt
_PyLong_NumBits
PySeqIter_New
_PyLong_AsInt
_PyLong_Copy
PyInterpreterState_ThreadHead
_Py_set_387controlword
PyErr_Clear
PyGILState_GetThisThreadState
PyCodec_Register
Py_GetCopyright
PyTuple_New
_Py_CheckRecursiveCall
PyCFunction_Type
_Py_With
PyThread_create_key
PyMapping_Length
Py_GetBuildInfo
PyNode_Free
PyMarshal_Init
_PyImport_FixupExtension
PyUnicodeUCS4_Tailmatch
_Py_ReadyTypes
PyUnicodeUCS4_GetSize
PySequence_SetItem
PySys_ResetWarnOptions
_PyUnicodeUCS4_Init
initfcntl
_PyIO_trap_eintr
Py_GetPrefix
_PyErr_BadInternalCall
PyUnicodeUCS4_AsASCIIString
_Py_adddfa
Py_MakePendingCalls
_PyImport_Filetab
PyImport_GetModuleDict
PyCodec_IgnoreErrors
PyExc_NotImplementedError
PyUnicodeUCS4_AsEncodedObject
PyModule_GetWarningsModule
PyBuffer_New
PyImport_AppendInittab
PySet_Discard
PyMapping_SetItemString
PySet_Contains
init_bisect
_PyIOBase_check_seekable
PyTuple_SetItem
PyCode_Addr2Line
_Py_ExtSlice
PyFrame_ClearFreeList
PyExc_UnicodeEncodeError
PyTuple_GetItem
_PyString_Resize
PyObject_RichCompareBool
PyLong_FromSsize_t
PyCodec_StreamWriter
PyErr_SetString
PySequence_Contains
PyStructSequence_UnnamedField
inittime
PyNumber_TrueDivide
PyUnicodeUCS4_Find
PyTextIOBase_Type
Py_FatalError
PyDictProxy_New
PyMarshal_ReadLastObjectFromFile
_Py_ascii_whitespace
PyString_InternImmortal
Py_GetCompiler
PyInt_FromUnicode
PyFloat_GetMin
PyThread_exit_thread
_Py_islower__doc__
PyUnicodeUCS4_AsUnicodeEscapeString
PyUnicodeUCS4_FromFormat
PyUnicodeUCS4_DecodeUnicodeEscape
_PyIO_str_tell
PyUnicodeUCS4_AsUnicode
PyLong_GetInfo
PyImport_GetMagicNumber
PyToken_ThreeChars
_Py_bytes_islower
PyBuffer_FromReadWriteObject
Py_Py3kWarningFlag
_PyIO_str_readline
PyList_SetItem
PyObject_CallFunction
PyObject_Realloc
initunicodedata
_Py_abstract_hack
PyThread_delete_key_value
PyList_Reverse
PyEval_EvalFrameEx
PyString_Type
PyFile_SetEncodingAndErrors
_PyBytes_FormatAdvanced
PySequence_Count
PyExc_GeneratorExit
_PyCodecInfo_GetIncrementalEncoder
initcStringIO
Py_IgnoreEnvironmentFlag
Py_CompileString
_Py_ctype_toupper
_PyIO_str_write
init_io
PyFunction_SetDefaults
_Py_Expression
initgc
PyUnicodeUCS4_EncodeUTF32
_PyDict_NewPresized
PyEval_AcquireLock
PyUnicodeUCS4_Format
PyOS_double_to_string
PyUnicodeEncodeError_SetEnd
_PyGILState_Fini
PyUnicodeTranslateError_SetEnd
PyGen_New
PyCapsule_IsValid
_Py_pgen
_PyOS_optarg
PyImport_Cleanup
PyRun_SimpleString
PyClass_New
initgrp
_PyImportHooks_Init
PyNumber_Int
_PyIO_ConvertSsize_t
_Py_bytes_capitalize
PyUnicodeUCS4_Contains
PyOS_ReadlineFunctionPointer
PyTuple_ClearFreeList
PyUnicodeUCS4_FromUnicode
_PyFloat_Init
Py_Exit
PySequence_Length
_edata
PyRun_FileEx
PyListIter_Type
PyParser_ASTFromFile
_Py_c_sum
PyExc_UnicodeWarning
_Py_Yield
PyImport_ExecCodeModule
PyDescr_NewGetSet
PyInstance_NewRaw
_PyWeakref_ProxyType
_PyIO_str_setstate
PyUnicodeUCS4_AsUTF32String
PyFile_WriteString
PyArg_VaParseTupleAndKeywords
_PyArg_ParseTupleAndKeywords_SizeT
PyFile_SetEncoding
initbinascii
PyGrammar_AddAccelerators
PySymtable_Build
PyObject_HasAttrString
_PyObject_GC_Del
PyComplex_FromCComplex
PyBuffer_Release
_Py_dg_freedtoa
PyUnicodeUCS4_AsUTF8String
Py_ReprLeave
PyEval_ThreadsInitialized
PySys_HasWarnOptions
PyFile_FromString
_Py_log1p
PyUnicodeUCS4_RSplit
_PyType_Lookup
PySequence_Repeat
Py_DontWriteBytecodeFlag
PySymtable_Lookup
_PyInt_AsInt
PyUnicodeUCS4_EncodeUTF16
PyRun_File
PyCObject_Type
_Py_Dict
PyParser_ParseStringFlags
PyExc_SyntaxWarning
PyLong_AsUnsignedLongMask
_Py_PackageContext
PyUnicodeTranslateError_Create
_Py_get_387controlword
inititertools
_PyObject_LookupSpecial
PyUnicodeUCS4_RPartition
_Py_Ticker
_PyOS_mystrnicmp_hack
PyOS_strtol
_Py_ctype_table
init_functools
_PyLong_FormatAdvanced
PyImport_GetImporter
PyList_New
PyErr_SetFromErrno
PyType_GenericAlloc
PyMem_Malloc
PyObject_CheckReadBuffer
PyString_Format
PyCallable_Check
PyErr_PrintEx
PyDictItems_Type
PyEval_ReInitThreads
PyCapsule_GetPointer
_PyObject_CallMethod_SizeT
_Py_double_round
Py_IsInitialized
PyDict_Clear
PyString_AsEncodedString
_PySys_GetSizeOf
_Py_Name
_PyUnicode_XStrip
PyNumber_Index
_Py_Slice
_PyIO_str_read1
_Py_addbit
PyThread_start_new_thread
PyDict_MergeFromSeq2
_PyUnicodeUCS4_IsNumeric
PyParser_Delete
PyDict_SetItem
_PyBuiltin_Init
PyString_DecodeEscape
PyFile_FromFile
PyObject_Repr
PySequence_SetSlice
PyFloat_AsString
_Py_BuildValue_SizeT
PyImport_FrozenModules
PyCapsule_Import
PyEval_GetFuncDesc
PySequence_List
PyErr_SetInterrupt
PyLong_AsUnsignedLong
_PyDict_Next
_Py_DisplaySourceLine
PyFunction_Type
PyFPE_counter
_PyIO_str_getstate
PyUnicodeUCS4_EncodeRawUnicodeEscape
PyDict_New
Py_GetArgcArgv
PyToken_OneChar
PyInstance_New
PyUnicodeUCS4_ClearFreelist
_PyIOBase_finalize
_PyUnicodeUCS4_ToDigit
PyRun_SimpleFileEx
Py_UnicodeFlag
PySys_SetObject
PyThread_acquire_lock
_Py_Module
Py_FrozenMain
_PyUnicodeUCS4_IsDecimalDigit
PyUnicodeTranslateError_SetStart
PyCodec_Decode
ZLIB_1.2.0
GLIBC_2.2.5
GLIBC_2.15
GLIBC_2.14
GLIBC_2.7
GLIBC_2.4
GLIBC_2.3
GLIBC_2.3.2
GLIBC_2.3.4
5b{L
%d{L
%b{L
%Z{L
%R{L
%J{L
%B{L
%:{L
%2{L
%*{L
%"{L
%zzL
%rzL
%jzL
%bzL
%ZzL
%RzL
%JzL
%BzL
%:zL
%2zL
%*zL
%"zL
%zyL
%ryL
%jyL
%byL
%ZyL
%RyL
%JyL
%ByL
%:yL
%2yL
%*yL
%"yL
%zxL
%rxL
%jxL
%bxL
%ZxL
%RxL
%JxL
%BxL
%:xL
%2xL
%*xL
%"xL
%zwL
%rwL
%jwL
%bwL
%ZwL
%RwL
%JwL
%BwL
%:wL
%2wL
%*wL
%"wL
%zvL
%rvL
%jvL
%bvL
%ZvL
%RvL
%JvL
%BvL
%:vL
%2vL
%*vL
%"vL
%zuL
%ruL
%juL
%buL
%ZuL
%RuL
%JuL
%BuL
%:uL
%2uL
%*uL
%"uL
%ztL
%rtL
%jtL
%btL
%ZtL
%RtL
%JtL
%BtL
%:tL
%2tL
%*tL
%"tL
%zsL
%rsL
%jsL
%bsL
%ZsL
%RsL
%JsL
%BsL
%:sL
%2sL
%*sL
%"sL
%zrL
%rrL
%jrL
%brL
%ZrL
%RrL
%JrL
%BrL
%:rL
%2rL
%*rL
%"rL
%zqL
%rqL
%jqL
%bqL
%ZqL
%RqL
L$ 1
=C(N
[]A\
T$0[]A\
5r"N
[]A\A]A^A_
w:SH
 u4H
S`M;
K`M;Ah
K`H;y`
C`I;
L;QP
|$ 1
s`L;
K`H;
S`M;
{`H;
K`M;
s`H;
K`M;
rhL;F@
RhM;JH
H;p(
K`H;
C`I;
C`I;
S`L;
{`H;
K`M;
K`H;
[`M;
{`H;
[]A\A]
D$ L
D$(L
L$ H
L$ L
B Mk
h(Z[]
X[]A\A]
/wGE
D$ H
L$ L
T$(f
\$ H
t$ uXM
L$(I
T$8H
@tAH
t H=
D$pH
t$xI
\$xL
uGUSH
tSAUATE1
@t.H
X[]A\A]
]A\A]A^A
[]A\
PAUL
T$01
l$(A
=`+U
[]A\A]A^A_
=>;U
[]A\A]A^A_
/uCH
D$lH
L9t$8
V0Ic
|$0H
-^DL
5YDL
 ttI
tVHc
-]CL
x5E1
H0Z[]A\A]
=aoN
J0Z[]A\A]
=:4N
V0E1
D$0L
t$0H
=2sM
AWAVI
AUATUSH
D$81
|$8dH3<%(
H[]A\A]A^A_
T$0H
t$(H
|$ H
T$0H
t$(H
|$ H
L9d$
 tQH
t9Ik
T$0H
t$(H
|$ H
T$0H
t$(H
|$ H
~0E1
=LjM
L$xH
=!'N
=Y&N
7t#H
T$HI
T$HI
T$HA
T$`L
\$XH
L$PL
T$HL
t$PH
L$XD
L$`yZH
T$HH
t$PL
	tbL
T$DE1
L$HtQH
L$HH
P$E1
S$E1
t$XL
T$P1
T$PL
T$PH
\$HM
|[H=
t$HL
|$P1
L$D1
L$`L
T$XH
|$PH
L$HuvH
D$HH
L$PL
T$XD
L$`y=H
\$HH
t$PL
u~H=
T$HuaH
P$E1
/whD
&t:E
T$HA
T$HA
T$HM
L9\$P
L$PI
t$XH
D$PH
l$XH
t$`H
T$`H
T$Hu
|$XH
t$PH
E|$p
L$XH
D$XH
T$pI
T$PA
T$hL
\$PM
D$`Ic
d$`Ic
T$PH
\$hH;
|$hI
T$`H
|$PI
T$`H
T$PM
T$XI
/wVE
/wvE
>tSH
T$PL
T$PL
|$PL
|$PL
0tJL
P$E1
S$E1
L$ L
T$PL
|$PL
u|H=
T$PL
|$PL
P$E1
L$ L
T$PA
T$PE1
T$PI
8tSA
/w?E
T$PH
t$HH
*uNH
/waD
H9T$
L$(I
t$ H
|WH=
0vjI
T$ H
\$8H
t$8H
\$(H
T$ Mc
l$ IcM
\$(H;
|$(I
/wQA
L$ L
L$ L
L$(L
T$ H
L$(L
\$0H
\$(H
L$ L
L$ L
xt6H
/wYE
lu&A
/wOD
/w\D
T$(H
t$ H
/w0E
ATUH
sxHk
[]A\
[]A\
Z[]A\A]A
Z[]A\A]
=n%M
[]A\
={gU
=0gU
L;t$ 
D$HH
L$HH
=vCS
T$`A
|$`M
H9L$ 
=?aU
l$HI
|$HH
="}M
|$HE1
|$HH
|$HE1
t$HI
|$HE1
|$HH
l$HH
|$HE1
|$HI
|$HL
\$HH
|$HL
=fxM
I9w(L
H;p(H
8E;g
[]A\
T$0H
[]A\A]A^
H0Z[]
F0XA
[]A\
t$,H
l$8I
|$ unH
=zoM
4$H=
T$8H
T$xL
L$ L
T$8y
|$xH
uPH=
\$ H
=BlM
/wXA
=qkM
.t(H
/w]E
=}iM
t$`1
P$E1
=-fM
|$xH
L$8L
\$HH
D$ I
\$ I
D$@Lc
d$@Ic
T$ H
\$HH;
l$HI
T$xL
\$ M
,$H=
t$(H
L$(A
=M^M
H0Z[]
H= e
t<Y[]
|$XL
T$ H
D$XK
|$XH
D$XI
|$XL
\$XI
|$XL
T$0L
=a	M
|$XL
[]A\A]A^
\$8L
|$8E1
T$pH
L$pE1
l$8L
?it@M
H9l$PI
t$@H
d$8L
\$8@
t$pA
D$8A
D$H3
D$ H
\$ uD
\$ t-H
d$hM
\$ L
\$ L
D$ H
\$HH
d$ I)
D$0I
\$(H
T$HtuL
T$0H
D$(H
L$ L
D$(H
|$01
|$0H
D$ H
|$0H
D$ H
|$HH
|$0H
D$ D
\$HH
\$0A
\$0H
T$0H
|$(1
|$(H
T$ I
\$ L
T$ L
\$ L
=f&U
\$(D
D$ L
IcL$
D$ D
|$ L
|$ H
\$ t
|$pH
|$8A
\$8E
\$0D
D$(H
L$ D
|$ D
L$ D
D$(D
\$XA
\$8D
t$8A
AUATI
USHc
tsHk
[]A\A]
D$8D
L$4L
T$(H
T$ L
T$(D
L$4L
L$(L
T$ D
\$ Ik
E;D$
L$(H
\$$A
L$(L
T$ D
AWAVI
AUATI
D$x1
T$oH
D$ H
L$xdH3
[]A\A]A^A_
A;X@u0A;
M+G L
\tTL
M+W 
L9T$
(tJA
JtHA
t+H;l$
|$ L
A;Z@u
k@I9
t$(L
t$ I
t$(I
D$(Hc
T$@H
\$\D
L$PL
T$HH
D$8L
T$HLcL$PD
\$(D
L$ A
$LcL$ D
D$(I
\$0D
L$(L
T$ LcL$(D
\$8D
L$(A
R0LcL$(D
|$XE
L$ L
\$0H
L$(L
Q0LcL$ D
\$0H
L$(L
Q0Lc
t%H=
t$SH
[]A\
q@E1
v8t~
T$8t
T$81
\$8t
\$HL
|$HL
|$HL
t$0H
|$PL
\$HA
\$HL
|$0L
\$8L
T$HE1
\$HL
\$8tiH
\$8H
\$HM
\$HL
L$8E1
\$HL
\$HL
\$HL
T$PL
|$HL
T$PtmI
L+t$
|$HL
t0E1
D$PL
t$HA
t$HH
\$8L
\$HL
\$HL
\$HL
T$HL
D$PI
|$HH
L$PL
|$HH
L$PH
|$HL
|$HH
L$PL
\$HH
\$HH
\$HL
\$HL
\$HE1
\$HE1
L+|$
\$HA
D$8E1
\$HL
\$HtTH
\$HH
D$PL
\$HL
T$HL
T$hL
\$8I
t$HL
\$8L
D$PL
\$HH
|$0L
\$HL
T$HL
\$HA
\$HH
\$HL
\$8L
\$8A
|$HL
\$8H
\$HA
T$PL
T$PL
\$HL
\$HL
T$PL
\$HL
\$HA
\$HL
T$HL
T$PH
T$PL
\$HL
\$HL
|$HH
\$PH
|$HL
\$PH
|$HL
|$HL
\$8M
T$HA
\$8L
T$HI
L$HL
L$HH
t+E1
T$PL
\$HD
\$HL
\$HL
\$Hx1H
\$HH
\$HL
\$HL
\$HL
\$HH
\$HH
\$HH
\$HH
\$PL
\$8L
\$8A
t$HL
\$8E1
\$8tgH
\$8I
L+|$
D$HH
T$PH
L$HL
L$HH
T$PL
L$HA
L$HH
L$xL
T$PL
\$HL
T$PH
|$PL
\$HA
\$HH
T$PI
D$P1
L$HI
L$xL
T$PL
\$HL
T$PH
|$HH
\$PH
|$HL
\$PH
|$HL
|$HL
T$PL
\$HA
\$HL
\$PL
\$HA
\$HH
L$HH
Q0Hc\$H
D$PI
\$8L
T$PH
|$HL
|$HH
T$PH
|$HL
|$HH
L$HL
D$HL
|$HL
|$HH
T$PL
|$HH
\$HL
tgE1
l$hL
\$8E1
T$HE1
t$HL
\$8H
\$8L
V0E1
D$HL
\$8A
\$HD
D$PL
\$HD
\$HI
=}eM
L$PL
\$HA
\$HH
\$HL
D$PA
\$HD
t$HE1
T$PL
D$HA
D$HH
\$HL
,$E1
\$8L
L$PH
|$HL
|$HH
|$HH
L$PL
|$HH
\$HL
L$xL
T$PL
\$HH
\$HL
T$PH
U0Mk
H+E@H
\$8A
\$8L
T$PM
T$PH
T$PI
L$xL
T$PL
L$xu
T$xL
L$PL
T$xH
L$xL
T$PH
T$PL
D$PL
\$HD
=B_M
\$8E1
T$PL
\$HH
\$HH
T$PL
T$PL
\$HH
\$HA
L$PL
T$HA
T$HH
t$HH
T$PL
D$HA
D$HH
L+\$
\$HH
\$PA
T$HL
|$H S
|$8L
\$PA
L$PI
|$81
\$PI
\$PA
L$PI
|$8L
|$xH
L$xM
A[A]I
T$HH
\$PA
\$PA
\$PA
\$HL
L$xH
t$PA
\$HH
t$PL
T$8L
\$HL
T$8L
[]A\
]A\A]A^A_
H0Z[]
J0Z[]A\A]
AWAVAUATI
L$(H
|$ D
McD$
t$ Ik
(L;L$
'D:e
L$(M
8[]A\A]A^A_
?itII
?itCI
L;T$
t$ L
t$ L
D$ L
D$ L
T$(L
\$ L
\$ L
T$ L
T$ H
D$@H
[]A\
h[]A\A]A^A_
|$(H
T$XL
L$PL
D$HH
L$ H
|$(L
D$HL
L$PL
=>DM
\$HH
|$HH
T$HH
t$@H
|$PH
|$8H
|$8H
\$@I
|$@L
L$HH
|$HL
t$(H
=,AM
Hc?H
0t*H
u005fA
Hcl$ Mck
l$(O
~@f=
t'f= 
[]A\
=M|L
AUATUSH
tMH;=
Z[]A\A]
L9D$
=<5M
=>4M
=J4M
$L94$
t9Mk
u$E1
=]2M
=A2M
[]A\A]
L$ Hc
=PpL
=~.M
AVAUI
ATUH
[]A\A]A^
y E1
|$(L
T$4H
t$ H
T$4L
D$8H
F fA
=c)M
x u]H
T$0L
[]A\A]A^A_
=0%M
=4fL
=GeL
s(AVE1
t$0I
D$(L
D$HL
[]A\
AVAUATUStKH
n4[]A\A]A^
=	wL
L9|$
=kTM
[]A\A]A^A_
T$ H
=RrL
=:rL
='rL
t.E1
d$@M
|$@H
\$8A
,$uOH
AUATA
Z[]A\A]
XutD
XtFL
<OtOH
BtaH
I;T$
D$(L
L$ H
L$ L
T$@L
\$ H
|$ H
=~fL
="eL
]A\A]A^
[]A\A]A^A_
[]A\A]
t$$H
X[]A\A]
=y^L
/wAA
/w"A
|$ H
|$ H
=|VL
=dVL
=BVL
V Ik
D$ L
t$(H
t$(L
t$(H
AWAVAUATI
([]A\A]A^A_
E9N(
HcT$
[]A\A]
N$t7H
L;d$
t$(L
t$(L
l$0u
l$0L
t$(H
|$(H
l$0L
t$(H
t$(H
l$0L
t$(H
t$(H
t$(H
d$(L
d$(1
t$(H
[]A\
|$(H
|$ H
R0E1
C0t`H
S0E1
T$0H
T$(L
L$ H
L$ L
T$ L
T$ M9q(
=JvL
[]A\A]A^A_
E;4$
=ZsL
~&E1
L$ H
=@pL
=RoL
=9nL
l$ E1
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
=Y	L
<$u>H
t	E1
E;<$|)
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
T$01
Z[]A\A]
[]A\A]
[]A\A]
T$(H
D$ H
T$ L
M;~(H
T$ u
\$0D
L$(D
D$ D
L$(D
T$8D
|$ L
AUATUH
X[]A\A]
T$ M
				fA
T$`L
L$XL
D$ L
D$ L
L$XL
				A
AtLs.L
Bu.L
udAWAVAUATI
AP9V$
U$E;e
[]A\A]A^A_
([]A\A]A^A_A
[]A\A]
T$0H
Q0XH
[]A\A]
[]A\
UATH
T$ D
D$,H
=fNL
=6ML
0tCH
[]A\
 t4H
=:GL
I;T$
t$0H
|$ I
L$8L
D$(L
|$ L
D$(H
t$0H
t^AVAUI
ATU1
@tQH
t2[]A\A]A^
AWAVAUATM
[]A\
F0Z[]A
T$ I
={?L
T$ H
L;k 
H;{ t
L;{ t
T$(A
L;C tIM
L;c t%M
H;K t`H
L;[ tXM
L;K 
L;C 
H;C tQH
=Y8L
S([]
L;B 
L;Z 
K0Z[]A
T$ I
I9\$
[]A\A]A^
USQtEH
[]A\A]
=?/L
= /L
T$8H
t$@L
l$8L
A84>
=`<N
=d-L
=<*L
\$ H
T$8PL
|$(AWL
t$@AVH
t$@VH
|$(WH
L$8AQM
T$hARL
D$xAPI
=F!L
D$0M
L$0A
\$0M
|$0A
L$0H
D$0L
D$0H
|$(H
\$0I
t$0A
|$(L
|$ E1
=l|L
t$8H
|$8H
L$(H
|$ H
|$ L
|$(H
3u!L
l$8H
l$81
D$8L
|$8L
D$8A
RAPH
D$xI
|$ H
l$xH
d$XL
|$ H
D$xL
|$xH
T$8H
|$ L
T$XL
T$8L
\$8u_
Y[]1
[]A\A]A^
H+,$H
[]A\A]
Q0E1
\$PH
|$PL
|$HH
|$HL
L$@M
|$@L
T$0H
l$8H
|$81
D$PL
D$HH
D$@L
D$8H
T$8H
|$0A
=V_L
l$ H
|$E1
|&Hk
D$ I
D$ L
|$ su
t$ D
!<]w2H
T$ H
<!t$<:t
.tC@
[t=H
T$`A
D$@H
t.Hc
[]A\
[]A\
ATUI
[]A\
D$HD
L$xH
|$PL
D$XI
d$`L
T$81
l$@A
|$0M
|$`H
xwI9
L9$$
T$(D
T$ D
T$ H
T$(tJE1
L;l$
T$ A
D9d$
T$ H
T$(u
T$ H
T$(u
T$ D
T$(D
T$ D
T$ L
T$ E
T$ H
T$ F
$OfA
T$(D
T$ D
T$ H
L;l$
T$ A
T$ t*D3d$
T$ u
T$ u
T$ H
T$ H
T$ A
H9<$v
A;V8
\$8D
L$(L
T$0L
T$0L
L$ A
L$(D
T$4L
T$0L
L$(L
T$0L
L$(D
\$8D
L$(L
T$0L
T$0L
L$(D
T$4L
T$0L
L$(D
T$4L
T$0L
L$(D
T$4L
L$(L
T$0L
T$0L
\$8A
_t2L
L$(D
\$8D
L$(L
T$0L
T$0L
L$(D
T$4L
\$8D
L$(L
T$0L
L$(A
T$0L
\$8D
L$(L
T$0L
T$0L
L$(D
T$4L
\$8D
L$(L
T$0L
T$0A
L$(A
T$4L
\$8D
L$(L
T$0L
T$0@
L$(@
T$0E1
\$ t
L$ H
T$(L
\$ H
AUATUSH
dH3<%(
([]A\A]
= 0L
W@I+WHH
T$ 1
\$ H
=z-L
=v-L
T$0H
t$(H
T$0H
t$(H
D$  S
D$( S
=!wQ
T$0H
t$(H
|$ H
|$ L
L$(I
|$(L
\$0M
|$0H
[]A\
=xkK
T$(H
t$(H
|$HL
T$0H
L$pH
=!IS
|$0I
|$0E
t$8D
l$@D
=7FS
)D$P
)L$`
)T$p
|$ L
|$ H
|$ H
t$ H
[]A\
_USH
AVAUI
ATUI
P0[H
]A\A]A^
|$0H
L$HH
t$@H
L$HH
T$8H
4$H)
L;l$
T$0E
-KqK
\$ ASL
L$ H
xit-1
l$HK
L$@H
|$HL
L$ xOL
T$HH
L$@N
|$@L
D$ L
l$ H
T$@L)l$
|$0L
|$8H
D$@M
L$@A
|$8L
t$0H
[]A\A]1
[]A\A]
[]A\A]
[]A\
3t,H
T$ I
=.PS
AUATI
[]A\A]
t?E1
=wAS
|$ H
D$h1
L$hdH3
H9L$
|$pL
T$ L)
D$oH
l$oE1
=Z\K
=D\K
=.\K
L+l$
=a[K
=C[K
u SH
=th~W@
>u6L
^u-L
AWAVAUATI
D$H1
t$@H
T$8E1
t$8H
|$@H
t$8H
|$@L
t$HdH34%(
X[]A\A]A^A_
|$@H
L$ H
t$@L
|$8L
T$(H
T$(L
L$ H
H+\$
H+l$
H+,$
[]A\A]A^A_
S8H9
L;C0}AF
t$(H
ATUI
I;,$t+H
[]A\
T$0t%E
T$ H
\$@D
D9|$ H
9L$ 
|$0M
|$<f
Lct$
\$(D
T$0I
D9D$ 
D9d$ 
=`JK
=aJK
 uVH
=@IK
dH3<%(
^[]A\A]A^A_
Y[]A\A]A^A_1
[]A\A]A^
|$ L
dH34%(
[]A\A]A^A_
$...
|$0A
[]A\
=]BK
-.kL
=~.S
=Q.S
-TfL
-+xM
-EQL
5@QL
-CSL
=a:K
=K:K
|$`L
|$(I
< wFI
=)9K
|$ H
=u8K
|$PL
|$PH
D9#r	H
=57K
t$ H
56<Q
=e}K
|$@L
AZA[
|$@L
A^A_
H= S
L$PH
|$PM
T$HL
t$ M
Q0Ph
|$PH
|$PH
=q2K
=[2K
=>2K
=qyK
={1K
=`1K
=J1K
=41K
-{0K
-v0K
=w/K
t$0E1
\$ H
|$ H
S!Ei
[]A\A]A^
=DmK
Z[]A\A]
D$PH
L$Pt[H
T$0H
L$XH
T$XH
L$PI
L$PH
\$HH
=)"K
[]A\
=W K
=/ K
wtV@
\$ u
\$0H
|$0H
l$0H
|$0L
d$0I
|$0L
=ZnK
D$0I
|$0L
T$0H
|$0L
\$ A
t*E1
Hcl$
D$0t?H
t$0L
|$0H
|$0H
d$0I
|$0L
L$0H
|$0L
=1cK
E@I+EHH
=F^K
=l]K
=-]K
tHHc
t$$L
T$HH
M@H+MHH
Ft-1
T$0H
=tYK
=+aK
#uaH
w0Lc
=AVK
H;E t+H
H;M t"H
[]A\
="\K
=OOK
|$`I9
=u0S
=sMK
|$@I)
|$8L
t$@I
t$8I
t$@L)
t$@I
t$8H
=-.S
V0E1
c@L)
|$0H
==DK
T$01
=iCK
=5NK
=b=K
T$01
=4GK
H L9H(
T$0H
53CK
~+E1
=J%K
=K$K
=t	H
=t	H
=A!K
=!!K
=\ K
t$ H
=<{K
=H K
=#yK
C@H+CHH
__init__
T$0H
=k K
44H+t$
|$(L
T$01
D$(H
44H)
T$0H
D$0H
L$,H
Hcl$(H
T$ fE
wBfE
.d$0s.L
T$(D
u"M9
T$HL
T$ E
L$0H
\D$ 
wxfD
?u8H9
T$ H
T$ H
\$(I
|$(H
L;|$
T$LH
\$(H
USAQw
AX[]
AUATI
[]A\A]
AWAVAUATI
4$dH
([]A\A]A^A_
AUATUSQH
Z[]A\A]
AWAVAUATI
[]A\A]A^A_I
[]A\A]A^A_
zTuR
zEfD
="KK
AUATI
Z[]A\A]
T$(H
t$0L
t$(H
|$(H
|$0H
|$8H
|$@H
|$pH
|$HH
[]A\
[]A\
=+FK
[]A\1
[]A\
ATUH
[]A\
=;CK
t$(H
l$(H
|$0H
D$(H
|$ H
L$ H
|$0H
t$ A
L$ I
|$ L
\$0I
|$0H
|$(H
|$(H
5qKI
A0Y[]A\A]
D$`f
=H?K
L$ H
-9EI
t$0H
|$(1
t$0H
|$(L
|$(L
|$0H
|$(H
[]A\
D$(A
[]A\
T$ 1
T$ 1
|$ H
ATUH
[]A\
L$@I
|$@E1
T$@H
|$@E1
|$@H
T$ H9
D$@I
|$@L
U0E1
L;,$
|$@H
=AaK
=whJ
T$(I
|$01
|$ H
|$ L
D$ H
|$ H
|$ L
T$ H
|$ H
T$ I
|$ L
t$ H
|$ L
L$0H
|$PL
t$0L
H= S
L$8I
-"~J
|$HL
D$8L
D$8N
\$(M
l$(H
|$P1
|$PH
|$PE1
|$PE	
=m{J
=m`J
=ixJ
=DxJ
L$0L
T$ L
T$ D
L$0x5I
\$0D
L$ L
L$ L
L$ L
L$ L
\$0A
\$8D
L$0L
T$ D
L$0L
T$ D
L$0L
T$ A
\$8A
L$0L
T$ L
T$ D
L$0xGI
\$xD
L$hH
t$PD
L$HL
T$8L
T$@D
L$HH
L$hD
D$tL
\$8D
L$0L
T$ D
L$0L
T$ D
L$0L
\$8A
L$0A
\$xD
L$hH
t$PD
L$HL
T$8L
T$@A
L$HH
t$PA
L$hD
D$tL
\$ D
L$ E1
\$xD
L$hH
t$PD
L$HL
T$8L
T$@D
L$HH
L$hD
D$tL
L$0L
T$ D
L$0x0I
H+D$ 
\$0D
L$ L
L$ L
L$ L
L$ A
H;t$
L$ L
l$0A
L$ H
T$8I
H;l$
\$ D
\$ L
D$0t
T$8M
\$xD
L$hH
t$PD
L$HL
T$@D
T$8L
L$0L
T$ L
T$ D
L$0x0I
L$ L
L$0L
T$ L
T$ D
H;T$
"E;g8t
t$XL9t$
\$xD
L$hH
t$PD
L$HL
T$8D
L$HH
L$hD
D$tC
\$xL
L$0L
T$ L
T$ D
L$0x
]A\A]A^
t$(H
|$(L
5l8R
598R
=ZDK
Z[]A\A]
[]A\A]
Z[]A\A]
AZ[]A\A]
T$0H
=THJ
H;s0u
Hc{PH
T$ H
L$ H
T$(M
=*UK
D$0L
|$pH
D$0I
T$0H
=2NR
=oKR
T$ RL
L$ L
=&JR
=<IR
t$ V
T$ 1
D$0D
=oGR
=NGR
D$01
T$4RH
L$8QL
L$<L
D$8H
L$4H
L$$D
T$(dH3
5RRR
SxI9
t$ H
t	M9
=KMJ
=3MJ
cxH)SHH)S@H
L;d$0H
C`|J
T$0H
l$0H
t$ L
H)kH
=uKJ
=]KJ
=EKJ
H)kHH
|$PL
l$0A
\$(H
=rFJ
=*+J
~%E1
ATUSu
=~CJ
i4[]A\
|$xH
-G.R
XD$ H
|$pH
\$XH
\$`H
t$hH
t$HH
T$PI
D$8H
d$(I
T$0H
=ydJ
AX[]A\A]
|$ L
[]A\A]A^A_
[]A\
L$(D
T$ L
5TaN
t$8H
|$8L
L$0I
|$0L
t$@H
D$@I
t$8I
l$(M
L$(1
|$(H
D$0H
|$(H
L$(1
|$(H
=x0J
tEE1
|$(L
D$(t
|$(H
L$(1
|$(H
D$(H
L$ H
=JyJ
=>tJ
=q,J
T$0I
|$0L
L$(D
\$'D
\$'L
t$0I
|$0L
T$01
AUATI
=:)J
l$pH
t$ E1
[]A\A]
|$ H
EDDDDDD
=;qJ
AUATI
[]A\A]
u2E1
t$0H
t)E1
=4MR
\5&{
=@hJ
=/gJ
D$,L)
D$ 0
D$$=
^vDH
[]A\A]1
ATUSH
3u+L
 []A\
,	M9
=CcJ
s H9
T$@H
t$0H
T$0I
|$81
T$@A
d$ M
|$ L
|$ H
|$(WH
=eVJ
=NUJ
ATUSH
T$0H
 []A\
uHH9
=>PJ
|$ L
|$HH
t$XH
s0t=
t$(H
t=E1
|$ 1
xRIc
t$(H
x*Ic
t$`H
t$HH
ATUI
[]A\
D$!I
t$ H
D$!I
T$#D
tKH9
=":J
K8tD
t$ L
u{E1
t$ A
Pt5@
t$ H
|$ H
t$ H
|$ H
t$ I
L;|$
L;|$
L;d$
USQH
[]A\
[]A\
USQH
H;,$
=a&J
C  S
C  S
[]A\
L$$I
|$ H
u4I)
|$ H
ATUSH
Z[]A\A]A^A_
t$$L
ATUSH
l$$H;p
H9S@uoH
dH34%(
 []A\
[]A\
AWAVAUATUSH
[]A\A]A^A_
[]A\A]A^A_
=-oJ
=)nJ
t$ dH
D$(1
L$(dH3
ATUSH
 []A\
AVAUATUSH
_0dH
D$81
L$0L
D$(H
L$ H
x|H;D$0t
H;t$0}0L
L$8dH3
@[]A\A]A^
AUATUSH
_0dH
L;,$|
([]A\A]
AWAVAUATUSH
_0dH
<$I9
([]A\A]A^A_
=9	J
R0L9
Z[]A\A]
Q0X[]A\A]
G(HcP
Z[]A\A]A^A_
|$hXH
QAWL
L$PH
L$ L
T$(L
\$0L
D$0x
EDDDDDD
t$ H
\$ H
.l$(
V0E1
2uQ1
={YJ
=qYJ
T$0M
T$PL
_AXH
t$PL
|$0M
|$0H
|$hM
t$ H
\$ H
T$hH
|$0L
[]A\
[]A\
L;|$
L9l$
L9L$
T$(A
T$(L
T$(fA
T$(A
L;|$
T$(L
T$(fA
l$HL
|$@H
?vjM
?vAM
H9T$
I8D9
L9\$
l$HH
D$@L
M;t$H|$
CPM9
H+D$(H
H+D$(H
L;|$ s
T$01
]A\A]A^A_
[]A\
1t~H
[]A\
AVAUI
ATUS
=HuI
[]A\A]A^
[]A\
[]A\
[]A\
ATUSH
[]A\
Z[]A\A]
-48H
5/8H
-o6H
5j6H
Y[]A\A]
|$@L
u@M9
|$HL
\$(VAQSH
|$XWL
L$@H
|$XH
|$HL
|$@H
l$PH
V0PhXP_
L$ L
D$8H
L$0H
T$(H
t*E1
D$0H
\$(I
|$0L
|$(L
=ysJ
-&~Q
=9}Q
=P|Q
^[]1
AWAVAUATUSH
[]A\A]A^A_
l$(I
|$(1
|$(H
|$(L
=soI
=VoI
[]A\
[]A\
=n@J
[]A\A]A^
[]A\A]A^A_
[]A\A]A^
[]A\A]A^
s H)
t$ I
Y[]A\A]A^A_
=;YQ
ATUI
=>WI
[]A\
[]A\
Ztl1
[]A\A]A^A_
Zt:L
0uRI
=".Q
=e+Q
=2+Q
=i+Q
=Q*Q
t_Hc}
T$0H
T$01
5p'Q
d$@D
\$@D
t$`H
|$`H
t$`H
T$`I
|$@D
t$XH
t$PH
t$`H
L$DD
D$@I
t$PH
t$XH
t$@D
|$DL
t$XH
T$DI
t$`H
t$`H
=2=I
t$`H
|$`K
t$`H
\$@D
d$DL
t$XH
t$`H
\$@D
t$DD
|$`L
t$`H
|$`J
t$`H
T$`K
t$XH
t$`H
D$`K
=|}I
t9PUL
L$PD
D$TH
t$hH
t$`H
|$`H
=d{I
=9{I
t$`H
|$`J
L$DI
|$XH
L$PD
D$TH
t$ H
t$`H
\$`H
={yI
=AyI
="yI
D$`H
t$PH
t$XH
t$`H
\$@D
l$DL
t$`L
|$XL
L$DI
t$XH
|$PL
=^vI
t$`H
T$`O
d$@D
=ptI
=UtI
=&tI
=ksI
=UsI
d$@D
D$(H
t$`H
T$`M
= rI
=zqI
t$`H
|$`J
=*)I
=UpI
=9pI
=	pI
=VoI
=6oI
=onI
=SnI
=(nI
t$8H
t$@H
t$@H
|$8H
=nlI
=TlI
=,lI
\$(D
l$,L
t$8H
t$@H
T$,I
t$@D
=miI
=hhI
L;<$}DI
t$@H
D$@N
T$,I
=zfI
=>fI
t$@H
t$8H
=*eI
t$0H
=HdI
=,dI
t$8H
t$8H
=8cI
t$@H
D$@M
=9bI
L$@M
T$,I
|$8L
t$@H
D$@I
T$,I
|$8L
L$,I
t$8H
|$0L
=u`I
t$0H
t$8H
=d_I
t$8H
t$@H
T$,I
t$@H
t$@H
L$,I
T$@H
t$8H
t$@H
t$,H
t$@H
L$@I
t$@H
t$@L
=2\I
=Y[I
L$@M
t$@H
T$@I
T$,I
|$8L
D$@M
=	XI
=`WI
AWAVAUATI
=OVI
tpL9
([]A\A]A^A_
=0UI
T$0H
T$01
ATUSu
[]A\
[]A\H
th~R
D$ ]A\
L9C0
U0E1
T$0H
L9C0
D:/u
Y[]A\A]A^A_
=48I
=t4I
T$ H
=2>I
[]A\A]A^A_
ATUI
[]A\
AUATI
R0ZH
[]A\A]
[]A\A]
[]A\
|$ H
|$ H
=P0I
|$ H
|$ H
 []A
t9$H
|$ H
|$ H
|$ H
t	ZH
[]A\
H9D$
H9D$
ATUI
=.{I
=-xI
t$`H
t$py	
t$`H
D$pH
|$ H
|$(H
|$0H
|$0L
D$`H
D$`H
|$ H
$H;Y
H;\$
E(H)
AUATH
Y[]A\A]
H;o H
Z[]A\A]
AWAV1
AUAT1
<&L)
[]A\A]A^A_
AWAV1
AUAT1
<&L)
[]A\A]A^A_
ATUSH
[]A\
L$(H
Y[]A\A]A^A_
_(E1
+u H
;uVH
L$xdH3
[]A\A]A^A_
L$xdH3
[]A\A]A^
O([]A\A]A^H
|$(H
|$(I
[]A\A]A^A_
=`[I
D$(dH3
8[]A\A]A^A_
H= S
ATUH
[]A\
AVAUI
V0[D
]A\A]A^
=UMI
=,MI
d$@f
)\$ fD
(d$ 
d$@f
)\$ fD
(d$ 
t$0H
l$(f
|$8f
Yt$ 
)\$ 
L$`f
(l$ 
zWuUfH
t$`H
YT$hfH
D$81
)D$ H
D$8dH3
=$qH
dH34%(
t$ H
H+t$ 1
t$ Hk
L$0H
D$0D
|$(L
T$8H
D$0L
|$HH+B
D$@PH
L$8Q
\$PSH
t$PVH
|$8WH
l$HUL
D$xAPM
|$@M
D$0H
L$0D
t$0A
|$ L
|$(L
|$ H
T$0H
|$0L
L$ M
|$ L
t$ H
|$ M)
|$ H
|$ L
|$ L
|$8L
|$(M
L$(E
T$8M
|$8L
|$8H
|$PM9
T$0L
D$(1
t$(H
|$0I)
D$(I
t$(D
D$@H
L$HH
t$@M
L$HI
|$HM
T$0H
D$(H
|$0I
t$(H
L$(H
|$(B
L$(I
ATUSL
[]A\
D$XH
|$XL
A Santa lives evil at NASA
\$@M
|$@L
|$8H
|$8H
L+L$
L$pD
\$XL
T$ L
T$PM+S
T$`PH
T$XR
t$pVL
D$pAPH
D$hPL
L$`AQM
D$PH
|$hH
|$8L
|$@L
L+L$
L$pI
T$ H
t$0L
|$ H
|$ H
|$ H
=g]H
D$(L;P
$@vb
|$ H
|$@D
=	WH
L8$L
D$ I
|$ L
4?H9
|$ H
t9$H
,?H9
\$ H
|$ L
T$0H
xFLct$
T7$M
D$ H
[]A\A]
=@'I
T$0H
|$ H
L$(L
J0Z[]
H= e
H= e
t$ L
T$ O
t$ H
[]A\
L$xAQH
t$ A
=g6H
=E6H
t$(APH
L$lAQL
D$ H
D$0H
d$xATH
t$ C
AUATI
L$8L
D$@L
L$Ht7
)D$P
)L$`
)T$p
T$ H
[]A\A]
H+C@H)
s@I)
=7/H
[]A\A]A^
L$ L
z&u$H
z&u$H
z{uy
D$(1
t$(dH34%(
YtqL
AVAU
ATU@
APAVAUL
|$ Hc
dH34%(
[]A\A]A^
=O$H
D$ 1
L$ L
=0"H
AUAT1
Z[]A\A]
D+D$
ARASfA
PWVR
=3cH
[]A\A]
D$(1
=r"N
tO)D$
D$ H
L$$H
T$(H
t$,H
_AXy
=>dH
t$(dH34%(
ATUS
[]A\
[]A\A]
|$0L
|$(L
t$0H
l$0H
uDE1
[]A\
USQH
ATUI
[]A\
ATUH
[]A\
[]A\A]A^A_
$uDH
[]A\
[]A\
$M;{8u*I
>t6L
L9t$
Q0E1
L$@I
[]A\
ATUH
[]A\
[]A\H
x1Y[]A\A]
Z[]A\A]
Y[]Hc
Hc{([
L;r0u
=+DH
=jCH
[]A\
D$ 1
ATUH
P([]A\
AWAVAUATUSH
=fAH
V0E1
[]A\A]A^A_
tQAXH
 u^H
[]A\A]A^A_H
AWAVI
AUATE1
L9l$
[]A\A]A^A_
ATUI
[]A\
ATUI
[]A\
ATUI
[]A\
AUATI
USVH
\$ H
[]A\A]
D $.H
Z[]A\A]
[]A\
H;U(
Hc=o
|$(H
u&E1
=v2H
C []A\
R0E1
P0E1
[]A\
ATUS
[]A\
8	u	
D$h1
=k)H
L$hdH3
Hc{0[
=p%H
=J0H
="0H
ATUSH
[]A\
AWAVE
AUATI
AYAZH
V0ZL
[]A\A]A^A_
=i~H
[]A\
[]A\
=.|H
AUATUSH
[]A\A]
\$hI
,$H9
/wWA
\$hI
/wnD
/w@A
D$Ax
|$@1
|$(H
D$@0
D$Ax
\$`A
D$pA
\$`H
L$`M
|$`M
D$hI
t$hL
T$hM
/w6A
T$`M
D$hL
D$hI
/wPA
t$`A
T$hI
\$`A
\$`I
/wED
ATUI
|$ t
\$ t
[]A\
AVAUATUI
C@E1
]A\A]A^
L$(M
|$(H
Z[]A\A]
=alH
C  S
=SjH
[]A\H
=7jH
AWAVI
AUAT
D$h1
T$hdH3
x[]A\A]A^A_
?w/A
AWAVI
AUATUSH
D$x1
D$,t
$D3T$
\$,D
D3T$
p $A
D34$D1
\$ A
l$$A!
|$(D
T$(D!
>QZ^&1
|$$1
|$ 1
L$ A
|$$1
Y[eA1
l$(A
|$$A
4$E1
D$xdH3
[]A\A]A^A_
AWAVI
AUAT
D$h1
T$hdH3
x[]A\A]A^A_
AVAUL
v,ATUH
[]A\A]A^
T$4D
l$8H
D$ D
AWAVAUATI
G(Hc{p
4<A)
CpuSH
kpX[]A\A]A^A_
D$h1
L$hdH3
d$XD
l$\L
<3A)
D$h1
L$hdH3
D$h1
|6*)
g&3gI
L$hdH3
AUATA
GTHc
X[]A\A]
D$h1
L$hdH3
P0E1
U0L;t$
=DNH
su*L
]w}H
CH S
C@ S
C8 S
C  S
dH34%(
AUATI
P0ZH
[]A\A]
D$81
L$(H
|$(H
t$8dH34%(
|$(H
AVAUH
ATUE1
D$p1
D$@H
T$XRh 
L$HQH
\$<SH
t$`V
l$pUL
APh 
AQh 
ARh 
|$@H
|$8H
t$HSUAUAVL
L$hdH3
p[]A\A]A^
AUATI
USQL
Z[]A\A]
T$01
T$8H
T$@H
P0H9
V0H9
P0H9
Q0H9
|$(1
[]A\
[]A\
[]A\
[]A\
[]A\
H= S
|$(H
|$01
[]A\
[]A\
[]A\
[]A\
[]A\
[]A\
[]A\
[]A\
[]A\
=o7H
AWAVH
AUAT
D$(1
|$ H
|$ E1
|$ H
|$ L
|$ D
T$ H
|$ H
L$(dH3
8[]A\A]A^A_
=U3H
ATUH
dH34%(
 []A\
D$81
T$8dH3
=d/H
l$HH
s0fD
XD$0E1
\$(M
H9,$
l$(H
=D-H
t$8fE
D$81
L$(L
L$8dH3
4$fD
zYuW
z*u(
4$fD
 t3H
={~G
=	}G
*H;k |
=uzG
=GzG
=$zG
=]yG
=}xG
T$01
=duG
=UtG
&H;] }
l$`H
\$(1
[]A\
Z[]A\A]
D$01
L$(Q
\$8Sh
|$ L
t H= S
H= S
H= S
t@H9
\$(dH3
H= S
USARt
u	AY[]
AX[]
Hct$
ATUSu	[]A\
[]A\
[]A\
[]A\
[]A\
R[]A\
t	ZH
=4`G
=E_G
D$ 1
T$$L
t$XL
L$XL
D$PH
L$HH
T$@H
t$8H
dH34%(
dH34%(
dH34%(
=SUG
ATUSH
<,/u	M
[]A\
D$(1
T$(dH3
ATUH
p$Hc
[]A\
ATUI
=	TM
[]A\
dH34%(
L$ H
L$ H
L$(L
T$ H
t$ H
L$(L
=%FG
T$ H
x!QH
AWAVAUATUSH
L;cH}gI
[]A\A]A^A_
H;s0t#Hc{PH
=7@G
Z[]A\A]A^A_
T$01
AVAUI
ATUSH
[]A\A]A^
whu"H
[]A\
EPZ[]
=k{G
=f%O
ATUH
 []A\
ATUH
=1}G
=!$O
 []A\
D$(1
L$(dH3
T$(H
|$(H
T$ 1
\$0H
|$ H
t$`H
=B!O
\$(I
D$pH
T$`H
=6uG
L$(H
D$H1
T$HdH3
dH34%(
dH34%(
Hct$
8HcT$
=Z(G
=;(G
L$xdH3
t$ y
=9'G
HcL$
L$xdH3
=:nG
=GOO
=3%G
ATUI
[]A\
[]A\A]A^A_
t$@H
D$HH
G(M9
AUAT
$~0H
[]A\A]
AUAT
$~4H
Lu"H
[]A\A]
L$(dH3
8[]A\A]A^A_
t$HdH34%(
X[]A\A]A^A_
H;\$
t$ H
=0`G
|$01
AWAV
AUATI
D$(1
t$ L
H;l$
L$ H
T$ D
L$(dH3
8[]A\A]A^A_
AWAVI
AUATUS
 t	H
([]A\A]A^A_
L$hdH3
x[]A\A]A^A_
\$(H
t$ H
AWAVH)
AUATL
H;\$
[]A\A]A^A_
AWAV
AUATUSH
D$H1
L$(QL
L$8L
D$HH
L$@H
t$0H9t$
l$ H
l$ H
l$(H
H9|$ ~gL
l$8L
D$@H
|$ M
E8T$
L$HdH3
X[]A\A]A^A_
T$HdH3
X[]A\A]A^A_
|$0L
d$8I
l$(H
t$@J
L$(dH3
8[]A\A]A^A_
dH3<%(
[]A\
l$(H
\$(I
AWAV
AUATI
D$(1
t$ L
H;l$
L$ H
T$ D
L$(dH3
8[]A\A]A^A_
ATUI
[]A\
ATUSH
=_SG
[]A\
=fRG
ATUI
[]A\
AVAUA
ATUI
[]A\A]A^
k []A\A]A^
AVAUATUS
[]A\A]A^
HczH
H8H9H(H
~ H)
H8H9H(H
t$HMc
I+D$@H
\$HH
[]A\A]
=X+O
=vHG
=FHG
ATUSH
[]A\
AUATI
P0ZH
[]A\A]
AVAUI
ATUI
Q0[L
]A\A]A^
[]A\A]
UUUUUU
UUUUUU
=]>G
=O=G
T$XL
D$PM
|$HH
|$8L
T$XH
t$PH
T$0H
t$xdH34%(
[]A\A]A^A_
T$XL
D$PM
|$ L9|$
|$81
|$pH
|$8A
Q0L;t$
=[EG
T$XH
|$HH
T$XH
|$HH
T$XH
=XDG
dH34%(
= @G
T$0H
t$ L
T$@H
AUATA
[]A\A]
[]A\A]
H= S
tvVPL
L$0L
L$$H
T$@H
t$PH
Ox~hUSH
AUATI
$tUL
Z[]A\A]
|$(H
|$0H
|$ H
|$8H
|$@H
|$p1
[]A\
[]A\
([]A\A]
|$(H
|$0H
|$@H
|$PH
|$8H
|$XH
[]A\
[]A\
O`H;l
ATUH
[]A\
ATUH
[]A\
[]A\
C Y[]
ATUSH
D$81
T$8dH3
@[]A\
AUATI
Z[]A\A]
ATUH
8[]B
t$(H
T$0H
L$8L
D$@L
L$Ht7
)D$P
)L$`
)T$p
T$ H
AVAUATUS1
[]A\A]A^
D$(1
T$(dH3
dH3<%(
dH3<%(
ATU1
[]A\
D$ 1
ZYtf
AUATI
|$PI
\$PH
|$0I
\$0H
=VgG
[]A\A]
=s	G
=P	G
=xfG
OHdH
dH34%(
T$0H
L$8L
D$@L
L$Ht7
)D$P
)L$`
)T$p
T$ H
tLL9
[]A\
	Hc{
AUATUSQ
Q0ZL
[]A\A]
[]A\H
[]A\
ATUI
|$@H
 []A\
D$ 1
L$ L
dH34%(
AWAV
AUATUSH
D$81
L$(L
D$8H
L$0H
t$ H9t$
t$(L
|$0E1
4H+\$
L$8dH3
H[]A\A]A^A_
Lc\$
<	u"H
	u:Lc\$
C  S
=,FG
{@H)
AVAUI
ATUH
D$h1
L$hdH3
p[]A\A]A^
D$h1
L$hdH3
D$h1
L$hdH3
AUATE1
D$(1
L$(dH3
8[]A\A]
D$(1
L$ 1
=3?G
\$(dH3
=~>G
=(>G
=a=G
=Q=G
+Z[]
=$=G
=N<G
tjAUATI
Z[]A\A]
=B:G
Hc=z
ATUH
D$(1
fHc|$
L$(dH3
0[]A\
AWAVH
AUATI
=.5G
[]A\A]A^A_
ATUSH
[]A\
t$`H
D$x1
T$xdH3
AUATI
D$h1
L$hdH3
x[]A\A]
AUATI
H= S
S0ZH
[]A\A]
H= S
AUATI
|$XI
l$XH
Z[]A\A]
ATUSu
=)'G
[]A\
AUATI
=G%G
Z[]A\A]
AWAVAUATI
Z[]A\A]A^A_
AVAUI
ATUH
=h#G
[]A\A]A^
tEUSH
F0Z[]A
D$(1
T$ H
=%|F
T$ 1
L$(dH3
ATUI
[]A\
ATUI
[]A\
ATUH
[]A\
ATUI
[]A\
AVAUI
ATUI
D$(1
u4HcS
L$(dH3
0[]A\A]A^
AUATI
D$(1
~!Mk
L$(dH3
8[]A\A]
AQE1
D$(1
L$(dH3
D$(1
L$(dH3
USE1
D$(1
\$(dH3
H;==~L
AUATUSQ
-b}L
E u-
Z[]A\A]
ATU1
[]A\
ATUI
[]A\
AVAUH
ATUE1
D$P1
D$ H
L$0H
L$HdH3
P[]A\A]A^
AUATI
P0ZH
[]A\A]
AWAVAUATI
L$pu
D$ H
VjFM
T$ A
D$(L
_AXH
D$ D
\$(D
T$ H
PAWH
L$ M
\$8D
T$0I
8[]A\A]A^A_
ATUE1
~"D;c
t%D;%
]A\1
[]A\
ATUI
IS8H
[]A\
D$ f
L$(f
D$H1
L$ f
)L$0H
D$HdH3
D$ f
L$(f
D$H1
L$ f
)L$0H
D$HdH3
AULc
ATUSH
X[]A\A]
=r	G
St!H
AWAVA
AUAT
D;t$
[]A\A]A^A_
ATUH
[]A\
[]A\
t*SH
=QAL
=t@L
==NL
=1NL
s0Z[]
AUATI
([]A\A]
AUATI
P0ZH
[]A\A]
AUATI
P0ZH
[]A\A]
AUATUI
[]A\A]A^
AUATI
Z[]A\A]
ATUI
=h8L
AZ[]
SAPH
AWAVA
AUATUSH
P0E1
P$IcU<L
WAWL
AXAY
U<D9
[]A\A]A^A_
AUATUSH
 t*H
L9d$p}
|$`L
Hc|$$1
T$$9
D$01
|$`L
D$$H
|$0A
[]A\A]
USVtAH
H9Q @
x	YHc
=_jN
=L@F
=5iN
ATU1
AWAVH
AUATI
{ L9x(t
[]A\A]A^A_
E`+C`ueH
}HY[]
St?H
H= X
ATUE1
[]A\
=]cN
=19F
5	bN
}(Lc\$
<	u'E
	u1Lc\$
AUATUSQu
[]A\A]
ATUSt
[]A\
ATUH
[]A\
Z[]H
AVAUA
ATUI
D9/u
=N]N
[]A\A]A^
AWAVI
AUATI
D$(1
L$ L
D$$H
T$$1
D$(dH3
8[]A\A]A^A_
AVAUI
I dH
[]A\A]A^
AWAVA
AUATI
([]A\A]A^A_
ATUA
[]A\
AUATA
Z[]A\A]
AWAVAUATI
=9XN
C H;
([]A\A]A^A_
E;<$
HcT$
~gMk
P H;
=1VN
s tlH
D9l$
[]A\A]A^A_
AWAVAUATA
E;l$
=2UN
$D9<$L
~gIk
=mTN
t>D:E
[]A\A]A^A_
AWAVAUATUSH
=fRN
t$ I
D$0L
T$ E;
Lcd$ 
A9_$
A9_ A
IcE$H
Hct$$E1
t$@D
|$HE
|$(M
L$8E;]
|$8E
\$LD;#
Lc|$HL
t$@1
\$(M
d$8}#Ik
Mc]$L
D$$D;|$$
I9L1
=GLN
~bE1
uOE;l$
}.Ic
T3 A
=XKN
D$$1
[]A\A]A^A_
D$(L
AWAVA
AUATUSH
5A%L
=+FN
=iEN
=JEN
t$ L
=xDN
L$ 1
[]A\A]A^A_
L$ L
AWAVAUATI
=HhF
XtkD
u8Hc
[]A\A]A^A_
ATUSH
[]A\
twH)
ATUS
5dcF
[]A\
=_bF
AWAVAUATA
=!9N
[]A\A]A^A_
=k7N
wyUS
H(A;H,w&
[0E)
ATUH
k E1
[]A\
r E9
AUATI
dH34%(
([]A\A]
C(A;C,
D9g$
d$0A)
H+5/
ATUSH
[]A\
H0Z[]A
=YHF
ATUSH
G H9
[]A\
D$(1
L$(dH3
T$ H
T$ H
ATUH
[]A\
t%SH
AWAVAUATUSH
([]A\A]A^A_
tOH9
S$tfL;m
([]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
[]A\A]A^A_
AWAVAUATUSH
t$H=@
~cM;n
tXM;n 
tHM;n(
t8M;n0
t(M;n8
H;qX
dH34%(
[]A\A]A^A_
t	H;
t	H9
t	L9
rhH;N
JhM;Y 
zhH;W8u
ApI;8
zhH;
C`I;H
{`H;Wp
S`L;
s`L;Fx
I;x 
IpM;Y
L;I0
L;Q8
S`M;
JhH;y(
s`L;
S`L;RH
ZhM;C0
S`L;
S`L;R
RhL;J
s`H;
K`H;y
S`M;J 
IpH;y
BhI;H
s`H;
s`H;~(
s`H;NP
K`M;A0
{`H;W8
S`M;JX
C`I;H@
AUATI
[]A\A]
u1H= 
AWAVAUATUSH
UUUUUUU
[]A\A]A^A_
D$(L
L$ H
L$ L
G8M9
ATUH
[]A\
AUATH
@t?H
[]A\A]
AWAVAUATI
tIL9
L9s tCI
L9s(t3I
L9s0t#A
[]A\A]A^A_
~`H;G
tPH;G 
t@H;G(
t0H;G0
AWAVAUATI
Mc\$
IcL$
McL$
@ Ic|$
[]A\A]A^A_
AWAVI
AUATUSH
4 I9
L;k 
H9s 
,/H9
[]A\A]A^A_
H;s }
ATUSH
[]A\
t$XH
T$`H
L$hL
D$pL
L$xt@
D$H1
T$PH
t$0H
|$8L
t$0H
T$HdH3
t$0H
D$(1
T$(dH3
AWAVAUATA
([]A\A]A^A_
l$HH
Ic0H
<$A9
/w;A
/v'L
AUATI
[]A\A]
Z[]A\A]
[]A\A]
AVAUATUSH
dH3<%(
[]A\A]A^
uyL9
x)E1
~ZH;r
tNH;r tvH
tBH;r(tZH
t6H;r0t~H
t*H;r8tb
AUATUSH
X[]A\A]
ATUH
t$(H
T$0H
L$8L
D$@L
L$Ht7
)D$P
)L$`
)T$p
T$ H
dH3<%(
[]A\
AWAVAUATUSH
Hc\$
Lk,$0I
Hk4$0L
l$PH
l$XH
l$PM
L$(I
|$ L
|$( 
t$0M
L$8M
Lk$$0M
l$0L
d$PL
l$8L
l$0I9
|$ M
t$0L
|$8I
t$8L
\$@M
@t[L
L$HH
tqH= 
tYM9
T$XI
d$XL
d$0L
T$0M9
|$PE1
D$PH
|$pI9
|$xH
|$pu
|$pH
T$pM
L$ L
d$PL
$$H9,$
e8L9
L$PL;
$u1L
T$0M9
D$0I9
D$0L
|$0M9
\$0H
\$8H
D$ H
[]A\A]A^A_
L$pL
T$xI
t$xH
t$pH
\$xM
T$xM
T$pI
L$xM
D$xI
Lk<$0M
Hk4$01
t$@M
t$HH
@t3L
@t3H
@t3L
@t3H
|$pM9
L$ L
t$(I
|$ H
AUATI
[]A\A]
AVAUI
[]A\A]A^
AWAVI
AUATI
O(H9
D90I
D9HI
[]A\A]A^A_
O(L9
5liK
=LiK
ATU1
t3Ic
[]A\A]A^
=T2M
D$(1
D$(dH3
ATUH
[]A\
ATU1
[]A\
AWAVAUATE
=	dK
[]A\A]A^A_
AUATUSQ
t!ZH
[]A\A]
USQH
AVAU1
ATUA
=WTK
Hc=u
=9BF
Hc=ifK
Hc=EfK
Hc=I
Hc=y
Hc=I
Hc=M
Hc=)
5,eK
[]A\A]A^
AWAVI
AUATI
Ch S
Cp S
<$t^H
[]A\A]A^A_
@h S
@p S
5vYE
@h S
@p S
L$8L
D$@L
L$Ht7
)D$P
)L$`
)T$p
L$ H
unknown
AWAVE
AUATA
G(thD
G0tHI
[]A\A]A^A_
AWAVAUATUSH
([]A\A]A^A_
Y(E;Y,w&E
E9{$A
AWAVAUATUS1
/t	E
[]A\A]A^A_
>/ATI
[]A\
;t6H
AWAVAUATUSH
|$(H
D$(H
T$0L
D$|E
T$@H
T$01
\$XL
t$PI
H9\$8
L9t$8
L9t$8w
H;l$X
L$PL
T$XI
T$HI9
d$ I
|$ L
u?M9
L9t$
d$ Lc
l$HM
t$HH)t$P
|$(I
L$|E
T$@H
|$@H
D$(H
t$0L
|$`M
dH3<%(
[]A\A]A^A_
L9t$8
D$ H
L9l$8
T$ H9T$8
L9|$8
T$0L
\$HH
|$@I
t$01
T$0I
|$0L
L$01
l$0L
L9|$
l$01
|$ M
\$@H
t$0H
D$@L
l$(H
L$0H
AVAUI
 t=L
[]A\A]A^
=b^M
ATUSH
n$@8o$t
[]A\
F$D)
ATUI
[]A\
AWAVAUATUSH
[]A\A]A^A_
T$ 1
T$ H
T$(H
;tVM
=~6K
AUATA
Y[]A\A]
x;H;w
AUATUSH
[]A\A]
=y)K
AUATA
=V2K
=<2K
X[]A\A]
AUAT
5wlE
X[]A\A]
AUATI
=."K
[]A\A]
AWAVI
AUATI
D$0L
t$0H
H= S
H= S
l$8L
T$8I
[]A\A]A^A_
l$8H
l$8H
H= S
D$  S
H= S
D$  S
D$ H
L$(L
\$ H
t$ L
H= S
D$  S
H9T$ 
|$ L
H= S
H+D$
l$8L
d$8I
.t.I
AWAVAUATUSH
D$(1
D$ L
|$ H
L$(dH3
8[]A\A]A^A_
|$ WL
p$[]A
AWAVAUATUSH
[]A\A]A^A_
AUATUSH
[]A\A]
AVAUATUH
T$`H
L$hL
D$pL
L$xt@
D$H1
T$P1
T$ H
t$ H
L$0H
\$8H
t$0H
-<QE
t$HdH34%(
[]A\A]A^
t$0H
D$01
L$(Q
L$8L
L$(dH3
D$@L
L$Ht7
)D$P
)L$`
)T$p
dH34%(
D$ E1
AWAVAUATI
t$ H
T$xL
L$4H
t$D1
T$xD
l$@L
T$xL
9l$@
dH34%(
[]A\A]A^A_
L$0E
T$0E
l$@H
|$ L
D;l$
D9l$@
l$0E
T$4H
\$xH
D;l$
T$xL
L$DH
T$(L
Y^ugH
|$4H
D$8H
L$(A
|$ H
ARPE
~II9I
t9I9I 
t)I9I(
I9I0
\$HH
T$PI
/wjE
u	fA
K$tOI
t8H9
T$HI
/w5E
/wWE
/wVA
=4.E
AWAVI
AUATM
D$X1
B<8H
l$@AS
t$@1
t$XdH34%(
h[]A\A]A^A_
~]M;A
tMM;A 
t=M;A(
t-M;A0
M;A8
l$@1
#tLI
T$PH
t$HH
C$tOI
t.M9
t	M9
/w6D
/wRD
/whD
u	fA
u{fA
/wTE
[]A\
AWAVE
AUATI
([]A\A]A^A_
AUATUSH
[]A\A]
D$@H
T$0H
L$8L
D$@L
L$Ht7
)D$P
)L$`
)T$p
T$ H
AWAVAUATI
D$H1
T$8E
D$0L
%t}E
%t]E
%t=E
t$0I
u_E1
|$HdH3<%(
X[]A\A]A^A_
cuBA
L$0A
L$0I
|$0A
|$0H
T$0A
T$0I
T$8H
/wKE
/w-A
ATUI
$t#H
[]A\
AUATI
[]A\A]
[]A\A]A
AUATUSH
[]A\A]
^[]A\A]
[]A\A]
AUATI
|$(I
l$8H9
[]A\A]
D$8L9
[]A\A]
ATUH
[]A\
ATUI
@t@H
[]A\
tiE1
K t`H
[]A\
AWAVI
AUATI
|$8dH
D$ L
L$@H
L9\$ 
T$`L
=aXE
[]A\A]A^A_
4$L;t$
t$(H
|$0L
H= S
L$8H
H= S
$L;D$
L$8H
H= S
T$@L
T$`L
L$xA
__init__H
T$`A
t$HL
T$_L
T$HL
AUATUSQL
Z[]A\A]
AY[]
AX[]
AUATUSQH
[]A\A]
AVAUI
ATUH
[]A\A]A^
AUATUSH
[]A\A]
H;o tAH
H;o(t5H
H;o0t)H
H;o8t
tvL9
teL9
tTL9
tCH9
t.H9
AWAVI
AUATUSH
D$X1
L$XdH3
h[]A\A]A^A_
|$`WH
l$HM
L$PI
|$PI
D$HM
|$@I
D$@I
L9t$
L9d$ 
D$0H
|$ H9|$
\$(L;l$ 
\$(Lcl$
|$PH
t$8E1
L;t$8}oM
|$@H
|$@H
\$HH
|$HH
L9\$
AWAVAUATUSH
u$H9
[]A\A]A^A_
I9O(L
AWAVI
AUATI
HHcF
_`H-
L$0H
r0I;w0
H;5J^L
5:^L
t#L9
M9Y 
M;Y(
M;Y0
t`E1
H;\$
8E;g
[]A\A]A^A_
L9T$
_hH-
l$0L
H= S
8E;g
_pH-
4$H;p(
DD$$
H;\$0
H;\$(
$0\V
ATUS
[]A\
ATUH
u	H9
[]A\
D4 I
L4(I
ATUS
AWAVAUATUSH
[]A\A]A^A_
Y(E;Y,w-A
A9X$A
AVAU1
ATUA
=a!E
=)!E
[]A\A]A^
ATUI
=-BL
-$BL
[]A\
ATUSH
[]A\
-stJ
AWAVAUATUSH
[]A\A]A^A_
AWAVAUATUSH
t$(H
T$0H
L$8L
D$@L
L$Ht7
)D$P
)L$`
)T$p
|$ D
56oJ
-^}J
;5yRE
-5}J
dH3<%(
[]A\A]A^A_
AVAUI
ATUA
=N0L
-)0L
t=L;c
[]A\A]A^
ATUI
@t?H
[]A\
=7tJ
AWAVAUATUSH
D$(1
S*tkE
{+tJE
S,t*A
B(D;B,wSD
|$(dH3<%(
8[]A\A]A^A_
A9X$A
[0E)
=.bJ
T$ H
T$ H
H= S
L9t$
-9bD
L9t$
t$$I
|$%I
|$ H
\$ H
AWAVI
AUAT
T$h1
t$hH
t$hH
[]A\A]A^A_
=%$L
t$PL
T$@L
|$XI
\$HH
L9L$0f
L$8f
9\$(
T$@H
|$HH
|$*1
D$0APL
L$@D
D$<H
t$PL
t$hH
ATUSH
D$@tQH
[]A\
T$0H
L$8L
D$@L
L$Ht7
)D$P
)L$`
)T$p
T$ 1
[]A\
AWAVI
AUAT
L$ H
T$4A
|$XE
)t\~}A
et*I
|$XE
|$(L
D$ L
|$hE
H9,$A
|$`M
dH34%(
[]A\A]A^A_
~jf.
H9,$L
H9,$A
l$XM
t$`1
H9H tEH
H9H(t5H
H9H0t%A
S$tPI
L$@H
T$HL
H9D$ H
L$@L
\$ L
L$@H
T$8H
L$@H
\$8H
T$ L
T$@H
L$@H
l$`L
L$DL
T$xL
|$xH
D$`I
|$hH
L$DL
\$hL
L9,$
L9,$A
L$(A
L$@H
T$8H
L$ ueH
T$xL
t$ L
T$@y2H
|$xH
L$@L
L$ L
T$8M
L$(H
t$`1
P$E1
/wME
/vSI
T$xH
t$pH
T$xH
t$pH
D$ H
T$xL
t$`L
|$81
\$ H
D$8H
T$ I
l$@H
L$8I
|$ I
L$PI
|$8H
L$PH
t$8H
T$8H
T$@D
L$ E
S$E1
L$ H
t$8H
L$81
T$xH
T$xH
|$ E1
t$ tM1
|$ H
L$ H
t$ H
|$ H
AWAVAUATUSH
H= e
[]A\A]A^A_
AUATI
H= e
=g;J
[]A\A]
utXH
[]A\A]
5,9J
-e(J
dH3<%(
H;W 
H;W(
H;W0
H;W8
tHH9
t7L9
t&L9
=\sD
USARH
AY[]
AWAVAUATI
=yRL
=5RL
[]A\A]A^A_
d$8L
D$81
T$8dH3
ATUSH
O L9
[]A\
ATUI
\$0H
[]A\
t$ dH
D$81
L$(H
|$(H
\$8dH3
AWAVAUATUSH
H;C 
k H)
D$XH
dH34%(
[]A\A]A^A_
S(H;B
|$XH
D$XI
D$XI
D$XI
D$XI
D$XI
D$XI
T$XI
=)(J
r H9p(
T$HtKPL
D$HAPARL
T$XAWATAUAV
t$@L
L$XL
T$@L
D$ H
l$XD
|$XH
-6%J
|$XH
|$XH
l$XD
T$XH
l$XD
D9|$
L;C 
|$`H
|$`1
|$XH
%' J
H;{ 
|$`H
|$`1
L;S 
|$`H
|$`1
|$XH
|$XI
l$XD
q H9p(
AVAUI
ATUSH
ZYtt
 []A\A]A^
B H)
AWAVAUATI
D$81
\$8dH3
H[]A\A]A^A_
AVAUA
ATUI
\$0H
t$8H
]A\A]A^
AVAUAT
d$`L
t$hH
L$pM
L$pM
D$pM
|$pJ
|$pK
L$pI
D$pI
T$pJ
L$pN
d$pI
([]A\A]A^A_
AVAUI
]A\A]A^
AWAVAUATUS
~$dH
L$pL
D$XM
T$PM
d$8L
\$`L
d$hH
l$8L
\$`A
\$ L
\$ I
H;\$`
\$8L
|$8E
\$8M
T$8E
|$H4
D$HE
l$xE
L$8A
l$@D
T$HE
$t_;V E
f tR;V0E
f0tE;V@E
f@t8;VPE
fPt+;V`E
l$LD
l$LE
'L;d$
|$LH
i(E;i,
D$H&
Q(A;Q,
H9D$PI
m Lc
\$ ;
\$0D
D$(H
L$ D
|$ D
L$ D
D$(D
x(;x,w(A
l$$A
D$8I
T$@E
7D:1
IcL$
\$ D
IcL$
D$ A
|$HJ
Ic6L
H9\$PI
F IcN
L9t$PM
[ Hcs
H9l$PI
~ LcE
m Ic
\$0D
D$(H
L$ D
L$ D
D$(D
\$0H
H;D$
3wBA
\$8A
D$8I
\$ D
\$ t
\$pA
D;b$
d$0D)
\$|D
D$0H
T$(H
L$ D
L$ H
T$(D
D$0D
\$|H
\$pE
\$0D
D$(H
L$ D
L$ D
D$(D
\$8L
l$ H
\$ D
E;`$A
d$0L
|$ L
A;D$
u&LcU<N
~@D9
D$8H
H9(H
t$8L
4$Lc
,$Hc
t$8I
|$8L
t$8H
\$0D
D$(H
L$ D
\$0D
D$(H
L$ D
D$81
L+` 1
I+U 
L$pE
|$XI
|$8I
dH3<%(
[]A\A]A^A_
t$8L
T$0L
\$(I
|$0H
L$ J
L$(H
T$8D
t$8M
H++E
H9D$PI
t$8L
<$Hc
4$Lc
4$Lc
<$Lc
D$H%
l$8L
L$8A
T$8A
T$8H
d$XH
d$8A
|$8L
\$pE
M+/D
T$pE1
T$(M
u tz;F
} td;G
e tNA;D$
T$ H
U t5;B
l$(HcE
D$H'
D$H$
T$8I
D$H.
D$H/
t$8I
D$H"
D$H#
\$8H
D$H)
t$@H
\$ D
\$ D
t$@L
t$@H
t$@L
T$0H
L$(D
T$ H
L$(H
T$0H
\$|D
D$0H
|$(H
L$ D
L$ H
|$(D
D$0D
T$pA
t$HA
D$(D
\$0D
D$(M
L$ D
D$(D
t$81
t$8L
\$8I
\$8I
\$ D
D$H+
D$H,
t$8I
D$H*
D$pI
\$pA
D$H0
D$H(
4$Lc
D$H1
D$H-
IcL$
AWAVI
AUATUSH
L$ D;
4;L)
p Hc
t!Hc
B(A;B,wVA
A(A;A,wFA
D;q$
H;|$
H[]A\A]A^A_
d$0E;a
4$Lcv
AVAUATUSH
[]A\A]A^
AWAVAUATUSH
T$ H
D$x1
H;u0
McL$
|$HL
|$@I
T$HH
|$@H
l$HM
T$@H
|$HL
l$@I
T$HH
|$@H
D$HL
|$@I
t$HH
l$@M;E
C0H=
k@I9
t$xdH34%(
[]A\A]A^A_
 tRH
\$(L
\$pH
McL$
t$ 94$
|$HL
t$8L
LcL$
l$@I
P0I9
T$ E
L$(E)
IcT$
T$ LcL$(H
~hLc
H ~PHc
p(~8Ic
x0~ Hc
T$0I
L$ I
L$8A
tPL;y 
tAL;y(
t2L;y0
t#L;y8
D$8;T$8
\$PD
L$HL
T$@H
T$8L
T$@LcL$HD
T$PL
\$HD
L$@L
T$8LcL$@D
T$8LcL$@D
T$8LcL$@D
A;T$
|$0L
\$8D
LcL$(D
t$HI
|$@A
c Ict$
C@~#1
\$0L
D$(D
\$0H
D$0H
\$8H
T$(H
T$(D
\$8L
=HsK
=%sK
L;kH
G0H=
k@L9
\$ D
|$ H
|$XI
T$pH
t$hH
|$`D
\$(H
T$pH
t$hH
|$`H
\$(H
|$XI
|$XA
AZA[
D$(D
\$0H
|$XA
AWAVAUATA
[]A\A]A^A_
AWAVI
AUATI
D$0H9
l$(I
([]A\A]A^A_
k HcE
AWAVAUATI
\$0H
dH34%(
[]A\A]A^A_
ATUI
AWAVAUATUSH
HcMxA
L$ D
|$`Mch
D$hH
|$dO
\$(H
|$@H
t$pH
5raK
H+D$
d$ Hc
L+D$
H+|$
\$(Lc
\$HL
T$PH
\$HH
T$HL
T$0H
L+l$
T$ A
5E_K
L+D$
\$ M
L+L$
\$(M
-\^K
5@^K
L+L$
L$PD
D$HA
\$8H
\$HI
D\$0H
D$0A
dH3<%(
[]A\A]A^A_
T$@M
5oZK
L+L$
\$HL
t$HH
H+T$
L9|$
L$HH
-kXK
5OXK
L+l$
L9|$
T$HH
5uWK
L+D$
d$PH
T$HL
H+D$
] Ic
L$HI
L+l$
5}TK
<	I1
\$HI
D$HH
L+l$
T$HLc
L$(M
D$8H
D$8E
H+D$
t$HL
H+T$
H+}@Lc
-PPK
54PK
H+T$
L+M@M
L+D$
-NOK
52OK
H+D$
\$HI
D$HI
5fNK
L+l$
t$0A
\$HI
L$8E
H+L$
5TMK
H+D$
\$PL
\$PL
D$HD
L+L$
\$HI
D$HI
L+l$
L$HL
\$Hu
\$HH
T$HH
-7KK
L+l$
H+D$
t$pLc
-MJK
5-JK
H+\$
T$PL
L$HA
T$PA
5pIK
H+D$
T$HH
T$HI
t$HH
H+|$
5nGK
L+D$
H+D$
\$HL
D$HH
-^FK
5BFK
L+L$
T$xH
t$PI
D$8L
\$PH
T$xH
\$HH
D$8E
L+T$
H+|$
d$HL
D$HI
5mDK
L+l$
\$HI
L$HH
L+l$
D$HI
-;CK
H+T$
d$HH
D$HI
L+l$
d$HL
|$HH
L+l$
L$HL
Hc\$HL
-QAK
55AK
H+|$
%$|I
t$HL
\$Hu
\$HH
D$HH
\$HA
\$HM
5e@K
H+\$
\$HL
T$PL
\$HH
L+D$
L$PL
\$PL
D$xL
L$HI
D$P1
T$Pu
T$PL
\$HM
L+m@L+|$
\$HI
T$HM
5c>K
L$PL
d$HL
\$HD
|$8M
T$(Lc
-b=K
5B=K
H+|$
\$HL
T$PL
\$HH
|$HH
L+t$
L$(Hc
t$HL
D$8I
L+T$
T$PL
\$HL
D$HH
t$HH
-!;K
H+D$
|$(Lc
\$HK
L$HM
5ouI
T$HM
\$HH
t$HH
t$HM
<$u M
D$PL
t$HA
D$PH
t$HH
5l9K
L+\$
L$HL
t$PL
L$HL
\$HD
T$PE
T$PL
\$HL
|$HH
t$HH
H+\$
T$PL
\$HL
T$PH
L$HI
-d7K
5H7K
L+\$
\$HL
T$PL
\$HH
L$HH
L+D$
|$(Hc
\$HL
T$PL
\$HH
L+T$
T$PL
\$HL
D$8L
\$HL
|$HH
D$8E
-h5K
5L5K
L+L$
t$HI
\$PE
D$PHc
D$PE
T$xL
L$PL
T$xI
T$PL
T$PM
L9t$H
H+|$
T$PL
T$pHc
D$PH
T$HH
-y2K
5]2K
L+L$
D$pLc
L+\$
d$HL
T$8I
\$HH
\$8H
\$8M
L$xL
T$PL
\$HI
\$HL
T$PH
L$xt L
L$xL
T$PL
D$8D
L$8E
L$xL
T$PL
D$8L
\$HL
T$PH
L$xuzL
L3#L
T$PA
\$HH
L$xt
 u-H
L$xL
T$PL
\$HL
T$PH
L$xH
l$HI
-R/K
56/K
H+T$
T$PM
\$HL
L$HH
|$HH
T$PH
D$8L
D$PH
t$HH
-&.K
L+T$
T$PL
\$HL
D$PH
D$Hu
D$PH
D$HH
t$HH
D$PH
D$PH
D$HM
-O-K
53-K
L+T$
T$PL
\$HL
D$PI
|$HH
D$PH
D$PH
\$HM
-Y,K
5=,K
L+T$
L$ L
T$PL
T$PL
H+|$
T$PH
\$HI
D$8L
\$HL
\$HH
H+T$
D$8M
T$HH
\$PL
D$8H
Hct$xI
t$8L
t$8H
t$(Lc
\$8J
T$PH
D$8L
L$HL
T$Pu
L$PL
T$HA
L$PL
T$HI
t$8E
L+D$
T$HL
t$8A
t$HL
|$8I
\$xu
\$xI
\$xj
\$xI
\$PA
|$8H
D$8H
\$8H
|$HL
L$8I
D$8H
L$(M
|$8H
\$8H
T$HL
T$(Lc
D$8H
L+\$
L$PL
\$HI
D$8L
\$HH
L$Pu
L$PL
\$HH
T$HI
\$HH
H= S
\$HE
T$PL
\$HL
T$PH
\$HH
T$PH
T$PH
D$HM
-4!K
H+|$
H+|$
\$HL
T$PL
\$HH
-< K
5  K
H+D$
D$PA
\$HL
\$Hu
\$HI
\$PL
|$HI
\$PH
\$HL
\$HI
\$HL
\$HL
D$HI
T$HM
D$8H
L+L$
T$HH
\$HL
\$HA
L+|$
T$PL
D$8I
\$HL
T$PH
\$HH
|$Pu
|$PL
\$HM
L+L$
T$PL
\$HL
T$PH
t$HH
T$PL
T$PH
D$HM
H+|$
T$PL
\$HL
|$HH
D$HH
H+T$
\$HL
T$PL
\$HH
\$HH
|$PL
|$PL
\$HM
H+L$
\$HL
T$PL
|$HL
\$HH
\$HL
T$PL
|$HL
t$HH
H+T$
T$PL
\$HL
T$HH
L$Pu
L$PH
T$HL
\$HH
L$PL
T$HA
L$PH
T$HM
H+D$
T$PL
\$HL
T$HH
|$HH
L$PH
T$HA
L$PH
T$HM
L+D$
T$HM
D$8H
l$@Lc
L+\$
|$ Lc
|$(Hc
T$PL
\$HM
l$HH
H+\$
L+t$
T$HI
L+l$
L$HH
L+t$
L$xL
T$PL
\$HH
|$HL
L+t$
\$HA
H+T$
L+|$
L+T$
T$HA
D$xA
-7II
T$HA
T$HL
|$HL
T$HI
L+|$
ASAUL)
D$PL
T$HA
T$HL
L+|$
\$HL
T$HI
L+l$
H+D$
T$hL
\$8L
\$8H
\$HI
5^BI
T$xL
D$PL
\$HA
T$xL
D$PL
H+|$
D$xL
L$PH
|$HD
|$PL
D$xM
L$8M
L+l$
H9D$
T$HL
=/@I
\$HI
\$HH
\$HL
\$HL
\$HL
L$PL
D$PM
L$8M
H+\$
-ioB
L+D$
\$HA
\$HL
D$HMc
\$HI
\$HI
9D$`L
9D$\
]|9D$d
9D$\
T$dD
T$8E
T$HA
L+D$
|$PH
DT$0H
\$HI
\$HH
\$HM
\$HL
L+L$
\$HH
Lcd$PE
D$PL
%G}C
\$HI
Hc]xH
D$8L
\$HH
t$\E
|$\E
L$\@
L$\D
\$HI
t$HH
t$Hu$H
\$8M
t$8H
T$HA
\$HA
\$HH
D$0I
\$HI
\$HL
L$PH
L$PL
t$PH
T$PM
T$PL9l$H
D$8I
T$8H
T$xL
L$PI
D$PH
|$HH
|$8H
D$PD
|$HH
T$HH
56*I
D$0A
T$PH
T$PA
T$PH9\$H
\$HH
t$PH
T$PA
T$PI
L;t$H
t$HH
\$PL
|$Ht
|$HL
|$HH
|$H1
H+T$
D$HM
5LHK
\$HI
\$HH
L+t$
T$HE1
T$PH
\$HI
T$PI
T$HL
D$HH
T$8L
D$HH
T$HL
T$HL
t$HH
\$HH
\$HE
H+T$
T$HH
\$HH
T$HL
53!I
L$PL
\$HH
\$PH
\$xI
\$HL
Hc]x
|$`IcB
T$hH
|$dH
l$(L
t$@L
T$pH
L$xI
D$xL
T$HH
T$xL
L$HA
L$xH
t$HH
D$xL
D$xH
T$HA
T$xL
L$HA
T$xL
\$PD
T$xD
\$PD
\$PD
D$HE
\$HL
\$HA
\$HL
t$HE1
D$xL
\$PD
D$xu4H
\$HA
D$PL
\$HD
T$PL
T$PL
T$PL
T$PL
T$PL
T$PL
 u#I
|$HH
T$HH
\$8H
\$8H
t$Ht*H
\$8H
t$HI
\$HI
T$PH
D$HA
T$PH
T$PH
\$HD
L$8I
D$8L
L$PA
T$PL
T$PH
\$HL
T$PA
T$PL
T$PL
L$PuBL
T$8E1
\$8L
L$PL
T$PL
T$PL
D$PI
L9|$
T$HH
\$HH
T$0H
L$HL
|$H~UH
L$8H
|$8L
H+D$
t$8E1
B` S
D$HH
\$HI
L$HH
2u#H
D$PL
L$HH
D$PL
L$HH
\$HH
\$Ht2H
\$Hu
\$HH
\$PD
L$HH
\$HL
T$PL
L$xH
T$PL
\$HA
L$xL
T$PL
\$HH
H+L$
L+D$
L$xL
T$PL
L$xL
T$PL
L$xL
T$PL
\$HL
T$PH
L$xL
T$PL
\$HL
T$PH
\$PH
\$HA
\$PL
A0H=
\$HH
L9|$
T$PL
L$xH
=@EC
T$PE1
T$xL
t$PH
T$0H
L$0H
L$HH
\$PL
\$HL
\$PL
T$PI
T$PL
t$HI
T$HH
\$PL
T$HH
\$PL
|$HH
\$PL
\$HL
T$PL
\$HL
H+T$
\$HM
T$PM
\$HL
|$HH
D$HH
H+T$
L+L$
L+t$
t$HH
\$PL
D$0L
\$hI)
\$8H
H+M@O
D$(Lc
\$8K
[]A\
[]A\
AUATUSQH
Z[]A\A]
AWAVI
AUATI
uzI9
[]A\A]A^A_
AWAVAUATUSH
D$X~?H
L;T$XL
[]A\A]A^A_
|$hM
d$(~8H
t$hH
H;l$(H
L;\$X
T$pH
L;l$8
T$pO
l$PL
t$PI
\$(H
\$`L
|$ ~
H;\$ 
L$`L
l$PH
|$PI
D$(L
L$H~
L;t$H
L$xL
d$@~
L;l$@
t$xK
D$P~
H;\$P
\$0~
H;l$0
t$PH
|$PI
D$(L
H;|$(
L;t$H
H;\$ 
D$(M
AWAVAUATI
D$(1
 v|E1
|$(dH3<%(
8[]A\A]A^A_
AVAUI
ATUH
[]A\A]A^
]@H9
H9]Hv
AUATI
[]A\A]
AWAVL
AUATI
H;-v
H9-'
I;N(
8[]A\A]A^A_
T$ L
T$(L
D$ L
D$ L
I;N(
ATUH
C0 S
[]A\
AWAVAUATUSH
[]A\A]A^A_
t{E9
AUATUSRH
t	X[]A\A]
Q fA
AUATI
[]A\A]
AVAU1
ATUA
[]A\A]A^
ATUH
[]A\
AWAVI
AUATI
D$h1
\$PL
l$Xthf
\$hdH3
x[]A\A]A^A_
|$@L
}(Hc
=ShC
T$8H
t$0H
|$01
d$0I
|$0L
D$0H
t$0H
T$8H
t$HH
\$PL
l$XA
|$@H
O E1
|$@D
Hct$
AVAUI
ATUH
D$H1
t$ H9
t$ H
D$(H
|$(H+p
D$(H
\$HdH3
P[]A\A]A^
D$ L
t$ H
D$ L
t$ H
|$(H)
|$(H
D$ D
D$@H
D$8H
D$(H+p
t$0PL
\$(ASH
|$@WL
L$@AQM
T$(ARL
D$8API
T$hR
D$xPH
t$(I
|$(H
D$@H
T$8D
|$8D
T$ E
T$@M)
D$@H
D$@H
ATUH
[]A\
AWAVAUATI
D$(1
t$ H
|$ I
t$(dH34%(
8[]A\A]A^A_
t$ H
L$ M
AUATA
[]A\A]
ATUH
[]A\
AWAVAUATUSH
D$@H
D$0L
L$8L
n(L!
tRI9
O$H9;
L$pM
|$ I
|$ L
|$ I
T$PL
L$HL
|$ L
D$(L
L$HL
|$ I
T$PL
L$HL
|$ L
D$(L
L$HL
|$ I
T$PL
L$HL
|$ L
D$(L
L$HL
T$@H
T$0L
\$8H
h[]A\A]A^A_
[]A\A]A^A_A
d$@L
McT$
IcD$
|$@Hc
T$hH
T$ M
T$ t
AWAVAUATUSH
H[]A\A]A^A_
e fA
[]A\A]A^A_1
t$ H
H[]A\A]A^A_
E;w@
]A\A]A^A_
[]A\A]A^A_1
_AXH
~ Hk
t$ H
|$(1
H[]A\A]A^A_
t$ H
[]A\A]A^A_H
H[]A\A]A^A_
$A;M
|$(I
[]A\A]A^A_H
H[]A\A]A^A_
H[]A\A]A^A_
t$ H
H[]A\A]A^A_
H[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_H
[]A\A]A^A_H
[]A\A]A^A_
}zMc
H[]A\A]A^A_
]A\A]A^A_
D$ M
t$ M
E;~@
t$ H
~ Ik
[]A\A]A^A_H
H[]A\A]A^A_
|$0I
|$0H
T$8L
t$ H
t$ H
[]A\A]A^A_H
D$(H
t$ H
t$(L
[]A\A]A^A_1
H[]A\A]A^A_
[]A\A]A^A_
|7(A
L$ H
D$ H
t$ H
[]A\A]A^A_H
[]A\A]A^A_H
=)3C
AUAT
~FE1
} Ic
[]A\A]
AWAVAUATUSH
T$HH
O8M;
W4LcC
dH34%(
[]A\A]A^A_
|$HH
d$HM
p4LcC
D$ A
D$HM
p4LcC
4LcC
|$(I
t$(f
d$HfA
|$(P
t$Hf
T$HI
t$@H
t$HD
F(fA
~yMc
t$HL
L$HH
E;t$@|
$`q]
D"(E
W fA
T$ I
L$HI
|$HL
[ fA
sHfA
h fA
}hMc
L$HE1
\$HE1
{(E9
L$<A
T$8L
E;t$@
|$HH
t$HH
L$8L
D$<L
E;Z@
D$(L
\$ L
D$(H
AUATUSH
L$8L
D$@L
L$Ht7
)D$P
)L$`
)T$p
[]A\A]
L$ H
AWAVI
AUATUSH
[]A\A]A^A_
$ueH
[]A\A]A^A_
([]A\A]A^A_
[]A\A]A^A_1
[]A\A]A^A_
H9,$w
H9,$vI
L9|$
x'H;w
5)-J
ATUSH
[]A\
AWAVAUATUSH
D$ A
D$ H
t$ 	
8[]A\A]A^A_
D$(LcM
Hcl$ Hc~
|$(M
8[]A\A]A^A_
ATUS
i4[]A\
ATUS
i,[]A\
AVAUATUH
[]A\A]A^
} Mc
P$E1
}<Ic
AUATUSH
[]A\A]
ATUI
X,[]A\
AUATUSH
%zgH
m@I9
[]A\A]
%AfH
=8$J
Z[]A\A]
L;mH
[]A\A]
AUATUSAQ
f4Z[]A\A]
t$f.
AVAUATU
[]A\A]A^
AVAU
ATUH
[]A\A]A^
AWAVI
AUATI
D$(1
=yQH
<8H)
|$(dH3<%(
8[]A\A]A^A_
 tRH
-yZH
=;OH
<8H)
{ twE9_
{ t`D9_
s tID;^
C t2E9X
T$ H
T$ H
5^TH
-'TH
=GTH
AWAVAUATUSH
[]A\A]A^A_1
([]A\A]A^A_
\$ I
t$(H
L$0H
T$8H
]A\A]A^A_
ATUI
[]A\
T$ H
T$ H
AVAUATUS
n4[]A\A]A^
AWAVAUATI
[]A\A]A^A_
AUATUSAQ
n4Z[]A\A]
AUATH
[]A\A]
]A\A]
AUATUSAQ
n,Z[]A\A]
D$ 1
AWAVAUATI
([]A\A]A^A_
AUATI
[]A\A]
AWAVI
AUATUSH
H(fA
hPfA
] Mc
Hc|$
|$0L
d$(L
T$ L
H[]A\A]A^A_
t;(L
Lc\$8H
\$ A
[]A\A]A^A_1
D$0t
L$<D
Hc\$<L
mH9B
J Ic
t9(L
Lc\$8L
|$ A
mH9C
S Mc
U fA
t2(L
Hc\$8L
D$ A
=CyB
=R%C
5I8H
5Y7H
ATUI
$[]A\
[]A\
AUATI
Z[]A\A]
ATUSH
~$_H
f$uF
~%_u@
dH34%(
[]A\
AWAVI
AUATUSH
[]A\A]A^A_
[ fA
AWAVAUATI
T$0E
H[]A\A]A^A_
HpfA
@HfA
D$(H
|$ H
D$0L
LcT$0L
L$ H
t$0H
t$ L
t$ M
t$ H
 ;T$0
t$0A
AWAVAUATUSAR
|$HI
n0Z[]A\A]A^A_
T$0H
L$8L
D$@L
L$Ht7
)D$P
)L$`
)T$p
AWAVI
AUATUSH
=]PB
([]A\A]A^A_
=VhB
56hB
@$E9
X,Z[]
|$hH
[]A\
AVAUI
ATUI
X$[]A\A]A^
AVAUI
ATUI
X,[]A\A]A^
AWAVAUATUSH
[]A\A]A^A_
AWAVAUATUSH
H= S
[]A\A]A^A_
T$0H
AUATUSAQ
n4Z[]A\A]
ATUI
X,[]A\
AWAVAUATUSAR
f,Z[]A\A]A^A_
D$@L
L$Ht7
)D$P
)L$`
)T$p
D$ H
dH34%(
AVAUATUH
t.[]A\A]A^
ATUS
[]A\
AWAVA
AUATI
~dE1
E;<$|
[]A\A]A^A_
X,Z[]
AWAVE1
AUATE1
s(AVE1
[]A\A]A^A_
B(L9
s(AVH
ATAW1
AWAVH
AUATUSH
|$0L
l$0L;}
|$0L
t$8H
\$0I
L;|$
L9t$
L$0H
|$0L
\$8O
T$@I
D$0H
T$ H
L;l$ 
D$HI
L9t$ 
t$@J
X[]A\A]A^A_
L$0E1
L)|$
D$ H
t$ H
|$0M
d$ L
l$ L
|$(L
D$01
L$(I)
\$(L
t$@I
L$ H
L$ H
l$0M
T$ I
T$(H
D$(I
AVAUATUS
n,[]A\A]A^
AWAVM
AUATL
t$81
t$x1
([]A\A]A^A_
D$(1
D$ H
t$ H
t$ H
L$(dH3
AWAVH
AUATM
([]A\A]A^A_
L+t$
AWAVAUATUSAR
f,Z[]A\A]A^A_
AUATH
D$(1
d$ H
I;l$
H= e
L$(dH3
8[]A\A]
T$0H
AUATUSH
H= e
[]A\A]
[]A\A]
ATUSH
[]A\
h(A;h,w&
A;Y$A
0t	1
AWAVAUATUSH
~jI;Y
tZI;Y 
tJI;Y(
t:I;Y0
t*I;Y8
[]A\A]A^A_
H= e
AUATUSAQ
f4Z[]A\A]
AWAVI
AUATUSH
AY[]A\A]A^A_
AX[]A\A]A^A_
p(umH
AVAUATL
H= e
t9[D
]A\A]A^
[]A\A]A^
AVAUI
ATUH
D$(1
l%$H
l$ H
t$(dH34%(
0[]A\A]A^
L$ L
t$ H
|$ H
t$ E1
t$ I
ATUI
[]A\
AUATI
[]A\A]
T$8H
t$ H
L$8H
49@8
T$(H
t$0H
|$ H
t$ H
D$0E1
D$8E1
AVAUATUS
h4[]A\A]A^
AWAVAUATI
dH3<%(
([]A\A]A^A_
T$0L
$H9\$
AWAVH
AUATL
`$USH
T$xH
|$PH
D$x S
|$xH
D$ H
T$(H
L$0H
l$8L
DD$ I
DD$(I
DD$0I
F8L/
t$@H
dH3<%(
[]A\A]A^A_
D$8D8
D8D7
D8D7
T$`H
D$hL;|$X
D$XA
T$`H
D$hL
L;|$X
\$8L
\$8I
D$@M
L9T$H
|$@H
~hE:t
~TE:t
~@E:t
C	H9
~,E:t
|$PH
l$@H
T$@L
\$HH
|$PI
[	H9
u	H9
|$PA
L;|$H
|$HH9
|$xH
L;|$H
T$PH
|$HL
|$HI
|$@H
\$XL
T$8H
T$8L
\$Xt<I
L;T$Ht H
T$HK
T$`H
D$hL
AVAUATUH
-tCH
 []A\A]A^
USQH
x7H;w
AWAVAUATI
H;\$
H;\$
H;\$
H;\$
([]A\A]A^A_
H;\$
[]A\A]A^A_
T$0H
AUATI
;0t2Hc
$Z[]A\A]
AWAVAUATI
D$H1
~$_H
l$@H
={GB
tDM9
I;T$
t$$H
T$HdH3
X[]A\A]A^A_
|$@H
K(u*L
T$@L
T$@L
T$@L
I;T$
t$$L
T$(L
L$ H
L$ L
I9T$
t$$L
T$(L
L$ H
L$ L
I9T$
t$$L
L$(H
L$ L
L$ L
T$@H
t$8H
T$@H
t$8H
ATUS
i4[]A\
ATUI
[]A\
AWAVM
AUATI
D$(1
<\t~
\tSD
\t<@
\t%I
D$ H
|$(dH3<%(
8[]A\A]A^A_
AVAUI
ATUSH
[]A\A]A^
AVAUATUS
n,[]A\A]A^
AUATUSAQ
n4Z[]A\A]
AWAVAUATUSH
D8d:
[]A\A]A^A_
^$:_$
v$D81uRI
D8~%u<I
u M9
F8<)
[]A\A]A^A_
AVAUI
ATUH
D$(1
5}dB
xhI9
t$(dH34%(
0[]A\A]A^
L$ L
|$ H
L;D$ 
AWAVH
AUATI
D8l7
[]A\A]A^A_
@8/t
H9l$
H9l$
L9|$
D:L$
'D:	tGM
D8,)t
4:F849u
D8'u
x8H;;w[H
AVAUH
ATUSL
[]A\A]A^
AVAUI
ATUI
X,[]A\A]A^
AWAVAUATUSH
[]A\A]A^A_
I;?u
J LcA
ATUI
uz[]A\
AWAVAUATUSH
[]A\A]A^A_
P(D;P,w&E
[]A\A]A^A_A
E9a$A
d$0E)
X,Z[]
AUATI
t$$L
[]A\A]
[]A\A]
AVAUATUS
n,[]A\A]A^
AWAVAUATI
[]A\A]A^A_
ATUS
[]A\
ATUA
/w6A
dH3<%(
[]A\
/w>A
AUATUSAQ
n4Z[]A\A]
AWAVAUATI
k thI
D$ H
C(tUI
t$(H
s0tBI
|$0H
{8t/M
\$8I
E0H=
[]A\A]A^A_
-IoG
ATUI
X,[]A\
AWAVAUATI
D$(1
|$ H
|$ H
D$(dH3
8[]A\A]A^A_
L9t$
T$ I
>t8H
T$ H
AWAVAUATUSH
L;s tkH
L;s(t[H
L;s0tKH
L;s8t;
@t?I
[]A\A]A^A_
=wVA
AVAUI
ATUI
X,[]A\A]A^
ATUSH
 []A\
AWAVI
AUATUSH
k fA
[]A\A]A^A_
AZA[
ATUH
S0ul
[]A\
AVAUI
ATUI
X,[]A\A]A^
AWAVAUATUSAR
|$@I
n,Z[]A\A]A^A_
ATUH
[]A\
AVAUATUS
n,[]A\A]A^
AVAUATUS
n,[]A\A]A^
q(M9
T>0H
T>HH
T>`H
=_PG
ATUH
L$ H
tdH9
[]A\
[]A\
t.H9
[]A\
[]A\
t$H=
L$ y
ATUI
X,[]A\
t=H9
AVAUI
ATUSH
-KMG
[]A\A]A^
AVAUATUS
n4[]A\A]A^
AWAVAUATUSH
\$ H
,1I)
X[]A\A]A^A_
Hc\$
l$ M
l$(H
Lct$
T$(H
d$0I
|$ H
E D;
E Hk
Hcl$
L$0M
|$ H
u D;5
M Mk
Lcl$
|$ L
d$8O
d$8H
~ Ik
t	;}
Lcd$
l$@K
l$@H
Q D;
i Lk
Lcl$
|$HO
|$HH
$3L)
j Mk
A;|$
E D;
M Lk
[ t|A;K
{ te;O
c tOA;L$
l$ M
k t6A;M
X[]A\A]A^A_
E;D$
L$ M
T$(M
T$(M
L$ M
|$ H
|$(L
\$(M
l$(M
t$ thE;F
t$(M
|$ tOE;G
|$(I
D$ t6D;@
D$(H
T$ t
T$(H
t$(L
l$ H
L$ t
%q8G
D$(M
L$ M
T$ M
|$(I
-O7G
T$ L
-A7G
557G
%u6G
\$(H
5K4G
-U3G
AWAVI
AUATI
\$@1
d$xL
t$@H
|$PH
|$HM
|$PH
L$pH
|$pH
[]A\A]A^A_
|$PH
t$pI
|$pH
B(;B,w(
|$HE1
.D9l$
}cLcd$
l$(L
D$$E9D$(
D9\$ 
LcD$ K
t$(L
ATUSH
[]A\
=W$A
AUATUSH
-o,G
->,G
[]A\A]
AUATI
[]A\A]
AWAVAUATI
[]A\A]A^A_
AWAVI
AUATI
=P[@
-=mA
[]A\A]A^A_
=#lA
d$8E
5NkA
AUATUSQH
Z[]A\A]
ATUS
[]A\A]
AWAVA
AUATI
D$(1
|$ L
T$ L
\$(dH3
8[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
t$ H
E;4$
t$ H
E;4$
taA;]
HD H
{ E1
[ E1
E;'|
<$A9
E;.|
E;'|
AVAUATUH
[]A\A]A^
t$ H
E;,$
t$ H
t$(H
t$0H
t$8H
E;4$
E;&|
AWAVM
AUATA
t_Sj
L$`E1
D$PH
[]A\A]A^A_
ATUI
{$*t*
[]A\
AWAVAUATI
[]A\A]A^A_
|$(L
|$(H
AWAVAUATUSH
f$tRH
<$_t)H
([]A\A]A^A_
@$_H
|5$L
AUATI
D;+|
[]A\A]
x/H=
E(H=
AWAVI
AUATI
|$(H
|$@L
\$ I
D$8H
\$ H
L;d$
[]A\A]A^A_
t$0L
|$ M
t$8L
\$(H
|$8L
L$@H
T$ L
\$(L
\$ H
D$(I
\$ H
d$@M
T$0D
xOH9
d$@H
ATUSH
ATUH
[]A\
AUATA
}3Hc
Z[]A\A]
ATUH
[]A\
AVAUI
ATUSH
H9X tpH
H9X(t`H
H9X0tPH
H9X8t@
dH34%(
 []A\A]A^
=J/A
=e.A
AWAVAUATUSH
t$8H
T$ H
l$0H
t$(H
I(I9
t$(H
t$(H
L$8H
t$(H
l$0L
l$01
|$(L
l$@M
E(I9
L(0H
L(HH
|$(L
l$@H
|$(L
l$@H
d$@E1
t$(L
l$0M
](M9
t$(L
|$8L
t$(L
|$(L
l$@H
|$(L
l$@H
|$(L
l$@H
l$(M
e(I9
d$(H
|$@H
LcT$0M
X0M;S
d$(L
t$(H
t$(H
t$(H
l$(H
T$8H
t$(L
l$0I
T$0I
X[]A\A]A^A_
T$0M
t$(L
t$(L
t$(L
t$(H
l$0E1
T$8H
|$8H
t$(H
d$(H
t$(H
t$(H
|$(H
l$0L
t$(L
|$(L
l$@H
|$(L
l$@H
t$(H
t$(H
t$(H
t$(H
t$(H
t$(H
d$(L
t$(L
|$ H
|$(H
|$0H
|$8H
[]A\
|$8H
AWAVI
AUATI
o dH
D$(1
L9$$
 tII
L9$$
I;v 
L$(dH3
8[]A\A]A^A_
I;M u	I
I;M(t
I;M0t
L9$$
T$ H
T$ H
AWAVI
AUATUSH
=c A
[]A\A]A^A_
W8dH
dH34%(
[]A\
AWAVAUATI
[]A\A]A^A_
L$0H
|$@H
D$ H
uPH)
T$(H
t$8L
L$PL
l$hI
t$pL
D$HL
t$ L
T$XL
\$`L
|$xH
L$(H
D$0L
t$ I
AWAVA
AUATI
([]A\A]A^A_
H(D;H,w&E
AVAUH
ATUL
g8SH
dH34%(
[]A\A]A^
AWAVAUATI
D$81
x `u
x(`u
x0`u
x8`u
L$8dH3
H[]A\A]A^A_
s E1
H;=6
$vM9
t$ H
t$ H
AWAVH
AUAT
D$P1
D$(H
L$(L
l$(M
t$HdH34%(
X[]A\A]A^A_
$t~H
$tbH
$tFH
$t*H
T$0H
5URA
l$ H
T$0H
 tTH
T$0H
T$@H
t$8H
|$0H
T$0H
T$@H
t$8H
|$0H
T$@H
t$8H
|$0H
T$@H
t$8H
|$0H
T$0H
E0 S
EH S
E` S
Ex S
AWAVLc
AUATA
~QMc
([]A\A]A^A_
ATUI
[]A\
AWAVI
AUATI
8[]A\A]A^A_
M;q(
T$ L
T$ I
M9q(
I(D;I,w&E
ATU1
[]A\
AWAVAUATUSH
]A\A]A^A_
[]A\A]A^A_
t$ H
t$(H
t$0H
E;4$
~VE1
]A\A]A^A_
=?eH
U(E9
E;,$
AXAY
AWAVAUATI
D$x1
*t	H
\$ H
M;u0
|$ M
t$xdH34%(
[]A\A]A^A_
u5H%
AVAUI
ATUH
t)[L
R ]A\A]A^
]A\A]A^
AVAUATUI
[]A\A]A^
=yfF
AUATUSH
D$(1
L$(dH3
8[]A\A]
z$u"
ATUH
[]A\
AWAV
AUATUSH
txL1
[]A\A]A^A_
AUATUSH
[]A\A]1
[]A\A]
 tAH
=Ro@
[]A\A]1
AWAVAUATA
txLcS
[]A\A]A^A_
w(D;w,w&D
x$/A
AUATI
=N8H
[]A\A]
uEE1
=yrF
53CH
-o7H
-P7H
AWAVI
AUATI
s tqM
S(tZM
[0tCI
C8t,
-moF
dH3<%(
[]A\A]A^A_
t$HM
nothing
AWAVI
AUATI
T$(H
\$(I
[]A\A]A^A_
L$(M
[]A\A]A^A_
\$(L
|$(L
D$81
D$ H
\$ H
L$ E1
t$8dH34%(
@[]A\
t$(M
|$(H
T$0H
t$(H
D$0H
D$(M
H0u^H
AWAVI
AUATUSH
([]A\A]A^A_
w E1
[]A\A]A^A_
o E1
S(IcrX
o E1
{(HcGX
`hE1
[]A\A]A^A_
=W*H
[(IcSX
k(Mc]XA
khu3I
[(IcSX
EXA9
t'E1
[]A\A]A^A_
C(E1
D;$$|h
<$E9
}'Lc
s(Ic~X
{(HcGX
,$E9
=#%@
D;d$
=5CF
AUATI
|$(I
l$8H9
D$8L9
[]A\A]
uDH=
AUATA
[]A\A]
]A\A]
AWAVAUATE1
uIM9
~dM9
[]A\A]A^A_
~	M9
~	M9
[]A\A]A^A_
AWAVAUATUSH
-c:F
[]A\A]A^A_
=C7F
T$0M
ATUStBH
h([]A\
tFAWAVAUATUSH
[]A\A]A^A_
AWAVI
AUATI
8[]A\A]A^A_
H;-A
tIL9
T$ L
T$ L
M;~(
xZM;~(
5tx@
-bx@
AWAVA
AUATI
tvHcs
[]A\A]A^A_
M(Hk
<8L)
AWAVAUATA
t{Hcs
[]A\A]A^A_
AWAVI
AUATUSH
|$p1
D$ H
T$pL
Lc\$|H
t$|N
Lct$|L
d$|K
\$|A
t$|D
L$pK
LcD$xE
Hct$xH
k(I9
L50H
L5HH
t5`H
D$ M
T$(I9
|20L
|2HL
L2`H
D$ M
T$(I9
L*0H
L*HH
l*`I9
\$(H
L$ D
L$ D
LcT$xD
L$pA
L$ M
\$(I9
T;0M
T;HM
D;`I9
L$ M
D$(I9
L80H
L8HH
D8`I9
L$8H
|$pH
D$ L
l$0M
T$<L
y M)
LcT$xD+
LcT$xD
|$pA
L$xO
HcD$xE
A;y$
D$HL
D$(A9x$
T$PE1
\$XM
\$HL
T$(L
\$HA
t$0D
|$DAW
t$ AUASL
\$0AVSL
L$XL
l$ M
T$pH
|$pH
[]A\A]A^A_
T$pL
Lc\$|H
L$|N
T$`D
L$hL
L$hL
T$PL
D$(A
|$HD9
T$pL
T$PL
t$(H
\$PL
f(A)
T$pL
|$pD
LcT$xD
L$pD
T$PH
$tvD
\$HL
T$(L
T$(L
\$H@
T$PL
T7$1
D7$1
\$0D
L$(D
D$ D
\$0D
L$(D
D$ D
AVAUH
ATUS
Mcl$
H= S
=<GB
[]A\A]A^
ATUI
T$0H
[]A\
ATUI
[]A\
[]A\
[]A\
t?USH
AUATUSH
[]A\A]
AWAVAUATUSH
|$(H
t$@H
T$8H
L$HH
Y$HcI
\$PH
|$(L
D$(H
D$ O
L$8A
T$HH
D$0E
J*~xA
B,~XA
j.~8A
D$PH
L;T$0|
[]A\A]A^A_
Y~!A
	G9L
l$xH
L$pA
t$XL
t$hG
t$`H
t$hE
t$`D
T$`L
L$XL
D$ L
D$ L
L$XL
L$@H
T$@H
N(tZ
N0t5
~8H9L$
|$@L
T$hL
L$`L
D$XL
\$ L
D$XL
L$`L
Lkt$
T$ L
l$ A
T$@L
x  S
x( S
x0 S
x8 S
x@ S
xH S
xP S
H9D$
				A
	G9L
t$ A
T$pL
\$@D
L$@H
				
T$ L
T$@L
L$@H
thrO
				fA
HkD$
				A
q(L9
l> H
t>0H
ATUH
[]A\
AWAVI
AUATUSH
X8H9
=H.@
=4.@
([]A\A]A^A_
H8H9
u7Lc
=>+@
=+,@
AWAVAUATUSH
([]A\A]A^A_
u E1
AUATUSH
Z[]A\A]
=C|@
AUATI
[]A\A]H
[]A\A]
AUATUSH
[]A\A]
AWAVAUATI
[]A\A]A^A_
[]A\A]A^A_
AUATI
M(H9
|1(H
|18H
|1HH
|1XH
[]A\A]
H;=q
H;=a
ATUI
AWAVI
AUATUS
([]A\A]A^A_
w@Ic
P0XH
AWAVAUATUSH
D$xH
L3|$
([]A\A]A^A_
l$xM
AUATUSH
[]A\A]
Hco0
 t[H
ATUI
[]A\
H= S
H= S
H= S
H;8u
ATUH
[]A\
=$d@
AVAUATUI
[]A\A]A^
51~G
AtFA
7t0H
YHI9
[]A\
t3ATI
AUATI
[]A\A]
AUATUSH
Z[]A\A]
AWAVAUATUSH
HcD$
l$PI
([]A\A]A^A_
HcL$
AWAVAUATUSH
~$_H
L;t$
H[]A\A]A^A_
I;T$
t$$H
L$(L
D$ H
tIM9
]A\A]A^A_
I9T$
t$ H
t$$H
L$8L
L$0L
T$(L
t$ L
T$(L
L$0H
I9T$
t$ H
t$$H
L$8L
L$0L
T$(L
t$ L
T$(L
L$0H
I9T$
t$ H
t$$H
L$0L
T$(L
t$ L
T$(H
AWAVAUATI
[]A\A]A^A_
-0vG
=1vG
dH34%(
AWAVA
AUATA
Z D;
Z D;
[]A\A]A^A_
r tu;F
B t_A;@
J tHA;A
J t1;A
ATUSH
[]A\
[]A\
ATU1
IHI9
[]A\
ATE1
/tqH
=(%G
[]A\
AWAVAUATUSH
D$(1
T$ M
E(M9
|00L
|0HL
L$ L
T$ L
t$ H
D$(dH3
8[]A\A]A^A_
H;C s.H
H;K 
AWAVAUATUSH
s(H9
|$$_
S(L9
[]A\A]A^A_
}$_L
|$%_
USQu
 u H
AVAUATUSH
[]A\A]A^
AVAUI
ATUH
O|OO:
startswiH
t$8H
T$0L
D$(dH
D$h1
L$ 1
D$  S
D$( S
l$5H
D$=th
|$ H
|$(H
t$(I
\$hdH3
p[]A\A]A^
L$(I
T$ H
t$(J
<#E1
T$ H
t$(L
AUATI
O|OO:
t$8H
D$h1
|$5H
T$(H
t$01
D$ L
\$(L
\$hdH3
x[]A\A]
D$81
D$8dH3
ATUSH
[]A\
=Ck?
p ;5
S tSA;B
H;E 
H;u 
H;E 
H;M 
AWAVAUATUSH
dH3<%(
[]A\A]A^A_
o8M9
ATUI
D$(1
T$ }YM
t$(dH34%(
0[]A\
ATUI
=elE
D$81
T$(H
|$(H
D$8dH3
AWAVAUATUSH
D$81
D$8dH3
H[]A\A]A^A_
L;K 
Hc}`H
L;k 
|$0H
H;k 
H;{ 
|$0H
|$0H
H;s 
H;C 
L;S 
L;S 
H;K 
L;[ 
L;k 
H;k 
H;C 
5<xE
L;s 
H;{ 
H;s 
L;K t&M
L$(H
T$ H
|$ H
|$(H
H;{ 
AVAUATUSH
A\A]A^
=il?
]A\A]A^
ATUSH
[]A\
H;J 
L;R t
H;J t
H;z 
H;r 
AUATUS1
[]A\A]
Y[]A\A]
AUATUSH
U H9
[]A\A]
U H9
AVAUI
ATUH
O|OO:
endswithI
\$8H
T$0L
D$(dH
D$h1
t$5H
L$ H
t$01
D$  S
D$( S
|$ H
|$(H
t$$I9
t$(I
L$hdH3
p[]A\A]A^
t$$L9
t$(I
t$ A
t$(A
t$0A
T$ H
t$(L
t$(H
AVAUATUI
[]A\A]A^
AUATI
([]A\A]
AVAUATUHc
4$Hc
[]A\A]A^
USAPH
AVAUATUSH
|$%I9
[]A\A]A^
=qWE
ATUI
X4[]A\
AUATI
X4Z[]A\A]
=LVE
=kAE
AUATUSH
D$(1
L$(L
|$ H
L$(dH3
8[]A\A]
D$@L
L$Ht7
)D$P
)L$`
)T$p
dH34%(
D$ A
ATUI
D$(1
t$ 1
T$ H
L$(dH3
0[]A\
t$ L
T$ H
T$ H
AUATUSH
T$0M
[]A\A]A
t"H=
[]A\A]A
T$0H
AUATUSH
([]A\A]
ATU1
IcT$
[]A\
ATUS
=#lG
[]A\
AUATUSR
X[]A\A]
=K1E
=ckG
4$H=
H;QP
I;@Puc
ATUH
,[]A\
AWAVI
AUATI
D$H1
D$@H
l$8H
H	D$
H	D$
H	D$
A:2I
4(E8T6
L$HdH3
X[]A\A]A^A_
0A:w$
A:w%
A:w&
A:w'
A:w(
A:w)
A:w*
A:w+
A8w,
A8w-
A8w.
A8w/
A8w0
A:w1
A8w2
A:w3
A:w4
D8!t-A
T$ H
D$(L;L$
T$ H
k H)
T$ H
D$(L
L;L$
AVAUATUS
F Mk
t	;O
(A9l$
[]A\A]A^
(A9l$
5u8E
5 8E
ATUI
[]A\
tYH#^
5W"E
AWAVH
AUAT
l$8I
l$(L
l$ H
|$0M
|$<I
d$@M
d$PI
T$hL
d$pH
d$xL
l$XM
|$`M
|$HI
[]A\A]A^A_
|$`H
|$HH
|$`H
l$(H
l$ H
|$0H
|$<H
d$@H
d$PH
T$hL
d$pH
d$xL
d$ r
T$hL
d$pH
ATUI
[]A\
AWAVI
AUATI
=B!?
[]A\A]A^A_
=Yl?
X(E;X,w&E
A9j$A
H+=_
AVAUATUI
E+D$
E+L$
U E+T$ E)
]$E+\$$E)
U(A+T$(D)
M,A+L$,D)
u0A+t$0H
]A\A]A^
[]A\A]A^1
E+D$
A+|$
M E+L$ E)
U$E+T$$E)
](E+\$(E)
U,A+T$,D)
E0A+D$0D)
AWAVAUATUSH
dH34%(
([]A\A]A^A_
=}T?
uqE1
t2USH
AWAVAUATUSH
=c`A
[]A\A]A^A_
ATUH
D$@1
T$(RH
L$8QL
L$HH
L$,H
\$(H
=GbA
5@bA
`H~H
D$(M
\$HH
t$0H
|$0D
L$ M
L$8dH3
@[]A\
=oL?
D$ H
D$(1
\$ H
\$(dH3
L$ H
AWAVI
AUATI
[]A\A]A^A_
vm;C
v_;C
vQ;C
vC;C
v5;C
v';C
ATUH
[]A\
T$ I
D$(1
|$ H
|+$x+H
\$(dH3
|+$A
ATUI
[]A\
AWAVAUATI
D$H1
D$ H
$(L9
t$ H
L$ D
\$(H
t$ H
|$(H+s
D$(H
\$HdH3
X[]A\A]A^A_
t$@I9
\u#H
|$ L
|$ E1
t$(M
	w6B
|$ A
T$8RH
T$(R
\$@ASH
L$@Q
|$(AWL
t$8AVH
t$hVH
|$xWH
\$(H
|$(H
|$ A
AWAVAUATUSH
H= S
([]A\A]A^A_
ATUH
[]A\
AWAVAUATUSH
D+$M
([]A\A]A^A_
L+$L
\;$H
 u	I
 u%I
H= S
<$I9
w$AUATUSH
L+$L
 u.M
urL9
[]A\A]A^
\+$C
<&L)
]A\A]A^
AWAVAUATUSH
D$X1
t$0L
l$@H
D$0H
$(I9
|$0L
T$8H
t$0H
|$8H+r
L$(H
t$ H
|$8H
\$XdH3
h[]A\A]A^A_
|$PL
uu*A
T$8L
L$0H)
D$HL+J
L$@PI
AVAUL
D$PAPI
t$(VL
|$HAWL
T$xARL
|$@H
\$8H
|$8H
d$(M
t$ M
D$0L
Nt4L
L$0M
|$0A
\$0H
;}tlM
}t\M
}tLM
}t<M
}t,M
T$0M
L$0A
|$0H
nu|H
L$0H
|$0I
L$0A
\$0I
|$0A
D$0M
T$0A
|$ H
tsHi
t_Hi
tKLi
t3Li
H35q
ATUI
ATUI
 []A\
d$ I
w)H9
AWAVH
AUATUSH
t$0H
|$HdH
|$HL
l$PM
L$0I
D\$0E
l$oH
\$@H
D$(H
T$0L
T$ M
|$hE
t$(H+4$H
D$xH
[]A\A]A^A_
D$8B
|$8H
|$ D
\$8B
\$8H
T$`H
AZA[H
|$Xw
T$8H
,$L9
l$ H
Hc|$8I
H),$H
L$tL
Hcl$tt
\$8L
D$8H
H9t$
D$8I
\$8A
T$8L
Hc|$8
T$8z
T$8M
l$ L
l$xI
|$xH
t$(L+4$K
T<dH
|$xL
L$8D
|$(H+<$H
t$xD
L$8L
|$@L
D$ H
d$8H
|$ H
t$ H
t$(H+4$H
|$ L
l$XH
\$0L
|$0I
T$xL
|$xI
t$HH
t$P1
|$xL
|$xI
|$xH
t$ H
d$0M
d$0M
l$(H
|$xJ
\=cH
\$xE
\$(H
t+$L
WAPE
AXAYH
T$`H
|$Xw
T$8H
|$ H
AUATUSH
L$ I
l$ L
[]A\A]
|$ L
l$ L
|$ H
l$ L
AUATUSAQ
n,Z[]A\A]
AVAUATUS
[]A\A]A^
AWAVH
AUATUSH
D&$A
[]A\A]A^A_
AUATI
([]A\A]
AVAUH
ATUSH
	t=A
I;\$
	~8L
AUATUSH
[]A\A]
AUATUSAQ
f4Z[]A\A]
AWAVAUATI
dH3<%(
([]A\A]A^A_
AUATUSH
[]A\A]
AUATA
AZ[]A\A]
AY[]A\A]
AWAVAUATI
[]A\A]A^A_
|<$@
	tc@
^w+H
AWAVH
AUATI
([]A\A]A^A_
m E1
AVAUI
ATUS
[]A\A]A^
d" I
AUATUSAQ
n4Z[]A\A]
AUATUSH
[]A\A]
AWAVI
AUATA
[]A\A]A^A_
}7H9
[]A\A]A^A_
ATUSH
[]A\
=4@?
5%vF
AWAVI
AUATM
uiA9
E;,$
[]A\A]A^A_
AUATI
=FpF
59pF
Q0ZL
[]A\A]
t$(H
T$0H
L$8L
D$@L
L$Ht7
)D$P
)L$`
)T$p
T$ H
ATUSH
[]A\
ATUH
[]A\
D$(1
L$ L
|$ H
L9T$ 
L$(dH3
5tl?
AWAVM
AUATI
[]A\A]A^A_
AVAUA
ATUH
D$@E1
[]A\A]A^
D$@1
AWAVI
AUATUSH
4$Hc
T$ A
|$PH
8[]A\A]A^A_
l$(L
T$$D;|$$|
L$ L
$E;9
ATUH
[]A\
5v_F
[]A\
AWAVAUATI
D$81
t$8dH34%(
H[]A\A]A^A_
L$0L
D$(H
L$ H
|$(H
H;D$ 
t$0M
|$(L
T$ M
L;d$ L
t$(E1
t$(M
L9d$ 
L$0I9
H;D$ 
T$ H
L$0H
T$(I
H+|$0H
H9l$0
\$0L
T$(K
L9d$0
AWAVI
AUATI
D$X1
i(E1
\$XdH3
h[]A\A]A^A_
-0EF
L$HH
T$PI
L$8H
T$@L
t$@H
t$8H
|$HL
t$HH
|$PL
l$PH
|$PL
D$HH
|$HH
t$8H
|$@H
|$@H
T$8I
|$8L
T$0M
D$ H
D$ H
\$(u
\$ L
\$ H
ATUSH
[]A\
AVAUATUI
\$ D
D$(D
T$,D
[]A\A]A^
L$(D
\$,D
L$(D
\$,D
5:	?
5g?F
AWAVAUATI
L$0L
l$(M
|$(H
t$ H
t$(H
dH34%(
[]A\A]A^A_
U0f.
-)fD
=AZ>
d$@H
t$ H
=>X>
ATUH
|tH9
(x]M
[]A\
AUATUSH
D$(1
t$ H9
\$ 1
\$ H
\$ H
\$ H
\$ H
\$ H
\$ H
\$ L
\$ H
\$ H
\$ H
\$ H
\$ H
\$ L
\$ H
\$ H
\$ H
\$ H
\$ I
\$ H
\$ H
\$ H
\$ H
\$ H
\$ I
\$ H
\$ H
\$ H
\$ H
\$ H
t$(dH34%(
8[]A\A]
\$ I9
=KCD
T$ 1
D$ H
AUATI
D$(1
xfH9k
t$ L
\$ 1
L$(dH3
8[]A\A]
T$ H
l$ H;l$
l$ H
H+t$
L9d$
l$ M
l$ L
l$ M
L$ L
{(H)
H+t$
l$ H;l$
L$ H
H9|$
|$ H
l$(M
ATUH
u3H=
[]A\
O|OO:
find/rfiI
nd/indexH
\$HH
T$@H
/rindex
D$(1
t$EL
D$MH
L$0L
D$8H
t$@1
D$0 S
D$8 S
|$0H
|$8H
D$ H
\$(L
|$HH
|$@H
L$PH
T$@M
}(I9
l$HH
L$PL
|$8H
D$ H
\$(L
|$HH
|$@H
L$PH
t$@H
ATUI
L$0H
T$ M
|$(L9
[]A\
L$0H
T$ H
|$(H9
AUATI
t$8H
O|OO:
D$h1
T$0H
D$  S
D$( S
D$(H
L$ H
t$01
|$ H
|$(H
\$hdH3
x[]A\A]
AUAT
[]A\A]
ATUI
nd/indexI
/rindex
find/rfiH
T$(H
D$X1
O|OO:
D$ 1
t$-L
D$5H
t$ 1
\$XdH3
`[]A\
5pDD
ATUSH
[]A\
ATUSH
D$81
D$ 1
\$ H
D$0f
L$8dH3
@[]A\
D$0f
H9l$0
T$0H
t$(H
t$0H
t$0H
AWAVAUATUSH
([]A\A]A^A_
4$Lc
0uFE
0u7E
0u(E
L$$1
 u?A
AUATI
[]A\A]
D$(1
L$(dH3
AWAV
AUATUSH
L$<H
T$0H
rdH+71
D$@H
}t~L9
{tfA
}t`L9
{tHA
}tBL9
{t*A
}t$L9
{u	@
L9t$
}$I)
t$%H
[]A\A]A^A_
|$`1
5u'D
t=<:t9I9
:t#H9
|$`H
|$ H
L$`I
4rI9
D$0M
T$XI
|$PH
|$PL
\$HH
L$XH
{u	E
L9t$
T$(H
T$<H
|$`M
t$(H
t$(I
L$`E
|$ r
|$`H
d$ L
T$0M
t$@H
T$pH
L$xH9L$p
L$xL9L$p
T$0H
L$pL
D$xtCH
D$HL
T$(H
D$(L
T$ L
D$HI
|$ H
ATUH
tE[]A\
D$@H
[]A\
[]A\
=KY>
=1Y>
AWAVAUATUSH
T$(1
L$ Q
L$0L
|$(L
d$0M
l$ H
D$$L
D$8M
u	L9
L$xI
D$HL
|$PH
T$XI
d$`L
l$PH
d$0L
T$`M
t$`I
T$`H
YHLcl$xL
d$HH
D$PL)
T$@M)
l$hH
\$pH
[]A\A]A^A_
P(A;P,wf
t$`M
t$`H
L$`H
QHLcl$xL
d$HH
D$PL)
D$@L)
E;a$A
d$0L
d$0L
d$PL
t$ AVL
L$0L
|$(L
d$0M
l$@1
l$ I
t$$M
t$8M
=OJ>
D$x1
L$xdH3
AWAVAUATI
u	I9
 u-H
dH34%(
([]A\A]A^A_
AWAVAUATUSH
D$H1
L$HdH3
X[]A\A]A^A_
D$8<s
d$0L9
l$ M
k$M)
AWAVAUATI
MHH9
L$@H
T$@H
I9F 
8[]A\A]A^A_
L9<$
A;D$
L9,$
L9,$
MHH9
H9<$v
'E;f8
A;v8
E;f8
A;v8
|fL9
E;f8
|8H9
A;v8
L9<$v A
F8L)
t$@H
l$@L
t$@H
t$(I
D$0L
t	M9
{@H9
L;}H
H;}H
H;EH
)E8(
M9t$ 
AWAVAUATUSH
([]A\A]A^A_
ATUI
[]A\
AWAVAUATUSH
[]A\A]A^A_
AWAVI
AUATI
H[]A\A]A^A_
L$4L
L$(uDD
T$0L
T$0L
\$ L
L$4D
M9<$r
AWAVI
AUATI
D$81
T$(R
L$8L
t$0H
L$8dH3
H[]A\A]A^A_
=V%>
AWAV
AUATA
[]A\A]A^A_
,.urH
ATUS
PHLcK8L
H9{H|
^@[H
VHLcK8L
L9cH|
z ;=
J Mk
D$@1
D$(H
D$0 S
D$( S
L$8L
\$ H
|$(H
H=0<J
|$0H
H=0<J
L$ H
T$(L
L$8dH3
|$(H
|$(H
H=0<J
\$ H
|$(H
|$0L
H=0<J
L$ H
T$(L
\$ H
T$ H
\$ H
AWAVI
AUATI
[]A\A]A^A_
AWAVI
AUATI
D$H1
d$ L
\$HdH3
X[]A\A]A^A_
d$ L
d$ L
AVAUATUL
D$81
\$8dH3
@[]A\A]A^
AWAVI
AUAT
D$81
D$ I
D$8dH3
[]A\A]A^A_
L$8dH3
H[]A\A]A^A_
t$(H
ATUI
[]A\
AUATI
X,Z[]A\A]
ATUH
[]A\
AUATA
[]A\A]
ATUI
[]A\
ATUI
[]A\
ATUH
[]A\
ATUH
^_u#H
 []A\
L$ L
AWAVAUATE1
[]A\A]A^A_
@(H9
AWAVI
AUATUSH
D$(1
\$ H
L$(dH3
8[]A\A]A^A_
AVAUATUI
-Q4E
[]A\A]A^
ATUH
x8I9
[]A\
D$81
H= S
D$8dH3
ATUI
t Hc
[]A\
AWAVAUATUSH
[]A\A]A^A_L
m`L)
[]A\A]A^A_
@uTH
H= S
t3ATI
AWAVAUATUSH
-'mE
Hc|$
[]A\A]A^A_
ATUH
[]A\
D$p1
T$0R
L$PQ
L$`L
|$0H
\$HH
T$(L
D$H1
L;L$(
t$@H
L$hdH3
L$HL
t$@H
AWAVI
AUATUSH
L$(H
T$ dH
T$pH
T$pH
t$ M
\$(H
[]A\A]A^A_
|$p1
t4nH
t$pE
D$81
D$(H
L$(H
|$(L
t$8dH34%(
D$(1
AUATUSH
D$h1
L$(QH
\$8SL
L$HL
D$PH
L$:H
t$ 1
|$@H
|$@PK
t$[D
L$]H
|$ZD
T$\H
t$0M
l$ H9
t$ 1
T$0H
H9D$0
L$0L
\$hdH3
x[]A\A]
l$0A
ATUS
[]A\
5ppE
5_oE
54oE
5	oE
5]nE
52nE
5[mE
50mE
5_lE
5:lE
5ljE
5AjE
5jiE
5?iE
5hhE
5=hE
5wfE
56fE
5seE
52eE
5RdE
5-dE
5McE
5lbE
5+bE
5haE
5'aE
5d`E
5#`E
5a^E
5 ^E
5\\E
5X[E
5>YE
AWAVI
AUATHc
[]A\A]A^A_
t$(H
T$0H
L$8L
D$@L
T$ H
AVAUI
ATUHc
[]A\A]A^
AWAVA
AUATI
[]A\A]A^A_
AUATI
[]A\A]
ATUH
 []A\
AWAVI
AUATI
D$(1
T$ H
\$ M
e H)
L$(dH3
8[]A\A]A^A_
x?UH
AVAUATUSH
[]A\A]A^
AWAVAUATUSH
=)|C
([]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
AWAVAUATUSH
D$X1
D$HH
L$8H
T$@H
l$@H
t$PL
|$8L
T$HH
l$PL
4 D8\5
\$XdH3
h[]A\A]A^A_
T$ L;D$
T$ H
<$L;D$
L;|$
\$ E
D$(I
L$ L
l$(I
D$(I
T$ L
t$(I
4$H)
4$H)
4$H)
4$H)
4$L)
\$ N
k$E1
4$E1
T$P1
|$8L
t$PH
l$PL
|$0H
|$HH
L$PL
T$0H
4#L)
AVAUATUSH
 []A\A]A^
AUATI
[]A\A]
AWAVAUATUSH
T$0H
|:?H
dH3<%(
[]A\A]A^A_
ATUH
C0uwH
[]A\
D$ 1
AVAUI
ATUI
D$81
H= S
=XFC
D$8dH3
@[]A\A]A^
H= S
H= S
H= S
|$ H
D$x1
<$ S
t$ H
t$ H
\$xdH3
Z[]H
AWAVAUATI
D$h1
|$(H
T$(H
D$@L
D$@H
t$(L
l$(w
\$HH
t$@H+s
l$8H
L$0M
D$HH
t$hdH34%(
x[]A\A]A^A_
H= S
L$@M
T$@E
T$(H
D$HH
|$@M)
l$`I
l$XH+x
|$PR
l$HAUH
L$`Q
t$`VL
D$HAPM
L$XAQI
|$HH
L$HL
|$(L+i
|$`H
|$XI
l$PPH
D$HPH
t$`VL
D$`APM
L$HAQI
T$XARL
|$HH
D$@H
T$(H
\$8H
d$0M
|$HM
|$HH
|$0L
AWAVAUATUSH
t$XH
T$`H
L$hL
D$pL
L$xt@
D$H1
T$PH
T$ H
D$ H
t$0H
|$8L
l$0L
C u>H
L$HdH3
[]A\A]A^A_
t$0H
l$0L
AUATUSH
[]A\A]
AWAVI
AUATH
O|OO:
endswithI
\$HH
T$@L
D$8dH
D$x1
D$(1
t$EH
L$0H
t$@1
D$0 S
D$8 S
|$0H
|$8H
l$ L
|$(L
t$xdH34%(
[]A\A]A^A_
l$ L
|$(L
x5L)
$L;k
ATUS
[]A\A]
R0ZL
[]A\A]
AUATI
D$H1
t$8H9
t$8L
T$8D
D$@H
t$8H+p
|$HdH3<%(
X[]A\A]
l$@H+u
D$@t3H
t$8J
\$@H
|$@H
t$@L)
L$0H
L$(H
L$8H+N
L$ P
|$@WH
D$0APM
L$XAQM
T$(ARL
\$8ASH
T$XR
D$hPH
ATUH
StkH
[]A\
AWAVI
AUATH
D$(1
D$$H
L$(dH3
8[]A\A]A^A_
L;l$
ATUSH
[]A\
AWAVA
AUATUSH
tsE1
5l3>
[]A\A]A^A_
AUATA
[]A\A]
ATUI
[]A\
AVAUI
ATUI
]A\A]A^
AVAUH
[]A\A]A^
T$ H
H9t$0
@( S
AWAV
AUATUSH
UUUUUUU
([]A\A]A^A_
>t1A
D$(1
T$ H
L$ H
t$(dH34%(
ATUH
[]A\
AUATI
<pt.H
Z[]A\A]
AWAVAUATUSH
[]A\A]A^A_
rFH)
x$-L
H+\$
\$(E1
x$-H
t$@I
H+l$
L$ D
|$0H
|$ f
L+D$
D$0+H
\$%L
l$@A
\6+D
\$0H
\$(L
L$(L)
L$PL
D$PM
t$N@
|$Ot
D$PH
T$0H
t$OH
|$NX
\$xO
T$pG
t$xH
|$pH
t$xH
|$pH)
|$NX
H+\$
H+\$
L+l$
<=tq~H<>u'I
t$OH
L$(1
L$(E1
\$(E1
D$0 
t$@H
|$NXL
D$ t
H;|$
D$PI
\$XL
\$pM
T$@I9
t$ H)
|$xH
H+l$0H+\$ L
T$@L
D$PL
\$XH
H+\$
	vkI9
<-v&
<0utE
	v"Hc
D$H1
D$FA
t$FH)
\$HdH3
ATUM)
\$(H
0=ukL
[]A\
AWAVE
AUATI
l$PD
t$XH
s0PL
cHYE
[]A\A]A^A_
AUATI
;X[]A\A]
 []A\
ATUSH
|$(L
t$ 1
umI9
[]A\
D$ H
T$(I
l$(H
L$(H
AVUSH
D$81
l$,H
D$0L
l$.H
t$0H9
D$8dH3
@[]A^
t$0H9t$
D$0H
l$,H
l$.H
H;|$0u
H;l$0t4
AWAVAUATUSH
D$h1
L+D$
D$<A
D;d$
d$<A
D$0D
L$HE
D$0H
D$hdH3
x[]A\A]A^A_
d$ A
D9t$
D$HE
\$0fE
	wzDk
	w^D
	wBDk
	w%k
D;d$
\$0f
H;L$
l$<D
L$ A
|$ 	D
\$@A
d$LD
t$@H
l$XD
D$8A
|$(E)
l$LA
T$PI
Mcl$
\$@A
|$PH
IcD$
IcT$
t$`L
t$dL
A+D$
+D$d
^T$PfE
\$0H
u	fD
|$PE
X|$0fD
|$0D
D9\$ 
t$0H
D$ H
IcL$
9|$ 
t$8E
YD$0fD
Icl$
D9l$ 
d$<D
|$@H
D9t$
L$ McO
T$(I
D9t$
D9d$ 
|$ A
D9\$ H
D$0I
Ic|$
9D9>
D+l$8A
l$XD
l$LD
|$@A
t$(H
|$@A
Ict$
DD$0H
D$0L
D$0Lc
l$0I
t$0A
\$0Ic~
Icl$
t$ M
D$ D
L$ D
D$8j
d$0A
+l$8
D9t$
T$(I
Lcl$(K
D+t$
D;t$<
D+d$
l$<Ic
T$ H
LcD$
Hc\$
D$0I
9D$ 
T$0I
XL$0fD
T$0H
\$PI	
L$PL
X|$0fL
|$0H
|$@A
Ic\$
t$0H
T$<9T$
D;D$ 
t$0I
Xt$0f
|$0I
+T$8
d$0M
\$@Mcn
Mct$
Mct$
D9T$ 
|$@A
t$@IcF
McD$
|$@A
|$@Mcb
Mct$
ATUH
[]A\
AWAVAUATUSH
[]A\A]A^A_
ATUH
[]A\
ATUSH
[]A\
AWAVAUATUSH
|$@1
\$@I
 vCH
dH34%(
[]A\A]A^A_
l$(L
l$,I
t$ I
l$(D
AVAUATUS|hH
[]A\A]A^
_8dH
T$AL
dH34%(
AVAUA
ATUH
C(L9
[]A\A]A^
ATUH
AVAUATUH
[]A\A]A^
AWAVAUATUSH
[]A\A]A^A_
AVAUI
ATUI
I;l$
AWAV
AUATI
t$ H
[]A\A]A^A_
AWAVI
AUATUSH
T$(1
|$(H
d$ L
|$ H
H;D$
|$ H
H;D$
T$01
t$0H
L$@H
t$ H
dH34%(
[]A\A]A^A_
ATUH
t~J9\
twJ9\
tpJ9\
tiJ9\
tbJ9\
t[J9\
[]A\
D$h1
H;s |OH
L$hdH3
AWAVAUATUSH
t$ 1
D$ I
|$0H
l$ H
L9D$(rXL
ATUSH
ATUH
t#Hk
[]A\
D$ 1
5bW;
ATUI
[]A\
ATUI
[]A\
T$0H
L$8L
D$@L
L$Ht7
)D$P
)L$`
)T$p
L$ H
ATU1
%?f?
%vh?
[]A\
D$(1
|$(dH3<%(
AWAVI
AUATUSH
[]A\A]A^A_
D$(1
T$ H
L$ H
t$(dH34%(
|$ H
` []A\
AWAVM
AUATM
D$(dH
 u"I
5@?;
Hc|$
D$[t
t$0I
\$8H
T$HH
L$PH
|$HL
t$@H
L$\D
\$HA
|$8L
l$ L
[]A\A]A^A_
H9D$ 
<$E1
l$ L
=rQD
ATUI
X4[]A\
D$(1
T$ H
L$ H
t$(dH34%(
ATUSH
 []A\
[]A\
AWAVI
AUATA
D$h1
D$ H
L$XH
H9t$
l$PH
|$HM
D$XH
|$hdH3<%(
x[]A\A]A^A_
v^E9a
vOE9a
v@E9a
v1E9a
v"E9a
|$`D
T$(M)
WAQAUL
\$`ASH
L$8L
L$ H
T$@H
|$0H
t$XL
H9\$
l$`H
T$(L
T$(I
L$(M
t$XI
	v7A
H9T$
t$ L)
t$0I
|$XI
AXAYL
|$XM
|$XH
t$PH
\$HM
|$XH
L$(H
L$XL
\$(K
l)$M
|$XH
L$8D
T$4L
D$(H
D$XL
D$(D
T$4H
|$HH
|$HL
T$01
,$RM
t$ H
t$0L
AUATI
L$ L
T$(H
t$ H
|$ D
[]A\A]
rt.A
T$0D
AWAVAUATUSH
D$PB
|$HH
T$HD
d8$L9
D$PB
\$HI
T$HF
D$PB
D>8A
d&8E
L$HI
T$HF
D$PM
|$HH
T$HD
d8$L9
t$PH
t$HI9v
L$8H
L$@M
D$PH
[]A\A]A^A_
tqH= S
T$HL
T$HL
T$PE
tNIc
L$XI
t$PVH
|$8H
D$@H
L$HH
T$PL
|$(A
L;l$
L$HH
T$PH
L$HH
T$PH
L$HH
T$PH
L;l$
L$HH
T$PH
L$HH
T$PL
T$PH
L$HL
L$HH
T$PL
L;l$
|$ L
d$XM
|$ L
T$HL
L$PL
T$HD
|$PH9
D$HH
D$PI
T$HF
D$HE1
\$PH
|$PH
d$8M
|$8H
|$@M
<$L;$$
l$`D
L$HH
T$PL
L$HM
t$PL
|$8H
L$HH
T$PL
D$(1
T$ H
L$ H
t$(dH34%(
|$ H
AUATI
L$ L
teLc
([]A\A]
AUATUSH
L$(L
([]A\A]
AWAVAUATI
D$H1
D$@ S
L$@1
\$,SH
l$8UL
D$DAPL
L$PAQL
T$\ARL
L$hL
\$8A
l$0A
t$,A
|$(A
D$@H= S
t$HdH34%(
X[]A\A]A^A_
D$,APL
L$8AQL
T$DARL
\$PASH
D$\P1
L$hL
\$8A
l$0A
t$,A
|$(A
L$@I
l$@L
L$@I
T$@L
AUATUSH
[]A\A]
H= S
L9$L
5nTD
dH34%(
ATUSH
[]A\
AWAVAUATUSH
D$x1
\$ L
I;l$
L$.f
T$ 1
L94$
H94$
P0Hc
H94$
|$ I
|$xdH3<%(
[]A\A]A^A_
T$ I
AUATUSH
H9T$
tRH)
[]A\A]
AWAVAUATA
Z[]A\A]A^A_
AUATUSH
D$(1
l$`L
D$xH
L$ 1
T$ H
D$ H
L$(dH3
8[]A\A]
AWAVA
AUATE
|$X S
\$PH
|$X S
[]A\A]A^A_
L$XI
D$(1
T$ H
|$ H
|$ H
L$ M
L$(dH3
D$ H
|$ H
D$ u
D$(1
T$ H
L$ H
t$(dH34%(
AWAVAUATUSH
[]A\A]A^A_
AWAV1
AUATH
[]A\A]A^A_
PAQ1
H;_(}rH
ATUI
H= S
[]A\
AVAUA
t=fD
[]A\A]A^
ATUSH
Y(ufL
[]A\
[]A\
[]A\
D$81
T$(R
L$8L
|$0 S
|$( S
|$  S
L$0H
t$(H
|$ H
|$0L
D$(H
L$ H
L$8dH3
WAQL
~*E1
ATUSH
[]A\
;ZYH
AWAVAUATUSH
D$(1
t$ H
|$ H
L$(dH3
8[]A\A]A^A_
ATUSH
dH3<%(
[]A\
@$uH
'tdH
't2H
't(H
'uYE1
ATUSH
D$(1
t$ H
T$ H
T$ L
\$(dH3
0[]A\
AUATI
AWAVAUATA
<$D9,
\$8H
\$8H
l$DH
D$0H
T$(I
E	I9
\$8D
l$DI9
T$ L
h[]A\A]A^A_
\$8D
@w5A
 t'H
=m <
T$(H
[]A\
=Q"B
ATUSH
D$(1
L$(dH3
0[]A\
H;=T
H;=O
HcL$
Hc|$
S@H+SHH
AVAUH
ATUS
H= S
tkH=
H= S
[]A\A]A^
AVAUH
L$(A
dH34%(
[]A\A]A^
ATUH
[]A\
AWAVHc
AUATUSH
_XdH
T$81
D$,L
D$ L
|$0L
|$0L
D$0H
t$ L
X$L)
H;4$t
D$0H
T$8dH3
H[]A\A]A^A_
ATUSH
[]A\
V0Hc
ATUA
+[]A\
AWAVAUATI
T$81
T$(L
[]A\A]A^A_
T$0H
d$8M
L9d$
|$0L
\$(H
|$(H
t$@H
C%L9
S&L9
S'H9
u'Q1
dH3<%(
H9l$
ATUH
[]A\
AUATUSQH
Z[]A\A]
H9\$
AVAUATUSH
5t	B
 []A\A]A^
D$x1
\$xdH3
AUATUSH
D$(1
S8H;P
H9K@
t$$L
t$(dH34%(
8[]A\A]
AWAVH
AUATH
D$0H
T$@R
L$PQH
\$`SH
l$TUL
L$xL
l$PH
T$H1
$shB
L$pE
D$(H
[]A\A]A^A_
T$hH
t$`H
T$hH
t$`I
D$prL
L$@L
D$HH
AWAVAUATUSH
D$x1
d$ 1
L$xdH3
[]A\A]A^A_
AVAUATUS
f4[]A\A]A^
AVAUATUSH
t/$A
[]A\A]A^
AUATUSH
H9l$
([]A\A]
AVAU
ATUI
[]A\A]A^
AUATUSH
=3)<
[]A\A]
X[]A\A]
AUATUSH
L$hL
D$pL
L$xt@
D$H1
D$P1
D$ H
\$ L
L$0L
T$8L
t$0H
L$HdH3
[]A\A]
t$0H
=0/<
AUATI
ttL;$$~
[]A\A]
=|,<
ATUI
[]A\
D$(1
T$(dH3
AUATUSH
T$0H
L$8L
D$@L
L$Ht7
)D$P
)L$`
)T$p
|$0A
[]A\A]
t$ D
l$ A
AWAVAUATI
L;v tIH
L;v(t9H
L;v0t)H
L;v8t
[]A\A]A^A_
uCH= e
ATUSH
D$(1
L$ L
t$ H
L$(dH3
0[]A\
t$ H9
x?H9s
[]A\
AVE1
AUATA
xe[H
]A\A]A^
]A\A]A^
[]A\A]A^H
ATUS
[]A\
=a)<
ATUI
t$`H
|$`H
[]A\
AVAUATUI
H= S
 []A\A]A^
|$h1
D$pH
l$PH
I+l$@H9
T$xH
L$xI9L$P}JL
t$@I
t$8I
\$@H
|$hI
|$h1
t$PI
H= S
D$0I
AWAVI
AUATUSH
H+K@I
x	M9
tBH)
[]A\A]A^A_
AVAUATUSH
D$$H
D$PT
D$`C
D$h>
T$0R
L$@QL
L$PL
D$XH
T$ H
|$0H
|$ H
T$ M
|$81
|$81
t$(L
D$8H
|$8H
L$xdH3
[]A\A]A^
|$81
t$(L
D$(F
C(t@H
]HZ[]
ATU1
 []A\
AUATI
D$h1
D$0H
L$0I
L$0H
L$hdH3
x[]A\A]
AUATUSH
[]A\A]
AUATI
[]A\A]
D$ 1
ZYt9H
t7H=
AUATUSH
D$h1
L$hdH3
x[]A\A]
ATUE1
[]A\
AWAVAUATI
I9l$
R0I9l$
([]A\A]A^A_
ATUS
uo@:|$
uR@:|$
uF@:|$
u:@:|$
u.@:|$
@:|$
@:<$
dH34%(
[]A\
CptnH
D$81
D$(H
L$ H
T$0H
H9D$ 
|$(H
L$0D
H;\$ |
\$8dH3
AUATI
[]A\A]
AWAVI
AUATUSH
L$(1
Hc\$
L$(dH3
8[]A\A]A^A_
l$ H
Hc|$
l$ I
%lnC
-`nC
5UnC
%FnC
-WO:
==D<
\$ I
T$ L
L9l$
t$ H
T$ L
D$81
D$ X
D$(t
T$8dH3
AWAVAUATI
l$ AUL
l$(H
C(ptA
Ch S
Cp S
d$ L
S I9R(
=9gC
Hcl$
%NfC
Hcl$
[]A\A]A^A_
t\E1
AVAUATUH
5J9<
[]A\A]A^
ATUH
[]A\
ATU1
s u%H
{ []A\
ATUI
[]A\
AWAVAUATI
[]A\A]A^A_
AWAVI
AUATI
[]A\A]A^A_
AVAULc
[]A\A]A^
=Yk;
ATUSL
[]A\
AVAUH
ATUH
D$x1
ua<	t
tdH9
u	L9
T$xdH3
[]A\A]A^
G|Hc
ATUH
D$x1
\$ L
L$xdH3
[]A\
D$(1
|$ f
zIuG
d$ f
L$(dH3
t.USH
D$(1
|$ f
zIuG
d$ f
L$(dH3
=+x;
D$(1
L$(L
L$(dH3
ATUSH
 []A\
D$(1
t$(dH34%(
ATUI
t=[L
tE[L
[]A\
AUAT
[]A\A]
ATUSH
 []A\
AUATI
D$81
T$ H
D$8dH3
H[]A\A]
AWAVI
AUATH
=PtA
[]A\A]A^A_
dH34%(
AWAV1
AUATUSH
[]A\A]A^A_
AUATUSH
t_Hc
[]A\A]
ATUSH
[]A\
AWAVAUATI
D$(1
t$$I
|$(dH3<%(
8[]A\A]A^A_
D$(1
L$(dH3
ATUSH
D$h1
H;S(wmH
C H9
H;S H
L$hdH3
p[]A\
AUAT
([]A\A]
D$P1
D$0e
D$(H
L$HdH3
ATUSH
r)H9
[]A\
D$(1
L$(dH3
AUATI
USRH
X[]A\A]
e@I9
D$81
L$0H
5"AC
d$0H
\d$(H
L$8dH3
t$(H
d$0H
-D@C
\d$(H
d$0ttL
t$0H
AVAUATUSH
5O}C
 []A\A]A^
AWAVI
AUATUSH
D$81
t$(L
L$0H
\$(M
|$(H
D$(H
D$(H
L$8dH3
H[]A\A]A^A_
\$(M
|$(H
t$0M
L;d$
H9T$
|$(H
t$(H
l$(H
D$(t
AVAUATUSH
D$81
$uND
%'8C
-R6C
.$$v
t$8dH34%(
@[]A\A]A^
<$E1
.,$A
u(HcD$
HcT$,
5iPA
ATUSH
|$ H
[]A\
AVAUATUSH
5@oC
dH34%(
 []A\A]A^
5OnC
S@H)
u	[H
D$(1
D$ H
Yd$ H
t$(dH34%(
Yd$ H
t$ H
-*6A
D$81
L$0H
l$0H
^l$(H
L$8dH3
t$0H
.d$(z
5W'C
=L'C
l$0H
-$'C
^l$(H
l$0t\L
t$(H
tKUSH
D$(1
\$(dH3
AWAVAUATUSH
L$ H
L$ D
L$ H
([]A\A]A^A_
tYH9
L$ H
D$x1
t$ H
t$ H
\$xdH3
AWAVA
AUAT
EUSH
D$81
l$$L
D$0H
L$,H
T$(1
l$&H
l$&Hcl$(H
L$0E
\$8dH3
H[]A\A]A^A_
l$$L
D$0H
L$,H
l$&H
l$&Hcl$(H
L$0E
|$0D
|$0D
l$$L
D$0H
L$,H
|$&H
l$&Hcl$(H
L$0E
L+|$
L+\$
AWfH
AVAUATUSH
t$(dH
T$`L
D$Py
l$0t
)T$ A)
t$ D
t;Hck
l$HL
T$@L
\$XH
L$hH
L$pL
d$xL
l$ M
D$(H
L;\$X
L;\$hA
B I)
L;\$prvE
J$I)
L;\$xrRI
R(L)
^(r7H
L$8E
L;d$ A
L;,$
McL$
L;,$A
T$ Lcc
l$PL
t$ H
\$`A
D$@M
[]A\A]A^A_
tjrUL
d$ E1
L$(Ic
D$@H
|$(H
t$0H
D$8D
|$ L
McT$
|$ H
L;\$(
L;\$0E
G L)
L;\$8ruA
O(H)
F,H)
Lc\$
D$0A
\$ tVfD
L$ L
\$ f
$Hcq
tRMcw
t2IcF
L;d$@
\$ A
H;\$ @
D$`H
t$PH
[]A\A]A^A_
d$`H
t$PH
[]A\A]A^A_
$McK
|$(Lc
l$0fD
|$ H
l$ L
8A9}
L$ D
L$ D
t$hL
D$0I
|$ fE
\$(H
D$@A
D$ D
L$@L
McT$
|$ H
H;T$@u'L
d$HH
=H-?
t$PH
[]A\A]A^A_
P	t'L
,$[]A\
t>I9
l2$9,
uZL)
D$(1
8tOH
t$(dH34%(
ATUS
[]A\1
AWAVAUATUSH
|$(H
D$X1
D$L 
L$(H
D$ L
L9|$
t$ H
|$PL
l$(H
D$PH
L$XdH3
h[]A\A]A^A_
L9|$
D$(H
t$PM
|$PL
T$01
|$PH
T$8L
L$0L
\$PH
L$0L
T$8I
t$ H
L;|$
t$ H
l$LH
H9CH
AWAVAUATUSH
H9CH
[]A\A]A^A_
[]A\A]A^A_
God A red nugget A fat egg under a dog
s(E1
[]A\A]A^A_H
AUATUSH
~;Hk{
Z[]A\A]
[]A\A]H
APx9H;wHH
AUATI
I;\$
P0ZH
[]A\A]
x	H9
ATUH
LcT$
L$$E1
	tmL9
dH3<%(
[]A\
Lc\$
t8L9
d$XH
=T$;
AWAVAUATUSH
D$81
L$8dH3
H[]A\A]A^A_
Hct$
H;D$(
ATUSH
[]A\
D$(1
D$ z
^l$ H
t$(dH34%(
t$ H
d$ f
D$(1
|$(dH3<%(
t$ H
|$ H
t$ H
*\$ 
ATUI
[]A\
D$(1
d$ A
Xl$ H
t$(dH34%(
D$ D
Xl$ H
t$ H
AVAUATULc
D$81
~_H;B
tOH;B 
t?H;B(
t/H;B0
H;B8
\$8dH3
@[]A\A]A^
tnL9
AUATUSH
[]A\A]
[]A\A]
E0AX[]A\A]
C0AY[]A\A]
D$h1
L$`H
l$`f
T$@f
t$`H
t$hdH34%(
l$`f
d$(fD
d$0fA
l$`A
l$Hf
T$PfD
=6d;
D$`f
l$`z
AWAVAUATUSH
[]A\A]A^A_
A0H=
4$thH
xHE1
D$8%
uIPj
L$ A
t$(H
AWAV1
AUAT
D$81
D$ H
|$ H
|$(I
t$0H
JpL9
X]H3
X]H3
X]H3
X]H3
X]H3
X]H3
X]H3
|$(H
t$(L
L$0H
|$(L
IpL9
^pL9
M9X t:H
M9X(t*H
M9X0t
T$0L
\$8dH3
H[]A\A]A^A_
t$0H
|$(L
T$0I
H9l$
t$0L
\$(H
|$(L
|$0H
|$0H
ATUI
[]A\
AVAUI
ATUI
[]A\A]A^
ATUH
D$h1
Th$H
<+H9
o-c=
o5fN
|$TE
lD4E
dt4A
pW<	E
@0<	D
@W<	D
p0<	D
xW<	E
@W<	D
p0<	D
xW<	E
@W<	D
L$hdH3
p[]A\
HW<	E
HW<	E
pW<	A
AUATI
tex:M
[]A\A]
[]A\A]
ATUSH
[]A\
AWAVAUATUSH
4,I9
W A#U H
LcT$
4"M9
[]A\A]A^A_
A0H=
AWAVA
AUATI
LcL$
<)I9
\$ E#] H
Y t/A
T$$A#U$H
[]A\A]A^A_
D3|$
|tFA
|$ A
T$$E
T$(M
T$ A3U 
oP f
oX0f
[0tlI
o`@f
c@tVI
ohPf
kPt@I
op`f
s`t*E1
AWAVAUATUSH
T$ dH
D$(1
\$ L
T$ L
|$(dH3<%(
8[]A\A]A^A_
=x{@
T$ 1
T$ H
|$ H
ATUH
[]A\
ATUI
[]A\
u SH
AWAVH
AUAT
D$H1
L$0L
l$0I
L$0H
l$8H
L;,$
L$HdH3
X[]A\A]A^A_
L;,$}
|$8H
H9l$
<$ S
|$@L
|$@H
|$8H
L$ L
l$(L9<$
|$(L
L$@A
\$ L9\$
t$@J
l$8L
4$L9t$
t$@D
D.$H
|$@H
$*L;d$
$}/L
\$@I
|+$L
|$@L
AWAVAUATUSH
H= S
<>L)
([]A\A]A^A_
x=H;w
ATUI
[]A\
ATUSH
=<^B
5/^B
[]A\
AVAUATUH
[]A\A]A^
AWAVE
AUATA
tyIc
L$,AQD
T$(A
[]A\A]A^A_
St)H
AWAV
AUATI
D$(P1
L$(L
t$ H
t$8H
|$01
l$@M
t$PE1
H+D$8Lcd$hH
|$(H
T$`H
[]A\A]A^A_
L$@L
|$0H
5	b@
D$@H;D$0
|$8LcD$hH)
|$(H
T$(H
|$01
T$(H
|$01
T$(H
|$01
M;|$
l$0I
L$HL9
HcT$hH
AVAU
ATUSH
D$(1
D$ H
D$ I
l$ L
\$(dH3
0[]A\A]A^
AWAVAUATE1
|$(H
D$0dH
d$ I
%u\A
,&L9
|$HL
t$ H
L$HH
D$HI
|$HH
dH34%(
[]A\A]A^A_
D$$M
=}P:
=u-;
ATUSH
|$	H
dH3<%(
 []A\
AUATI
l$ H
D$X1
|$$;
|$ =
L$<A
T$@A
T$XdH3
h[]A\A]
RAPH
AQVL
dH34%(
T$0H
L$8L
D$@L
L$Ht7
)D$P
)L$`
)T$p
AWAVAUATUSH
T$Xv
l$ I
t$`H
L$@L
d$(M
sHH9
d$ L)
I;O 
L;d$
T$@H
t$HL
D$PA
\$8D
L$0L
T$ D
L$0L
D$0H
H+D$ 
L;d$0
H+D$ 
[]A\A]A^A_
H;T$
t$ 1
L;D$
\$PD
L$HL
T$@D
D$8H
T$0D
D$8L
T$@D
L$HL
L$ L
L$0H
\$xD
L$hH
t$PD
L$HL
T$8L
T$@D
L$HH
L$hD
D$tL
T$8L
T$@D
L$HH
L$hD
D$tL
T$8L
T$@D
L$HH
L$hD
D$tL
L;d$
H+D$ 
|$XH9|$
L;l$
D$0H
\$0D
L$ L
T$@H
t$HL
sHH9
H9\$
H;T$
A;o8
H;T$
E;G8
H;T$
E;g8
|cH;T$
E;w8
|4H;T$
A;O8
L;l$
\$8D
L$0L
T$ L
T$ D
L$0L
\$@L9
D$CH
\$ L
d$(I
t$`L
\$0D
L$ M
\$0D
L$ L
H+D$ 
|$`I
T$ L
L$0L
T$ I
L9d$ 
\$PD
L$HL
T$8D
L$tH
T$8L
T$@D
L$HL
T$8L
T$@D
L$HL
L$tD
t$(H
\$0D
\$0M
L$ H
\$0D
\$0D
L$ L
L;d$ 
L9d$ 
t$(M
t$`L
L$0L
T$ L
T$ D
L$0M
t$(1
D$	9
L;l$
D$ H9D$
\$ L
T$ M
6A9|
L$0L
T$ L
T$ L
L$0I
\$xH
t$PD
L$HL
T$8D
T$8L
T$@D
L$HL
\$xB
L$hD
\$xD
L$hH
t$PD
L$HL
T$8L
T$@A
L$hA
D$tD
L$HL
L$0L
T$ L
T$ L
L$0I
L$0L
T$ L
T$ L
L$0I
L$0L
T$ D
L$0L
L;l$
\$0A
L$ L
L$ L
L$0L
T$ L
T$ L
L$0I
t$0D
l$ H
\$0D
L$ L
L$0L
T$ L
T$ L
L$0I
L$0L
T$ L
T$ L
L$0I
L$0L
T$ L
T$ L
L$0I
L$0L
T$ L
T$ L
L$0I
\$0D
L$ L
L$ L
\$0D
L$ L
L$ E	
\$0A
\$0D
L$ L
L$ L
\$0D
L$ L
L$ L
\$0fA
L$0L
T$ D
L$0L
L;l$
\$0A
L$ L
L$ L
T$HA
D$PI
L$0H
L$ L
L$ L
L$0H
M;CH
I;sH
L;\$
H;l$
H;T$
\$0D
L$ L
L$ L
L$0L
T$ L
L$ L
L$0H
L9{ 
l$8D
L$0L
T$ L
T$ L
L$8M
M;CH
H;T$
L$0L
T$ L
T$ L
L$0I
AVAUI
ATUH
[]A\A]A^
AWAVE1
AUATE1
t$0H
D$(L
L$ dH
L$H1
\$@A
D$@A
L$0E
l$(D
T$(H
L$HdH3
X[]A\A]A^A_
T$ L
L$,H
L$@L
T$01
D$8L
D$8H
6t?H;GH}9H
AUATUSH
D$`1
D$(H
T$8R
L$HQ
\$XSL
D$hAPL
L$xL
T$@H
T$8H
T$HH
T$0H
T$(H
T$PH
T$ H
L$XdH3
h[]A\A]
AWAVI
AUATI
([]A\A]A^A_
AVAUI
ATUS
tSHc
S0[L
]A\A]A^
ATUH
5FU:
dH34%(
 []A\
5qI:
=bI:
T$0H
AWAVAUATI
dH34%(
([]A\A]A^A_
	u+H
7u)M
ATU1
[]A\
AUATUSSL
AZ[]A\A]
ATU@
 []A\
AUATI
<$t2Lc
~dD9
Z[]A\A]
=9B:
>tcA
Y2E1
AUATUSSL
A[[]A\A]
AUATUSH
[]A\A]
tDXH
[]A\A]
[]A\A]
AVAU
ATUI
t$8H
|$ H
t$8H9t$0
t$pH
T$xM
Hc\$XL
\$(L)
|$ L
D$0I9
H9|$8H
|$0L
|$ H
[]A\A]A^
Lct$XM
M;t$
\$ L
D$0L9
H9\$8H
L$(H
D$ LcT$XH
D$0L)
D$(1
T$ H
T$ H
L$(dH3
5r?:
ATUSH
[]A\
rPuL
[]A\
H;s(
ATU1
H9CH
[]A\
ATUI
O|OO:
count
\$8H
T$0L
D$(dH
D$h1
t$5H
L$ H
t$01
D$  S
D$( S
|$ H
|$(H
T$(H
\$hdH3
p[]A\
T$(H
L$ L
t#E1
uoHc
AWAVAUATUSH
I9L$
[]A\A]A^A_
Lcl$
Lc|$
Hct$
ATUI
[]A\
D$ 1
AWAVI
AUATH
T$HH
u	I9
t$HH
l$PH
T$HH
|$HH
|$XH
l$pM
D$xL
L$`L
_PE1
|$ H
T$`L
|$pH
[]A\A]A^A_
H9T$(}?H
t$(H
l$pM
D$XH
|$`L)
t$PI
T$(I9
t$PH;t$h
H;t$`t7L;t$
D$HL
L$HM
l$PH
D$HH
L9|$(
l$PH
t$8H
\$0I
D$8I
D$0L
D$0I
t$PH
AUAT
D$ 1
L$ L
ZYtf
([]A\A]
AUATUSH
=R#:
[]A\A]
	~<H
~$E1
ATUSH
[]A\
AUATI
D$H1
L$HdH3
X[]A\A]
AYAZ
AVAUA
ATUI
D$X1
L$ H
\$ 1
t$$L
t$XdH34%(
`[]A\A]A^
\$ 1
AUATI
x(pMJ
[]A\A]
]A\A]
AUATI
X L9
X[]A\A]
AWAV
AUATI
D$(1
D$ H
|$(dH3<%(
8[]A\A]A^A_
dH34%(
AUATI
[]A\A]
I9mH~-H
AUATUSH
([]A\A]
K(I	
D$P1
L$(L
T$HdH3
AUATI
[]A\A]
ATUSH
T$ H
T$0H)
K@H9KX
l$0H
H;K`~
[]A\
H+{@H
d$01
L;cx
t$ H
CPM9
sPH9
T$0H
t$ H
s@H)
wXH9
H+G@H
AWAVH
AUATI
D$h1
t$0H
t$0H
L$hdH3
x[]A\A]A^A_
ATUSH
D$h1
L$hdH3
p[]A\
ATUI
[]A\
AVAUATUSH
_@L)
L9e@L
[]A\A]A^
L;u@L
AWAVI
AUATUSH
m@M)
|8$L
L;e@L
[]A\A]A^A_
[]A\A]A^A_
|8$L
ATUI
T$ 1
L$(L
\$ H
T$(H
l$0L
t$8H
t$PH
[]A\
AUATI
[]A\A]
 t-L
x%Ik
G(M9
AUATUSH
[]A\A]
H;=UpA
}<HkK
s E1
[]A\A]
t	H3~
AUATUSH
}`9{`
[]A\A]A^
AVAUI
ATUH
[]A\A]A^
AWAVAUATI
=^4:
Hc\$
([]A\A]A^A_
5CWA
-7WA
=&WA
ATUI
[]A\
[]A\H
AUATUSH
[]A\A]A^A_
_ E1
ATUH
dH34%(
[]A\
=!g9
T$ u
T$@H
AUATUSH
Y[]A\A]
Z[]A\A]
AUATI
=s":
[]A\A]
D$(1
D$ H
t$ H
L$(dH3
t$ H
ATUH
D$`H
[]A\
u<E1
[]A\
ATUSH
D$@L
L$Ht7
)D$P
)L$`
)T$p
L$ H
[]A\
~EH9
ATUI
[]A\
D$(1
|$ H
L$(dH3
=lZ9
=2Z9
AVAU
[]A\A]A^
H(H9
AUAT
D$81
H=`u
=Xw?
L$8dH3
H[]A\A]
t$(H
T$0H
L$0H
T$(H
D$0H
T$(H
L$(H
T$0H
AUATUS
([]A\A]
t$(I
|$ H
5Yt?
AWAVAUATI
([]A\A]A^A_
AUATI
D$@L
L$Ht7
)D$P
)L$`
)T$p
T$ H
$tYf
[]A\A]
AWAVH
AUATUSH
F t{H
F(t_H
F0tCH
F8t'A
%Yl?
t	H9
[]A\A]A^A_
x}H9
xWH9
x1H9
H= S
[]A\
t,ATUSH
[]A\
AWAVI
AUATUSH
([]A\A]A^A_
O(H9
l9 I
l90I
H;5a8A
tpL;
H;5a7A
-G7A
w(I9
ATUI
 []A\
AUATUSH
D$81
|$(L
|$(H
t$(H
L$(M
t$0H
|$(H
T$(H
|$ H
\$ O
L$(I
|$(H
\$8dH3
H[]A\A]
@t-SH
=f<9
ATUH
[]A\
[]A\
[]A\@
[]A\
[]A\
[]A\
ATUI
I9t$
L$ I
T$(I9
\:(M
t:8H
|:HH
[]A\
AWAVAUATUSH
[]A\A]A^A_
AWAV
AUATI
$.D;e
}$Ic
|$(H
t$ L
L$0L
T$8H
D$@H
L$XD
 H;|$
 H;|$ 
 H;|$(
 H;|$0
 H;|$8
 H;|$@
l$HL
T$PH
T$`A
T$hH
T$`H
T$hH
 H;|$HA
T$PL
L$XH
x[]A\A]A^A_
Mcl$
56r=
AWAVI
AUATUSH
$9E;`
K(Mc
L$ H
D$0L
t$@H
|$(D
 H;D$
 H;D$
 H;D$
 H;D$ 
 H;D$(
 H;D$0
|$8L
d$8E
d$HE
d$HI
 H;D$8w
|$@H
X[]A\A]A^A_
AVAUHc
ATUHc
]A\A]A^
tGIct$
IcL$
Icl$
AWAV
AUATI
|$@H
T$8H
L$0H
\$0I
|$0L
D$8I
|$8H
T$0I
|$0L
d$(M
[]A\A]A^A_
L$(1
|$(H
|$0H
|$(H
$ulH
t$8L
|$(M
T$0H
L$(1
|$(H
l$0H
|$8H
x	H9
L$(1
D$8I
T$(H
D$(p
|$(H
|$0I
l$8I
|$0I
|$0H
|$8L
|$8L
tFH=C
AVAUATUSH
|$(D
d$(D
D$(H
L$ H
d$(I)
l$0A
dH34%(
[]A\A]A^
D$X1
T$VA
t$VH)
\$XdH3
t$VA
AWAVA
AUATI
D$81
DDDDDDD
|$&I
D$0H
p$I9
d$0H
|$0I
D$0H
|$8dH3<%(
H[]A\A]A^A_
D$&-
D$(1
=mHA
D$ 1
t$ 1
L$ H
\$(dH3
='e9
u,H=
=?g9
ATUSH
DDDDDDD
 []A\
L$(H
T$0H
T$(H
|$01
\$8H
dH3<%(
T$(H
|$0H
\$8H
T$ 1
T$ H
ATUA
 []A\
AVAUI
ATUH
[]A\A]A^
D$81
D$0H
t$(H
t$0H
L$(f
.T$(z
D$0f
.5dk
L$8dH3
AUATI
=MR;
5kb9
[]A\A]
=I`9
AWAVAUATUSH
[]A\A]A^A_
L$ I
T$(I
\$0I
AVAUI
ATUH
D$(1
t$(dH34%(
0[]A\A]A^
L$ L
t$ H
t$ H9
AVAUATUSH
[]A\A]A^
D$81
L$8dH3
%t.H
AVAU1
ATUI
[]A\A]A^
AVAU1
ATUI
S0[L
]A\A]A^
ATUH
[]A\
AWAVAUATUSH
D$X1
D$  
D$$<
D$Hs
T$0H
|$$A
d$@M9
t$0H
D$ L
|$XdH3<%(
h[]A\A]A^A_
T$@H
L$$A
|$$A
D$ L
AWAVI
AUATI
Z[]A\A]A^A_
AUATUSH
P0ZL
[]A\A]
[]A\A]
C(Z[]
=g>9
ATUH
D$h1
L$hdH3
p[]A\
K H9
x	A9
K H9
USHc
AVAUATUSH
D$h1
K L9
L;c L
L$hdH3
p[]A\A]A^
4	M9
L;c L
AVAUATUH
C I9
L;c L
[]A\A]A^
dH34%(
tMxFL
AWAVAUATL
g$USH
[]A\A]A^A_
D$ 1
AWAVAUATUSH
D$H1
D$8P1
L$HL
|$@H
|$0H
T$,L
H9\$
T$0M
T$HdH3
X[]A\A]A^A_
ATUSH
[]A\
=i,9
AVAUI
ATUI
[]A\A]A^
AWAVAUATI
T$8H
\$0H
L$DB
L$ H
\$@H
L$(J
1xZE
T$@A
T$@H
|$HH
T$@E
H+\$ I9
L$DA
D$8H
d$0I
X[]A\A]A^A_
T$@E
L+D$ M9
T$@A
\$0H
D$0H
AVAUATUI
[]A\A]A^
=_y9
>t}H
taE1
=dx9
ATUH
D$ 1
L$ L
 []A\
AWAVAUATI
D$(1
D$(H
D$ L
T$ I
L$(dH3
8[]A\A]A^A_
AWAVAUATUSH
DDDDDDD
T$ H
^B{	I
8[]A\A]A^A_
	vgA
|($E
\$(L
\$(M
D$x1
t$ H
t$ H
\$xdH3
AUATI
[]A\A]
AUATUSH
Z[]A\A]
AUATI
tpH9
([]A\A]
uMH9
ATUH
 []A\
ATUH
L;b8u4H
[]A\
AWAVAUATA
L$aI
L$dD
|$bD
D$`M
t$`H
[]A\A]A^A_
d$`H
D$`I
D$`K
t$`H
t$`H
|$a1
D$`G
t$`H
D$XF
t$XH
=L[9
Hc{H
cHE1
D$P S
D$X S
L$`Q
T$`ARH
|$`WL
L$`L
\$@I
|$H S
t$PH
D$XH= S
t$81
t$@1
L$HH
t$PH
t$XH
t$HH
L9d$
T$@M
D$70
t$7H
D$`J
D$alA
t$`H
t$`H
t$H1
t$P1
L$PH
T$HH
t$XH
t$`H
d$aD
T$bD
L$PH
T$HH
t$XH
t$H1
t$P1
D$adA
AWAVAUATI
D$(1
xsHc
xJHcT$
x!E1
L$(dH3
8[]A\A]A^A_
AUATI
([]A\A]
AWAVAUATUSH
E I9
L9u L
u H9
[]A\A]A^A_
<6M9
E I9
L9u L
AWAVAUATUSH
D$81
t$8dH34%(
H[]A\A]A^A_
AWAVAUATI
[]A\A]A^A_
ATUH
[]A\
ATUH
C0twH
L;`0H
[]A\
AVAUATUSH
D$(1
O E1
t$ A
T$ H
\$(dH3
0[]A\A]A^
t$ H
gtc@
I9T$
L$ I
t$ H
|$ H
t$ H
|$ H
ut7| @
AWAVI
AUATI
([]A\A]A^A_
AVAUI
ATUI
[]A\A]A^
ATUSH
 []A\
AUATI
Z[]A\A]
ATUSH
[]A\
 []A\
AUATUSH
([]A\A]
AWAV
AUATUSH
D$(1
D$ H
|$(dH3<%(
8[]A\A]A^A_
L$0I
D$(1
D$ H
T$ E1
t$(dH34%(
AWAVAUATA
t$$H
[]A\A]A^A_
=X|8
AUATUSH
Q0ZL
[]A\A]
[]A\A]
ATUI
[]A\
AWAVI
AUATUSH
[]A\A]A^A_
D$(1
T$ H
|$ H
|$ H
t$ L
D$ H
\$ L
t$(dH34%(
L$ H
AWAVI
AUATI
tOE1
8[]A\A]A^A_
D$ L
D$(I)
T$(L
|$ M
T$(H
T$(J
DD;T
t=D;T
t6D;T
t/D;T
t(D;T
t!D;T
;2tvH
;2tYH
;2tMH
;2tAH
;2t5H
;2t)H
[]A\A]A^A_
|$ L
AWAVI)
AUATUS
[]A\A]A^A_
t"H9
</A;
*B9,
D$(1
T$ H
L$ H
t$(dH34%(
dH3<%(
D$x1
t$ H
t$ H
\$xdH3
AWAVAUATUSH
[]A\A]A^A_
=$S@
AWAVA
AUATI
<st%<pt
AUATI
w^f.
[]A\A]
ATUI
t7f.
[]A\
=>b8
AVAUH
D$H1
D$(H
L$8H
\$8H
5<i>
D$8E1
\$8L
D$8I
\$8L
Hc=Tg>
t$HdH34%(
P[]A\A]A^
5-f>
AWAVAUATUSH
T$01
([]A\A]A^A_
dH3<%(
dH34%(
ATUSH
S8H;P
H9K@
t$$L
 []A\
AUATI
Z[]A\A]
t$ 1
= ]>
AWAVAUATUSQH
Z[]A\A]A^A_
ATUSH
[]A\
AWAVAUI
ATUSQH
Z[]A\A]A^A_
AUATUSQx]H
Z[]A\A]
t4SH
AVAU
ATUSH
[]A\A]A^
D$(1
D$ H
L$(dH3
t$ H
AWAVAUATUSH
I9\$
D$(H
I9\$
t$(H
I9\$
D$(H
M9t$
D$(H
([]A\A]A^A_
/uPI
AUATUSH
[]A\A]
W(HcB
AWAVAUATUSH
f(dH
}(nt
UAUM
L$,L
L$8H
t$PL
[]A\A]A^A_
AUATI
,7SAPH
,$X[]A\A]
ATUSH
[]A\
AWAVAUATUSV
Y[]A\A]A^A_1
AVAUATUSH
D;L$
([]A\A]A^A_
D9L$
Hc|$
LcL$
AWAVAUATUSH
[]A\A]A^A_
T$@A
=X48
t$@H
|$hn
D$HPL
|$0AWj
AWAVAUATUSH
D$81
DDDDDDD
(t[D
,t/A
l$ E
\$8dH3
H[]A\A]A^A_
=\y8
%37>
l$ D
DDDDDDD
T$ f
T$ D
|$ D
%{2>
|$ A
=<#>
USfH
J(;J,w
D$H1
|$ L
D$(H
.t$(z
t$HdH34%(
L$ H
t$(H
.D$(
L$ L
L$0f
.L$0L
T$(E1
.T$8A
D$81
t$ H
XL$(
XD$ 
L$8dH3
D$ H
ATUSH
uTH=
[]A\
[]A\
AWAVI
AUATUSH
H= S
([]A\A]A^A_
ATUSH
L$8L
D$@L
L$Ht7
)D$P
)L$`
)T$p
T$ H
[]A\
t%Hct$
ATUI
[]A\
USE1
t'[]H
AWAVAUATUSH
D;N 
([]A\A]A^A_
E9&M
tbD;N 
AWAVI
AUATUSH
D$ dH
D$X1
L$8H
t$0L
\$(H
t$0H
D$HH
L$PH
T$HH
H9T$
\$PI
H9t$
l$ L
L$XdH3
h[]A\A]A^A_
T$HL
PAQ1
[]A\H
AWAVAUATI
[]A\A]A^A_
AVAUI
ATUH
[]A\A]A^
AWAVAUATUSH
L$0H
T$ L
\$(L;\$p
=OJ8
l$hH
|$hL
T$0L
l$0M
t$ H+t$
|$0I
D$hH
[]A\A]A^A_
t$(H
|$HH
T$HL
D$HL
L$HE
D$(H
l$ L+l$
t$ H
|$hD
D$XL
T$PD
L$hH
|$ H+|$
\$HL
T$PD
D$XI
d$XH
t$PA
L$dL
D$xD
Hc|$d
|$xIc
Hct$dA9
d$(L;d$p
	w4Lc
\$HA
|$@L
t$(H
t$(H
D$HH
\$HI
C%L9
S&L9
AWAVAUATUSH
[]A\A]A^A_
ATUI
H;k 
[]A\
[]A\
L$ H
D$81
t$ H
L$8dH3
D$ H
=>:8
ATUI
D$(1
L$(dH3
0[]A\
ATUM
[]A\
ATUH
[]A\
D$01
T$(f
L$,D
L$ L
D$$H
L$(H
T$,H
t$0H
Y^x\
uJRh 
\$$SD
L$0D
|$(dH3<%(
;wWE
w)[]L
ATUH
T$$H
 []A\
=K18
AWAVI
AUATI
T$PA
[]A\A]A^A_
t$XL
ATUH
L$$H
M"D+D$
 []A\
ATUH
} +{ H
[]A\
=R-8
[]A\
Hc|$
[]A\
t	[H
LcT$
	t=L9
dH3<%(
AWAVAUATUSH
8[]A\A]A^A_
+u'L
L$(L
D$ L
D$ H
AWAVAUATI
|$PH
|$ L
T$HH9
D$HH
|$HL
\$@M
\$HL
l$@L
L9Q 
t$HL
L$@L
D$HH
T$@L
L9I 
L9|$
L9L$
L9T$
L9|$
L9|$
L9|$
D9I8
|jH;T$
y8A9
|=H9T$
i8E9o
8[]A\A]A^A_
T$@I
T$HH9
t$HL
D$@H
<$M)
M94$
D$HH
t$@H
t$HH
|$@L
H9T$
M+\$
M;|$
M+L$
L9|$
t$HL
D$@L
t$ L
|$ J
T$HL
\$@L
t$HL
|$@L
M9|$
t$ L
H9D$
M;|$H
H9t$
M9|$
M;|$
Ic?E1
Mc?A
I;|$H
xPM9
H9t$
AWAVAUATUSH
D$ L)
|$(H
L;|$ 
H+D$(H
8[]A\A]A^A_
A;L$
L;|$ 
H+D$(H
A;L$
A;L$
L;|$ 
L;|$ D
L;|$ 
l$ L9+
H+D$(H
D$ L)
L;|$ 
H+D$(H
H+D$(H
L;|$ s;E;
L;|$ sEA
H+D$(H
H+D$(H
ATUS1
|#u)H
[]A\
AWAVAUATUSH
T$ dH
D$(1
tGE1
t2A;@
+uZL
L$(dH3
8[]A\A]A^A_
ATUI
[]A\
AWAVAUATI
8[]A\A]A^A_
l$ L
L9l$
l$ M
l$ L
AVAUATUH
T$ dH
D$(1
|$ H
L$ H
D$(H
3t)Hc
\$(dH3
0[]A\A]A^
L$ H
D$(L
_AXM
AUAT
([]A\A]
T$0H
L$8L
D$@L
L$Ht7
)D$P
)L$`
)T$p
AUATUSQH
Z[]A\A]
Eleele
AVAUI
ATUH
 []A\A]A^
H;S }
ATUI
 []A\
D$h1
L$hdH3
D$(1
xFH9C
L$(dH3
L$ L
|$ H
H;|$ |
[]A\
AUATUSH
[]A\A]
=({?
D$ 1
H= S
ATUI
[]A\
ATUH
[]A\
ATUI
AUATI
[]A\A]1
ATUH
D$`H
uIE1
[]A\
[]A\
ATUH
D$`H
[]A\
ujE1
[]A\
AUATUSH
[]A\A]
AWAV
AUATI
$I;n
([]A\A]A^A_
AWAVAUATL
o$USH
L;<$}4C
[]A\A]A^A_
ATUH
D$`H
uLE1
[]A\
[]A\
ATUH
D$`H
[]A\
uIE1
[]A\
AWAVAUATI
USQL
Z[]A\A]A^A_
AWAVI
AUATUS1
u%M9
[]A\A]A^A_
[]A\A]A^A_
AUATI
Q0ZL
[]A\A]
AWAVAUATUSH
[]A\A]A^A_
ATUI
Z[]A\A]
AWAVAUATUSH
D$X1
t$ H
L$8H
L$ H
L9L$
t$(L
H9t$
L9l$
L9l$
d$HM
T$XdH3
h[]A\A]A^A_
t$(L
t$(A
L;L$
hXP_
L$0H)
|$PI
_AXL
L$@M
l$HH
AUATUSH
[]A\A]
AWAVAUATUSH
Z[]A\A]A^A_
AWAVA
AUATI
D$@1
T$ H
D$ R1
D$0H
l$ M
M9l$
L9l$
M9l$
|$8dH3<%(
H[]A\A]A^A_
-e:6
~II9J
t9I9J 
t)I9J(
I9J0
 tWH
=k86
=Y86
t$(H
l$0I
t$0H
|$(H
t$0H
H;YP
|$0H
\$(H
t$0H
=B56
T$0I
t$(H
|$0A
-Q36
AUATI
[]A\A]A^
AUATI
E(tyM
E0tWA
[]A\A]
K%f%
C&H9
s'H9
X[]Hc
H;|$
G(Hcx
ATUH
[]A\
ATUSH
[]A\
AWAVAUATUSH
D$(1
=k}?
=e}?
L$(L
|$ H
L$(dH3
8[]A\A]A^A_
H= S
USAP
}^ATUH
[]A\
AUATUSAQ
n4Z[]A\A]
D$(1
L$(dH3
AWAVI
AUATI
[]A\A]A^A_
M;l$
l$(H9
AWAV
AUATI
D$81
L$ L
D$(H
d$(I
T$ H
|$(H
l$ I
l$ E1
L$8dH3
H[]A\A]A^A_
|$(H
\$ H
t$$1
t$01
d$0M9
t$01
T$0M9
H;t$
=?n7
5^o?
AUATH
D$h1
h$~e
\$hdH3
x[]A\A]
ATUSH
-Jq=
uB[L
AUATUSH
([]A\A]
ATUI
H;4$
dH3<%(
[]A\
ATUH
[]A\
50m=
-tO?
D$X1
L$HH
|$HH
D$DE
L$Pf
5MN?
L$XdH3
D$DE
L$Pf
D$0H
5nY=
uSH9
dH34%(
{ H)
ATUI
AUATI
([]A\A]
ATUH
U(H;S(t7
[]A\
C(Hc~
AWAVAUATI
D$(H
[]A\A]A^A_
D$81
L$ L
L$0L
D$(H
|$0H
D$(H
t$0H9
L$8dH3
t$ L)
5C18
H;\$
AUATUS
[]A\A]A^
ATUI
[]A\
AUATUSAPL
xPL9
Y[]A\A]
[]A\A]
ATUSH9w |
[]A\
AUATI
USQxpH
|eH9
T$(H)
T$(H
[]A\A]
AWAVI
ATE1
[]A\A]A^A_
AWAVI
AUATI
D$(1
T$ L
K(I9M(
T$ H9T$
|$ H9
s+H)
H+t$
\$(dH3
8[]A\A]A^A_
T$ L9T$
D$ L
L$ H
D$ Lc
H+t$
d$ H
|$ 1
L;d$
|$ I
T$ H
5I&8
x8H9C
D$ H
ATUI
[]A\
AUATUSH
S(H;U(
Z[]A\A]
[]A\A]
AWAVAUATI
D$(1
L$(I
L$ L
t$ I
T$(H
L$(dH3
8[]A\A]A^A_
L;t$ L
,.})H
T$ H
=iM=
AVAUATUSH
 []A\A]A^
ATUH
AVAUATUSL
[]A\A]A^
AUATI
I;l$
D$(H
[]A\A]
[]A\A]
D$(I
[]A\
AUATI
Z[]A\A]
USQH
AUATI
Z[]A\A]
AWAVI
AUATUSH
[]A\A]A^A_
$L;$$
/t_I
ATUH
[]A\
uSH9
AWAVI
AUATI
D$(I9F(
T$(M
D$(I
l$ E1
d$(I
McT$
n(HcU
[]A\A]A^A_
T$(I)
t$(M
AVAUI
ATUI
M;l$
D$(L
[]A\A]A^
=H47
ATUSH
[]A\
ATUSH
[]A\
AWAVAUATUSAPH
} Z[]A\A]A^A_
AUATUSH
([]A\A]
dH34%(
AWAVAUATUSQL
[]A\A]A^A_
[]A\A]A^A_
AUATI
I9l$
D$(H
[]A\A]
ATUH
@t_M
C []A\
5y/=
5.-=
=8o7
AWAVAUATUS1
Lc\$
Lc\$
sgLcd$
,&vPM
[]A\A]A^A_
HcT$
=}j7
USHc
dH34%(
ATUSH
[]A\
u?Hc
AWAVAUATI
AWAVI
AUATI
([]A\A]A^A_
I9t$
ATUStID
[]A\A]A^
ATUH
Hc}(
Hc},
[]A\
ATUI
[]A\
AVAUATUHc
D$H1
T$8H
L$@H
L$HdH3
P[]A\A]A^
AWAVAUATUSH
D$h1
t$DH
t$@H
t$`H
t$DH
L$hdH3
x[]A\A]A^A_
t$`H
T$DI
t$`L
t$`H
T$`O
t$PH
t$XH
t$`H
D$`K
AQUL
L$PD
D$TH
t$hH
$AZA[
t$PH
t$XH
t$`H
|$PD
D$@I
L$DH
T$`H
t$`H
L$`O
\$@D
t$`J
L$`K
t$XH
t$`H
D$`K
tQE1
L$DI
|$XH
t$PH
t$XH
t@E1
t$`H
D$`K
t$XH
tAE1
t$`H
T$`O
t$PH
t$XH
t$`H
T$`I
t$`H
\$`H
L;t$
t$HH
t$LH
t$PH
t$XH
L9L$ 
T$HL
D$PH
|$LD
T$<L
\$0H
T$ H
L$0L
|$(J
L$0J
L$0L
D$`O
AWAVAUATI
D$H1
t$,H
t$(H
t$@H
t$8H
T$,I
t$8H
L$HdH3
X[]A\A]A^A_
t$@H
t$,H
t$0H
t$@H
t$@H
t$8H
t$@H
l$0L
L$<L
D$PH
L$HH
t$@H
t$,H
t$8H
t$@H
t$0H
L$,I
T$0H
t$@H
L;<$
t$@H
L$@O
t$8H
t$@H
t$0H
L$,I
T$0H
t$@H
t$@H
T$,I
t$@L
t$8H
t$0H
t$@H
L$,I
t$0H
t$@H
|$@K
L;<$|
t$@H
T$,I
t$@L
$t{E1
t$@H
=r-7
t$8H
L;<$
L$,I
|$8L
Qt!H
AUATI
([]A\A]
AWAVAUATUSH
Hc}0
Hc}4
[]A\A]A^A_
=Q|7
ATUI
[]A\
ATUI
Ic|$ 
Ic|$$
[]A\
ATUI
[]A\
ATUI
D$(1
t$(dH34%(
0[]A\
ATUH
[]A\
dH34%(
 []A\
ATUI
[]A\
AVAUI
ATUH
p []A\A]A^
AUATUSH
[]A\A]
~AE1
ATUSH
[]A\
H9s0
ATUSH
[]A\
AUAT1
X[]A\A]
[]A\A]
Hc|$
ATUH
[]A\
D$81
t$8dH34%(
ATUH
D$ 1
C tgH
 []A\
D$H1
T$HdH3
o dH
=[f7
ATUI
[]A\
AUATH
T$,dH
T$,H
|$01
T$,H
[]A\A]
AUATH
D$81
D$ H
D$ 1
D$ 1
L$8dH3
H[]A\A]
ATUA
SHc_
t)Hc
AUATUSH
([]A\A]
(=t?H
AWAVA
[]A^A_
Hct$
HcT$
AWAVA
AUATI
([]A\A]A^A_
AWAVH
AUAT
L$ L
|$(H
t$0L
L$0E
dH34%(
[]A\A]A^A_
R0M9
l$0A
l$0A
L$0E
AWAVI
AUATI
[]A\A]A^A_
ATUSH
[]A\
W0L9
AWAVAUATUSH
T$0H
|$0Lcd$@
L$,L
[]A\A]A^A_
AUATUSH
[]A\A]
AVAUATUSL
~7H9
[]A\A]A^
S(L)s M)
,*H9
=W[>
=;[>
u H;_
AWAVI
AUATI
D:*u+H
[]A\A]A^A_1
tOD:)u
t+D:.u
Z[]A\A]A^A_
t$E1
ATUI
D$(1
T$ f
t$(dH34%(
0[]A\
t!H=
AWAV1
AUAT
D$81
L$0H
T$(H
|$(I
Hc|$
D9t$
} Mc
E Kc<(
L$8dH3
H[]A\A]A^A_
ATUH
[]A\
AUATUS1
[]A\A]
Hc|$
L$(L
Hct$
Hc\$
=Ok>
AVAUM
ATUE1
-.95
[]A\A]A^
[]A\A]A^
AWAVAUATUSH
I9|$
[]A\A]A^A_
=K-7
[]A\A]A^A_
ATUH
[]A\
=2,7
AUATM
USE1
-165
[]A\A]
Z[]A\A]
-'35
ATUSH
tOSH
ATUH
\$0H
l$ H9
 tq@
dH34%(
[]A\
l$0H
\$ H9
H+\$
ATUI
[]A\A]A^
D$(1
T$ H
L$ H
t$(dH34%(
D$(1
T$ H
L$ H
t$(dH34%(
AVAUATUI
[]A\A]A^
ATUSH
8[]A\
[]A\
ATUSH
[]A\Hc
dH34%(
=Pr6
D$ 1
D$x1
t$ 1
\$xdH3
D$x1
t$ 1
t$xdH34%(
\$0H
l$ H9
p$E1
|$ H
AUATH
D$h1
P$E1
=r^>
|$hdH3<%(
x[]A\A]
AWAVH
AUAT
l$0H
|$ L
[]A\A]A^A_
\$0H
l$ H9
p$E1
\$0H
l$ H
p%E1
H+t$
dH3<%(
\$0H
l$ H9
ATUH
D$`H
[]A\
u<E1
[]A\
ATUH
D$`H
utE1
t8[]A\
[]A\
ATUH
D$`H
[]A\
u5E1
[]A\
ATUH
D$`H
u0E1
[]A\
ATUH
tL[]A\
D$`H
[]A\
H;w }
D$(1
L$(L
|$ H
L$(dH3
AWAVAUATUSH
tpM9
[]A\A]A^A_
D$(1
L$(L
|$ H
L$(dH3
AWAVAUATUSH
[]A\A]A^A_
D$(1
L$(L
|$ H
L$(dH3
D$(1
L$(L
|$ H
L$(dH3
ATUI
D$81
T$(H
|$(H
L$8dH3
@[]A\
D$h1
L$hdH3
AWAVI
AUATA
[]A\A]A^A_
Hc}$A
ATUH
[]A\
AWAVI
AUATH
 tLH
([]A\A]A^A_
AWAVAUATI
D$h1
$$H9
x@M9
L$hdH3
x[]A\A]A^A_
=RC>
5EC>
ATUI
D$h1
t$hdH34%(
p[]A\
AWAVI
AUATH
D$HH
L$8H
T$@H
|$@H
|$8H
t$HL
d$`L
\$PH
g(x#E1
d$XH
dH3<%(
[]A\A]A^A_
d$XH
t$PL
_(E1
4.H)
t$(L
D$ L
D$(H
L$ L
L$ L
AWAVAUATI
L$HH
l$@H
O|OO:
t$(I
D$0 S
D$8 S
D$@fD
D$8H
L$0H
|$0H
|$8H
l$ L
L$PH
T$@J
t$HM
[]A\A]A^A_
\$HH
l$@H
O|OO:
D$0 S
D$8 S
D$8H
L$0H
|$8H
l$ L
L$PH
tmE1
D$(1
T$ H
L$ H
t$(dH34%(
T$ H
t$0H
tZE1
|$ H
|$ H
AWAVI
AUATI
D$h1
D$HL
l$8K
L$8A
L$8A
|$@H
D$@D
D$8H9
\$8H
|$HH
t$@L)
|$HH
d$0M
L$(M
D$HH
\$hdH3
x[]A\A]A^A_
\$8L)
l$HH
t$@H
|$HH+u
d$0M
L$(M
T$HI
|$HH
|$0H
l$(M
D$`H
t$HL
\$@L+^
\$PPL
L$HAQM
T$`R
|$`WH
D$XPL
D$PAPM
|$XH
t$pL
D$8H
|$@A
D$@D
|$(H
t#Hc
AWAVH
AUATE
L$h1
xnI9
|fL9
L$hdH3
x[]A\A]A^A_
<*H)
L$0H
T$ I
AWAVH
AUATUSH
[]A\A]A^A_
AY[]
ATUI
[]A\
AWAVAUATUSH
t$(L
[]A\A]A^A_
tCSH
AWAVH
AUATUSH
|$0H
t$ L
[]A\A]A^A_
~UD:l
AWAVH
AUATUSH
L$(H
T$ H
D$  S
|$(M
|$ H
L$(H
|$@H
t$0L
l$(M
t2L)
[]A\A]A^A_
|$ H
$B:L5
|1H)
AWAVI
AUATH
D$x1
L$xdH3
[]A\A]A^A_
AWAVI
AUATH
D$x1
AVAUI
ATUH
D$x1
ATUSH
|$(H
[]A\A]A^
AWAVAUATUSH
[]A\
AWAVH
AUAT
USE1
D$(1
|$ H
T$(dH3
8[]A\A]A^A_
=tQ6
AWAVH
AUAT
D$H1
L$ L
D$(H
|$(H
|$(H
H;l$
|$ H
|$ 1
|$ I
T$81
T$@1
D$@H
L$8H
H;\$
|$0H
L$HdH3
X[]A\A]A^A_
=xM6
AWAVI
AUATI
USHc
D$(1
T$ H
T$ H
AWAVI
AUAT
Hc}$A
[]A\A]A^A_
x#Hc
tAE1
AWAVAUATUSH
T$0L
[]A\A]A^A_
AUATUSH
[]A\A]
ATUH
3t0H
[]A\
5i!>
AUATI
[]A\A]
D$81
T$ H
D$ H
L$8dH3
D$X1
d$8f
,$fA
D$XdH3
)T$@
)|$ 
<$fD
),$fA
(<$f
D$81
L$(L
D$0H
L$8dH3
t$PH
)\$ 
(d$ 
4$fE
d$Hf
)\$0
)l$ fA
(T$ f
(t$0f
Beeb
)\$ 
d$@f
(t$ H
)L$ fA
(|$ f
(t$0f
t$PH
)\$ 
(d$ 
4$fE
d$Hf
)\$0
)t$ fA
(l$ f
(|$0f
)\$ 
d$@f
(|$ H
)D$ fA
(d$ fA
(|$0f
D$ f
T$(H
\$ fA
\$(f
L$ fA
D$8f
\$ fD
Yl$ 
t$8fA
l$(f
T5v3
d$ f
l$(f
)l$ 
(d$ 
rMfA
)l$ 
(d$ 
D$81
T$ H
L$(H
L$8dH3
t$pH
|$xf
)\$ 
|$xf
(l$ 
t$0fE
)\$P
)T$ f
(l$ f
d$0fD
l$@fD
(t$P
|$hfE
)\$0
d$`f
(|$0
|$@H
)\$@
D$`f
d$ fD
l$0fD
(t$@
T$ f
L$ f
Yd$ 
)d$ 
(\$ 
,$fA
D$(1
L$(dH3
z#u!f
D$(1
L$(dH3
AVSH
t$xf
.5<+
.%,+
t$0D
)l$ fA
(d$ f
|$8fI
D$xf
|$HI
D$xf
t$`H
d$@f
\$hfE
|$@fE
D$X1
D$ 1
D$HH
T$HH
|$HH
L$XdH3
C Hc}
C(Hc}
C0Hc}
C8Hc}
CHHc}
CPHc} 
ATUI
$v=H
dH3<%(
[]A\
ATUA
APATSPAQAQAQAQ
[]A\
q0Z[]
D$(1
t$ H
H+t$ 1
\$ Ik
L$(dH3
AWAVAUATUSH
D$(1
t$ H
T$ L
T$ 1
\$(dH3
8[]A\A]A^A_
dH34%(
T$ H
t$0H
|$ H
AWAVI
AUATI
D$X1
\$0L
\$PM
T$8H
t$0H
|$8I+r
d$(M
D$ H
D$8H
|$XdH3<%(
h[]A\A]A^A_
T$0L
L$0D
D$0M
L$0A
L$PH
\$0H
T$8L
\$0H
|$HI
\$@RH
t$8VL
D$PAPM
L$PAQM
T$8R
D$HPL
\$xASL
|$@H
l$(H
t$ M
d$8I
|$8H
|$ H
D$0H
L$0D
|$0E1
T$0D
D$(1
T$ H
|$ H
\$(dH3
AUATI
[]A\A]
AUAT
D$H1
|$(L
D$ M9
\$(H
t$ H
|$(H+s
D$(H
L$HdH3
X[]A\A]
D$ A
D$ L
T$8I)
\$@L
\$(M+C
D$0PH
D$(PH
T$@R
t$@VH
|$(WH
D$8API
L$hAQM
T$xARH
L$(H
|$(H
AWAVAUATUSH
D$x1
D$0H
L$(E
t$(D
T$8M
T$8H
T$8M
L$0H
D$(L
|$0H
D$8H
|$(I
|$8 S
T$8H
D$8H
|$8 S
T$(I
L$0H
t$(H+q
t$ H
T$0H
L$xdH3
[]A\A]A^A_
[]A\
AVAUA
ATUA
[]A\A]A^
L$(H
T$0H
t$@H
D$ H
T$(H
|$0H
t$ L
|$0H
T$ 1
AWAVI
AUATI
L$x1
T$(L
T$ H
|$PL
L$HL9
|$PC
|$HL
L$Hw
L+L$
l$XH
t$PH
|$XH+u
d$@M
t$8H
D$XH
L$xdH3
[]A\A]A^A_
L$(H
T$0H
D$ H
T$(H
|$0H
\$8H
dH3<%(
t$0H
T$ 1
T$ H
D$(1
T$ H
L$ H
t$(dH34%(
L$(H
T$0H
t$ uxH
T$(H
|$0L
D$ H
|$0H
T$ H
dH3<%(
T$(H
|$0H
|$0H
T$ 1
L$(H
T$0H
t$@H
D$ H
T$(H
|$0H
t$ L
|$0H
L$(H
T$0H
t$ uvH
T$(H
|$0L
D$ H
|$0H
T$ H
dH3<%(
T$(H
|$0H
|$0H
T$ 1
D$(1
T$ H
L$ H
t$(dH34%(
T$ H
t$0H
|$ H
|$ H
D$(1
T$ H
D$ H
L$(dH3
;Nu`
AWAVAUATUSH
-EA:
5,A:
$@vb
u*Ic
[]A\A]A^A_
t	A8
AWAVI
AUATUSH
L;t$
D$0E
\$(H
|$(H
T$(I
L$(H
|$(H
D$(E1
[]A\A]A^A_
, Lc
D$x1
t$ H
t$ H
\$xdH3
|$ H
D$8H
|$ H
t$HH
L$@H
D$(1
T$ H
L$ H
t$(dH34%(
ATUH
t$8H
[]A\
D$ 1
L$ H
dH34%(
AWAVAUATUSH
([]A\A]A^A_
D7$L
AWAVAUATUSH
([]A\A]A^A_
AWAVAUATUSH
([]A\A]A^A_
AWAVAUATUSH
D$(1
Hcl$
L$ L
LcT$
L$ H
LcT$
|$ L)
L$(dH3
8[]A\A]A^A_
|$ L
t$ D
D.$H
HcL$
|$ H
|$ A
D+L$
D?$D
LcT$
tmL9
|$ L)
|$ L
\$ D
uUHcT$
AWAVAUATUSH
Hct$
([]A\A]A^A_
ATUI
[]A\
AUATI
-[64
[]A\A]
D$81
D$ H
T$(H
\$ f
T$(f
L$8dH3
t$ H
D$h1
D$0H
T$8H
L$ H
t$(H
D$ f
L$0L
T$8L
L$Xf
(T$P
)T$@
t$Hf
L$hdH3
t$0H
t$ H
~SH9
D$81
D$ H
T$(H
L$8dH3
t$ H
D$81
D$ H
T$(H
L$8dH3
t$ H
D$H1
D$0H
T$8H
L$ H
t$(H
T$ H
T$ f
\$(f
L$HdH3
t$ H
t$0H
D$81
L$ H
|$(H
d$ f
L$8dH3
d$ f
t$ H
AWAVH
AUATI
u	L9
[]A\A]A^A_
AUATI
[]A\A]
ATUI
ATUH
D$(1
L$ H
|$ H
L;d$ | H
t$(dH34%(
0[]A\
ATUSH
[]A\
AUATH
=[|;
5)|;
([]A\A]
AUATUSH
.E;l$
D$ H
l$ H
T$ H
[]A\A]
AWAVAUATUSH
T$ O
l$ H
H;\$(K
8[]A\A]A^A_
L9d$(J
H9\$
H9l$
P0YH
AWAVAUATUSH
l$ I
A;\$
t$ I
~9E1
[]A\A]A^A_
A;\$
ATUH
[]A\
ATUI
[]A\
ATUH
tL[]A\
D$`H
[]A\
ATUI
[]A\
AVAUI
ATUSH
 []A\A]A^
e(M9
ATUH
[]A\
ATUI
D$81
](H9
|$8dH3<%(
@[]A\
H;5t5=
t$ L
\$ H
t$ L
ATUI
[]A\
T$ dH
D$(1
L$ H
t$(dH34%(
AVAUATUI
D$(1
L$(L
L$(dH3
0[]A\A]A^
=AW5
AVAUATUSH
W0H9W
s(H9
[]A\A]A^
T$01
k(I9
tOUSH
H=`h
H=`h
ATUH
s(M9
[]A\
ATUA
 []A\
5s.=
5:.=
5{-=
AWAVAUATI
D$(1
T$(dH3
8[]A\A]A^A_
t$ L
T$ K
AWAVAUATI
5`*=
58*=
([]A\A]A^A_
5z&=
5J&=
D$81
D$ H
T$(H
=/2=
-z1=
L$8dH3
AWAVAUATI
L$XI
L$\1
|$ H
L$PH
L$TH
t$pD
\$hASL
D$8H
L$@H
D$PH
|$(AQL
l$lAUL
D$ H
D$0H
\$0H
D$@M)
@$E1
T$8A
D$@H
D$@I
L$xQH
L$(H
T$0H
l$@j
L$ L
T$(H
D$0H
[]A\A]A^A_
|$xWH
L$(L
T$0H
t$@j
L$ L
T$(H
t$0H
D$@M)
|$HA
|$HD
d$(f
t$@H
YL$HH
[]A\
[]A\
M9L$
ATU1
H9CH
-`4;
[]A\
D$ 1
ATUI
 []A\
D$P1
L$(L
T$HdH3
5%_=
AUATI
5	]=
5H15
Z[]A\A]
H9\$
AWAVI
AUATI
Z[]A\A]A^A_
AVAUI
ATUI
|$ I
|$ I
L$$L
AUATHc
Z[]A\A]
ATUSH
dH3<%(
 []A\
ATUH
[]A\
I+L$
ATUH
[]A\
ATUH
5(-;
[]A\
AUATI
[]A\A]
AWAV1
AUATUSQ
{ L9
Z[]A\A]A^A_
ATUH
[]A\
[ dH
D$(1
D$ H
\$$ASH
T$0R
D$<P1
L$HL
t$(1
|$ WD
L$(dH3
ATUI
[]A\
AVAUI
ATUE1
U0Ic} 
]A\A]A^
+U +u
D$(1
L$$H
T$ H
\$(dH3
dH34%(
D$81
T$8dH3
AVAUATUH
[]A\A]A^
D$(1
H;|$ 
v4PH
L$ H
T$$H
t$(H
L$(D
|$ H
L$(dH3
ATU1
[]A\
AUATA
T$$L
([]A\A]
D$x1
dPAPD
T$xdH3
ATUE
d$0Hct$8
[]A\A]
AYAZH
dH34%(
AUATI
[]A\A]
[]A\A]
H= S
w.[]A\
t H= S
AWAVAUATUSH
D$X1
=65=
t$X1
|$(L
L$XL
D$PH
L$HH
L$XdH3
h[]A\A]A^A_
D$(1
H9k(
v7APH
L$ L
D$$H
L$(H
T$,H
t$0H
AYAZ
ASh 
D$$APD
L$0D
\$(dH3
v1RL
L$ L
D$$H
L$(H
T$,H
t$0H
R0Ph 
\$$S
t$@D
L$0D
AUATUSH
[]A\A]
[]A\A]
L$(L
PAR@
D$-jdH
l$HUD
L$BD
dH34%(
D$h1
ARVH
L$hdH3
AWAV
AUATUSH
D$x1
L$xdH3
[]A\A]A^A_
AWAVAUATUSH
D$(1
CDDDDDD
T$ L
T$ L
l$ I
|$ L
Tacocat
\$(dH3
8[]A\A]A^A_
CDDDDDD
|$ L
AUATI
[]A\A]
AVAUATUSH
d$`f
d$hf
d$pf
d$ f
D$0I
t$HH
D$8I
|$0L
T$xI
t$0H
l$(H
D$(I
\$0H
D$0I
T$0H
D$@H
|$0H
D$PH
T$(L
t$XI
D$@H
dH34%(
[]A\A]A^
l$HH
t$8H
D$(u
|$8L
ATUH
D$`H
[]A\
AWAVI
AUATI
[]A\A]A^A_
AUATI
[]A\A]
AWAVI
AUATI
I;o 
ATUI
[]A\
%_25
w(H9p8
ATUSH
[]A\
AWAVA
AUATUSH
T$0H
[]A\A]A^A_
t8H9
<$E1
AWAVAUATUSH
$M;y8
<$L;
L9t$
4$L;~8
[]A\A]A^A_
[]A\A]A^A_
AVAUATUSH
C M)
dH34%(
[]A\A]A^
C L)
,"H9
ATUSH
[]A\
L;C0
AUATI
t$@H
Z[]A\A]
AWAVAUATI
Z[]A\A]A^A_
0t8H
AUATI
L;c0u#
AVU1
w(H9p8u?H
AVAUATI
I;]P
[]A\A]A^Hc
]A\A]A^
Y[]H
ATUH
[]A\Hc
3u(H
ulE1
AUATUSQH
Z[]A\A]
AUATUSH
=}W<
[]A\A]
=SV<
AWAVAUATUSH
D$x1
L$xdH3
[]A\A]A^A_
wL;5
twL;5
\$ I
t$ H
T$ L
AWAVAUATI
G0H9F0H
tdM9
O H;
uNL9{ u
L;} u
[]A\A]A^A_
D$(1
D$ H
|$  S
t$ H
L$(dH3
AWAVAUATUSH
[]A\A]A^A_
V H9W t
N(H9O(u
ATUH
D$`H
uLE1
[]A\
[]A\
AUATUSQtpH
[]A\A]
AUATI
Z[]A\A]
AUATI
[]A\A]
ATUI
[]A\
ATUSH
I;l$
[]A\
w(L9
{(H9U(u
E0L;[(
[]A\
AWAVH
AUAT
L$ L
D$$H
L$(H
|$ H
|$`L
|$`H
l$01
D$4D
L$8D
T$<D
L$(L
l$(E1
|$(H
[]A\A]A^A_
AWAVAUATUSH
L$,H
l$0D
d$@f
L$,L
xrHc
[]A\A]A^A_
AUATUSH
d$ L
\$HI
l$ L
\$PM
T$HL
D$hL
L$8H
\$XL
[]A\A]
ATUSH
[]A\
AWAVAUATUSH
[]A\A]A^A_
AWAVAUATUSH
=:v<
[]A\A]A^A_
AVAUH
t$@1
t$@fA
l$DA
=Xt<
t$@D
t$@E
[]A\A]A^
-$s<
AWAVAUATUSH
D$81
\$8dH3
H[]A\A]A^A_
G(H+G
AUATUSH
([]A\A]
AVAUATUI
HcT$
 []A\A]A^
H+K@H
AUATI
[]A\A]
AUATUSH
[]A\A]
H+G@H9
|+USH
AWAVAUATUSH
[]A\A]A^A_
ATUH
[]A\
=6~4
AWAVAUATI
USQL
Z[]A\A]A^A_
AWAVAUATI
T$(H
t$0dH
D$81
t$0H
D$(H
0u%L
D$0D
t$0D
6w?E
|$0D
0<6w?
l$0D
T$0E
|$0E
T$0L
D$0A
L$0A
	wzM
\$0E
<	wdI
T$0A
	wLI
t$0E
	w4M
|$0A
D$0I
tBI9
\$0E
L9\$
\$8dH3
H[]A\A]A^A_
AUATH
([]A\A]
D$81
D$!.f
t$8dH34%(
D$!.f
[]A\
St\H
t$(H
T$0H
L$8L
D$@L
L$Ht7
)D$P
)L$`
)T$p
T$ H
AWAVI
AUAT
D$`H
d$`A
\$pA
d$`M
T$@H
D$BH
D$8H
RjdD
t$4D
l$8H
|$8I+u
D$8H
dH3<%(
[]A\A]A^A_
D$`A
D$`D9
T$`A
\$pA
T$`I
WjiD
AXAY
|$@1
t$AA
Pjx1
ARju
t$4D
A[A^
T$$E
/wMA
AUATA
[]A\A]
D$81
D$ H
L$(H
T$01
|$(H
T$ H
|$ H
|$ H
D$0I
T$0L
D$(H
T$ H
t$8dH34%(
AUAT1
I;\$
@t1H
AUATI
[]A\A]
Z[]A\A]
AWAVI
AUATH
O|OO:
rfind
\$8H
T$0L
D$(dH
D$h1
t$5H
L$ H
t$01
D$  S
D$( S
|$ H
|$(H
@0H=
L$hdH3
x[]A\A]A^A_
uDM)
ATUH
AWAVM
AUATI
D=Ja5
[]A\A]A^A_
AVAUATUI
[]A\A]A^
ATUI
[]A\
t$`H
tTqH
dH3<%(
AWAVA
AUATI
[]A\A]A^A_
AUATUSH
W,dH
t$ H
l$(L
D$0L
D$$D
\$0D
l$8A
T$4D
t$ D
D$$D
T$,D
T$4D
l$8D
h$A1
h0E1
@(E1
H4A1
P8E1
L$ F
\$$1
l$(D
T$,D
l$0D
L$4E
\$8A1
l$<F
T$@F
D$DF
\$LF
l$\D
d$`A
l$dD
d$hD
l$lD
d$pD
l$tD
d$xD
l$|D
[]A\A]
AVAUL
v8ATUH
[]A\A]A^
AVAUATUSH
W8dH
T$ H
D$(H
L$0H
\$8H
t$@H
l$HL
D$PL
\$$D
d$(D
l$,D
T$4A
D$8A
l$DD
D$HA
L$LD
\$$D
\$TD
l$,D
l$DD
D$HD
L$LD
T$PD
\$TD
d$XD
l$\A
N D1
\$ A
t$$E
D7qD
\$(D!
D$0E1
T$4A
t$8A
D$<E1
L$@D
t$DD!
l$HE
1$A1
\$LA
T$PG
\$TA
L$\G
D$`A
t$dG
D$hE
L$l	
T$pF
\$tA	
L$|G
0RQ>
!g))
m,MD
 LwH'D
o.hA
oO F
[]A\A]A^
AWAVA
AUATI
Hcu|D
Dkd$
[]A\A]A^A_
AVAUL
vXATUH
]?[]A\A]A^
AWAVAUATUSH
|$`L
t$hL
l$pL
d$xH
|$gD
t$oH
l$wD
D$`L
D$aL
D$bL
D$cL
D$dL
D$eL
D$fD
|$hL
D$iL
|$jM
D$kL
|$lM
D$mD
|$nL
t$pM
D$qD
|$rL
t$sM
D$tD
|$uD
t$vL
l$xM
D$yD
|$zD
t${L
l$|M
D$}D
|$~H
)m(L9
t$`L
G H1
_(I1
L$hH
D7qL
l$pM
L$xL
1$I!
+Yo,
&\8!
m,MH
* qW
LwH'M1
o.hH	
t$PH
\$XI
l$8H1
\$0L!
D$HM
T$(H
T$@I
oW fD
o_0fD
og@fD
\$@fD
d$PD
[]A\A]A^A_
USQH
ATUSH
[]A\
AVAUH
 []A\A]A^
AWAVH
AUAT
D$(1
L$ H
H;l$
|$(dH3<%(
8[]A\A]A^A_
\$@M
AWAVAUATUSH
$~bH
L;t$
/M9w
L9t$
([]A\A]A^A_
t$ 1
|$0A
DD$ H9
C u&H
D$(1
T$(dH3
AWAV
AUATUSH
H+;H
D$@H
l$(H
D$HPUL
L$@L
L$pH
T$<H
t$`H
t$PH
T$XH
|$`H
t$hL
L$8H
\$0D
t$(H)
t$8H
T$8H
t$4H
[]A\A]A^A_
t$8L
|$pH
AVAUATUSH
l$0H
{t&A
}t H9
{u	E
[]A\A]A^
AUATI
[]A\A]
[]A\
t%M9
AVAUATUSL
[]A\A]A^
AWAVI
AUATUSH
D$81
T$8dH3
H[]A\A]A^A_
D$ *
L$ H
AWAVAUATUSH
T$ I
\$(I
D$0H
C0t}I
L$8H
K8tjI
T$@H
S@tWI
t$HH
sHtDI
|$PH
{Pt1M
D$XI
	M9H
[]A\A]A^A_
|$ H
D$(I
L$0I
T$8I
\$@I
D$HH
L$PH
T$XH
=6}4
D$81
L$(L
D$0H
L$8H
l$(H
|$ H
T$ E1
\$8dH3
D$X1
L$(I
t$ H
\$ H
\$0H
t$@H
|$8H
|$(H
t$0H
L$XdH3
l$(H
AUATI
[]A\A]
AWAVH
AUATUSH
T$H1
L$8H
T$(H
D$( S
|$8M
|$(H
D$0H
|$@L
l$@L
|$8L
d$0M
T$HdH3
X[]A\A]A^A_
|$(H
L$8H
H9t$
L+T$
D$(1
T$ H
t$ 1
\$(dH3
AUATUSH
DDDDDDD
dH34%(
[]A\A]
DDDDDDD
O L9
D$(1
D$ H
L$(dH3
ATUSH
[]A\
AUATUSH
$t2M
Z[]A\A]
AWAVI
AUATH
D$ t`I
D$(tCI
D$0t&
G  S
G( S
G0 S
h0Z[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
AUATI
H;|$
([]A\A]
AWAVAUATUSH
L$ H
|$(H
l$0H
D$8I
L$@I
H@toM
T$HI
PHt\M
\$PI
XPtII
T$XH
PXt6I
L$`H
H`t#
[]A\A]A^A_
AWAVI
AUATH
([]A\A]A^A_
AWAVAUATUSH
D$(H
H tvH
x(tdL
@0tRL
H8t@L
P@t.L
4$}4M
[]A\A]A^A_
D$(1
AUATI
H;|$
([]A\A]
AWAVAUATUSH
p(tvH
x0tdL
@8tRL
H@t@L
PHt.L
|=H9
[]A\A]A^A_
ATUI
|$ H
[]A\
|$ H
[]A\
 []A\
AWAVAUATUSH
H= S
t{H=
[]A\A]A^A_
H= S
H= S
ATUH
[]A\
AUATI
USQH
[]A\A]
AWAVLc
AUATI
D$(1
\$(dH3
8[]A\A]A^A_
HcT$
T$ L
HcL$
T$$A
LcD$
L$ A
USHc
dH34%(
AWAVAUATUSH
[]A\A]A^A_
AVAUE
ATUI
[]A\A]A^
AWAVI
AUATI
tgI9
[]A\A]A^A_
ATUI
Z[]A\A]
ATUSH
[]A\
D$H1
T$HdH3
D$H1
L$(L
T$ H
L$HdH3
D$0H
D$(H
tgAUATA
,$X[]A\A]
AVAUATUSH
[]A\A]A^
D$H1
L$8L
T$(tT1
L$HdH3
T$ u
AVAUH
ATUSf
D$( 
|$0H
,$fA
D$0fE
4"fE
D$@L
|$ H
H9<$t	H
D$@H
[]A\A]A^
H;\$(
uXMk
)L$p
(L$p
)L$P
(L$P
)L$`
(L$`
D$x1
L$hL
L$xdH3
d$ fE
d$0fA
<$fA
d$(fD
D$h1
L$hdH3
AWAVAUATI
[]A\A]A^A_
AUATUSQH
Z[]A\A]
D$(1
L$(dH3
ATUH
[]A\
AUATI
H;S 
K H9
H;k H
$t11
[]A\A]
{ H)
dH34%(
AVAUATUSH
W dH
[]A\A]A^
AUATI
$t3H
[]A\A]
AUATUSQ
|$(H
t$0H
Z[]A\A]
=Cm3
AUATUSH
l$`I
H9T$xuzH
T$pH;T$
[]A\A]
AUATUSH
_8dH
d$8L;e0
$H;T$0
t$ L
[]A\A]
+L9l$
="G4
5	r9
ATUI
ATUSH
D$h1
T$hdH3
p[]A\
AUATUSQH
H;](|
Hct$
ATUS
[]A\
t$XL
L$XL
D$PH
L$HH
T$@H
t$8H
AWAVI
AUAT
|$PH
|$XH
|$`H
|$hH
[]A\A]A^A_
AWAVAUATUSH
|$hH
T$hI
l$ L
\$hI
D$ H
[]A\A]A^A_
Hc\$
D$@D
Lcl$
Hc|$
L$PD
Lct$
\$pH
Hcl$
T$`D
l$xL
Lct$
Ic\$
|$ L
x8Hc
|$xD
l$xH
t$`H
L$`I
l$pD
\$pH
T$XH
D$XI
\$8D
l$PH
T$8H
t$PH
\$8D
\$0A
\$HI
t$0L
|$HI
L$@I
d$(H
l$@H
t$(D
t$ A
D$ H
T$(A
L$0A
\$8A
l$pL
t$pA
t$xL
AVAUE1
ATUI
]A\A]A^
AWAVI
AUAT
L+\$
[]A\A]A^A_
ATUI
D$(1
t$(dH34%(
0[]A\
AVAU
ATUSH
[]A\A]A^
$toH
<	tP<
AVAUI
[]A\A]A^
ATUSH
t:H=p
[]A\
ATUI
[]A\
AWAVAUATUSQH
=)Z9
Z[]A\A]A^A_
H;s(t	H
s([]A\
AUATUSH
([]A\A]
AWAVAUATI
T$ H
\$(H9
ATUI
[]A\
ATUI
ATUI
[]A\
tuH=`u
T$0H
C(H9
[]A\
T$0H
D$x1
D$ H
L$(H
T$(f
T$0H
*D$H
*d$@
*D$8
*l$0
L$xdH3
AUATH
D$H1
\$0H
*T$(
*\$ 
=@>9
L$HdH3
X[]A\A]
\$0H
*D$(fE
*T$ f
=iJ9
=iI9
AWAVAUATUSH
D$(H
L$ H
t/E1
[]A\A]A^A_
T$0H
t$(H
L$$H
|$@H
L$$L
L$ H
AWAVI
AUATA
T$<dH
T$<H
|$@1
L$<H
D$@D
[]A\A]A^A_
 []A\
D$ 1
D$ H
H;\$
AWAVAUATUSH
([]A\A]A^A_
~UG;4
AUATUSH
O dH
D$X1
t$@L
t$HL
D$0L
\$XdH3
h[]A\A]
t$@H
L$H1
$t|I
D$ L
T$(L
ATUH
dH34%(
 []A\
ATUSH
O dH
G(L9
 []A\
[ucH
H9<$
5y<9
AWAV
AUATI
=^33
D$(1
t$ L
D$ H
L$ M
T$ A
H;\$
AWAV
AUATUSH
=N23
D$H1
L$(QL
L$8L
D$HH
L$@H
t$0H9t$
\$ H
|$(M
l$8M
t$@M)
l$ H
AWAV
AUATUSH
=.13
D$81
D$ H
L$(H
T$01
t$0H
L;$$
|$0L
T$ I
t$(H
T$ H
L$8dH3
H[]A\A]A^A_
T$ H
H;,$
L$0L
T$ I
t$(H
T$ L
T$ J
AWAV
AUATUSH
D$h1
D$8P1
T$HRH
L$hQH
|$8L
L$`L
D$xH
L$hH
l$@H
\$XL
l$0L
d$`H
\$HH
t$8I
t$PH
|$ L
AWAV
AUATUSH
D$H1
D$8P1
L$HL
D$0H
L$PH
T$01
d$@L
l$(L
 uYL
tGM9
l$(L
d$8E1
#H;T$@
t$ H
AWAV
AUATUSH
D$(1
H;\$
L$ H
T$ D
L$(L
D$ H
L$0H
T$(1
\$ H
$t_H
|$(I
	t%H
USQH
D$h1
\$hdH3
D$x1
L$ H
xlH)
\$xdH3
ATUI
[]A\
AWAVAUATUSH
|$ I
|$ H
o`Lc
|$pL
L$ 1
t$xE1
l$|A
\$x1
[]A\A]A^A_
AWAV1
AUATI
C(I9
t%I9
Z[]A\A]A^A_
~DH;~
t8H;~ t-H
t,H;~(t!H
t H;~0t
AUATI
I;l$
[]A\A]
AWAVAUATUSH
D$(1
Lcd$
\$(dH3
8[]A\A]A^A_
Hc|$
LcL$
Hc\$
tvH)
uGAk
AWAVAUATUSH
([]A\A]A^A_
AUATE1
USQH
AWAVH
AUATI
[]A\A]A^A_
dH34%(
z0u.H
dH34%(
333333
UUUUUU
dH34%(
dH34%(
dH34%(
AWAV
AUATUSH
dH34%(
[]A\A]A^A_
AWAVAUATUSH
D$x1
|$ 1
D$`H
T$hH
L$@1
\$xL
L$@M
L)T$`M
|$8H
T$hH
t$@H
|$ M
D$ H9D$
|$8H
|$8H
L$HH
t$XH
|$PI
L$8H
t$0H
T$0H
D$(L
D$8thI
|.HcD$lL
\$HH
\$hL
L9t$
AWAVAUATUSH
D$81
t$ E1
|$4L
d$ D
l$(Lcl$0L
L$8dH3
H[]A\A]A^A_
D$P1
D$ H
T$0R
L$@Q
\$4SH
l$XUL
L$hL
uBPj
L$0L
L$$H
T$@H
t$PH
\$HdH3
AUATHc
USQH
AWAVA
AUATL
%NV1
-NV1
[]A\A]A^A_
<stdin>
3bBc:dEhiJm:OQ:RsStuUvVW:xX?
PYTHONHASHSEED
warnall
<prefix>/pythonX.X
2.7.12
Python %s
PYTHONINSPECT
PYTHONUNBUFFERED
PYTHONNOUSERSITE
PYTHONWARNINGS
linux2
Python %s on %s
PYTHONSTARTUP
Could not open PYTHONSTARTUP
__main__
--help
--version
-J is reserved for Jython
Unknown option: -%c
Failed to open /dev/urandom
../Objects/listobject.c
GC object already tracked
PYTHONDEBUG
PYTHONVERBOSE
PYTHONOPTIMIZE
PYTHONDONTWRITEBYTECODE
modules
exceptions
PYTHONIOENCODING
Cannot set codeset of stdin
Cannot set codeset of stdout
Cannot set codeset of stderr
sem_init
sem_wait
sem_trywait
sem_post
<dummy key>
unhashable type: '%.200s'
../Objects/dictobject.c
Can't initialize type type
Can't initialize weakref type
Can't initialize bool type
Can't initialize str type
Can't initialize list type
Can't initialize None type
Can't initialize super type
Can't initialize object type
Can't initialize xrange type
Can't initialize dict type
Can't initialize set type
Can't initialize unicode type
Can't initialize slice type
Can't initialize complex type
Can't initialize float type
Can't initialize buffer type
Can't initialize long type
Can't initialize int type
Can't initialize tuple type
Can't initialize code type
Can't initialize frame type
Can't initialize method type
Can't initialize class type
Can't initialize wrapper type
Can't initialize file type
Can't initialize capsule type
Can't initialize cell type
__hash__
__doc__
__eq__
../Objects/tupleobject.c
duplicate base class %s
argument must be iterable
unmatched paren in format
Unmatched paren in format
Bad dict format
__del__
uncollectable
gc: done
, %.4fs elapsed
garbage collection
gc: %.100s <%.100s %p>
__builtins__
bits_per_digit
size of a digit in bits
sizeof_digit
exceptions.SystemError
exceptions.StopIteration
True if the file is closed
closefd
String giving the file mode
readall
tell
seekable
fileno
_io.FileIO
exceptions.Warning
exceptions.ValueError
exceptions.DeprecationWarning
exceptions.TypeError
Inappropriate argument type.
exceptions.ArithmeticError
exceptions.OverflowError
exceptions.LookupError
Base class for lookup errors.
tb_next
tb_frame
tb_lasti
tb_lineno
symbols
children
optimized
nested
symtable entry
capitalize
rpartition
swapcase
startswith
endswith
islower
isupper
istitle
isspace
isdecimal
isdigit
isnumeric
isalpha
isalnum
_formatter_field_name_split
_formatter_parser
__sizeof__
__getnewargs__
__unicode__
__length_hint__
tupleiterator
basestring
stop
step
indices
__contains__
copy
intersection
isdisjoint
issubset
issuperset
symmetric_difference
union
discard
intersection_update
symmetric_difference_update
__reversed__
__self__
itemsize
shape
strides
suboffsets
readonly
ndim
tobytes
tolist
dict_keys
dict_items
dict_values
dictionary-keyiterator
dictionary-valueiterator
dictionary-itemiterator
__getitem__
has_key
setdefault
popitem
viewkeys
viewitems
viewvalues
fromkeys
iterkeys
itervalues
iteritems
real
imag
numerator
denominator
conjugate
bit_length
__trunc__
listiterator
Borrow or rob
listreverseiterator
__func__
classmethod
func_code
__code__
func_defaults
__defaults__
func_dict
func_name
func_closure
__closure__
func_doc
func_globals
__globals__
f_locals
f_lineno
f_trace
f_restricted
f_exc_traceback
f_exc_type
f_exc_value
f_back
f_code
f_builtins
f_globals
f_lasti
as_integer_ratio
is_integer
__getformat__
newlines
softspace
file name
file encoding
Unicode error handler
xreadlines
__enter__
__exit__
gi_frame
gi_running
gi_code
throw
D.keys() -> list of D's keys
__objclass__
fget
fdel
setter
deleter
co_argcount
co_nlocals
co_stacksize
co_flags
co_code
co_consts
co_names
co_varnames
co_freevars
co_cellvars
co_filename
co_name
co_firstlineno
co_lnotab
PyCObject
im_class
im_func
im_self
cell_contents
bytearray_iterator
__alloc__
append
extend
reverse
__thisclass__
the class invoking super()
__self_class__
__class__
the object's class
helper for pickle
__subclasshook__
default object formatter
__abstractmethods__
__basicsize__
__itemsize__
__flags__
__weakrefoffset__
__base__
__dictoffset__
__mro__
__subclasses__
message
__setstate__
exceptions.BaseException
exceptions.Exception
exceptions.StandardError
exception errno
exception strerror
exception filename
exceptions.EnvironmentError
exceptions.IOError
I/O operation failed.
Always return None
unnamed field
sys.long_info
classmethod_descriptor
__str__
__repr__
__getattribute__
__getattr__
__setattr__
__delattr__
__cmp__
x.__cmp__(y) <==> cmp(x,y)
x.__repr__() <==> repr(x)
x.__hash__() <==> hash(x)
x.__call__(...) <==> x(...)
x.__str__() <==> str(x)
__lt__
x.__lt__(y) <==> x<y
__le__
x.__le__(y) <==> x<=y
x.__eq__(y) <==> x==y
__ne__
x.__ne__(y) <==> x!=y
__gt__
x.__gt__(y) <==> x>y
__ge__
x.__ge__(y) <==> x>=y
__iter__
x.__iter__() <==> iter(x)
__get__
__set__
descr.__set__(obj, value)
__delete__
descr.__delete__(obj)
__add__
x.__add__(y) <==> x+y
__radd__
x.__radd__(y) <==> y+x
__sub__
x.__sub__(y) <==> x-y
__rsub__
x.__rsub__(y) <==> y-x
__mul__
x.__mul__(y) <==> x*y
__rmul__
x.__rmul__(y) <==> y*x
__div__
x.__div__(y) <==> x/y
__rdiv__
x.__rdiv__(y) <==> y/x
__mod__
x.__mod__(y) <==> x%y
__rmod__
x.__rmod__(y) <==> y%x
__divmod__
__rdivmod__
__pow__
__rpow__
__neg__
x.__neg__() <==> -x
__pos__
x.__pos__() <==> +x
__abs__
x.__abs__() <==> abs(x)
__nonzero__
x.__nonzero__() <==> x != 0
__invert__
x.__invert__() <==> ~x
__lshift__
x.__lshift__(y) <==> x<<y
__rlshift__
x.__rlshift__(y) <==> y<<x
__rshift__
x.__rshift__(y) <==> x>>y
__rrshift__
x.__rrshift__(y) <==> y>>x
__and__
x.__and__(y) <==> x&y
__rand__
x.__rand__(y) <==> y&x
__xor__
x.__xor__(y) <==> x^y
__rxor__
x.__rxor__(y) <==> y^x
__or__
x.__or__(y) <==> x|y
__ror__
x.__ror__(y) <==> y|x
__coerce__
__int__
x.__int__() <==> int(x)
__long__
x.__long__() <==> long(x)
__float__
x.__float__() <==> float(x)
__oct__
x.__oct__() <==> oct(x)
__hex__
x.__hex__() <==> hex(x)
__iadd__
x.__iadd__(y) <==> x+=y
__isub__
x.__isub__(y) <==> x-=y
__imul__
x.__imul__(y) <==> x*=y
__idiv__
x.__idiv__(y) <==> x/=y
__imod__
x.__imod__(y) <==> x%=y
__ipow__
x.__ipow__(y) <==> x**=y
__ilshift__
x.__ilshift__(y) <==> x<<=y
__irshift__
x.__irshift__(y) <==> x>>=y
__iand__
x.__iand__(y) <==> x&=y
__ixor__
x.__ixor__(y) <==> x^=y
__ior__
x.__ior__(y) <==> x|=y
__floordiv__
x.__floordiv__(y) <==> x//y
__rfloordiv__
x.__rfloordiv__(y) <==> y//x
__truediv__
x.__truediv__(y) <==> x/y
__rtruediv__
x.__rtruediv__(y) <==> y/x
__ifloordiv__
x.__ifloordiv__(y) <==> x//=y
__itruediv__
x.__itruediv__(y) <==> x/=y
__index__
__len__
x.__len__() <==> len(x)
x.__getitem__(y) <==> x[y]
__setitem__
__delitem__
x.__mul__(n) <==> x*n
x.__rmul__(n) <==> n*x
__getslice__
__setslice__
__delslice__
x.__contains__(y) <==> y in x
callable-iterator
cell
PyCapsule
member_descriptor
ellipsis
wrapper_descriptor
getset_descriptor
generator
dictproxy
classobj
instancemethod
builtin_function_or_method
reversed
frozenset
staticmethod
xrange
The most base type
NotImplementedType
NoneType
weakproxy
weakcallableproxy
python
imp.NullImporter
Null importer object
not enough memory to copy -c argument
not enough memory to copy -m argument
-Q option should be `-Qold', `-Qwarn', `-Qwarnall', or `-Qnew' only
usage: %s [option] ... [-c cmd | -m mod | file | -] [arg] ...
Try `python -h' for more information.
Options and arguments (and corresponding environment variables):
-B     : don't write .py[co] files on import; also PYTHONDONTWRITEBYTECODE=x
-c cmd : program passed in as string (terminates option list)
-d     : debug output from parser; also PYTHONDEBUG=x
-E     : ignore PYTHON* environment variables (such as PYTHONPATH)
-h     : print this help message and exit (also --help)
-i     : inspect interactively after running script; forces a prompt even
         if stdin does not appear to be a terminal; also PYTHONINSPECT=x
-m mod : run library module as a script (terminates option list)
-O     : optimize generated bytecode slightly; also PYTHONOPTIMIZE=x
-OO    : remove doc-strings in addition to the -O optimizations
-R     : use a pseudo-random salt to make hash() values of various types be
         unpredictable between separate invocations of the interpreter, as
         a defense against denial-of-service attacks
-Q arg : division options: -Qold (default), -Qwarn, -Qwarnall, -Qnew
-s     : don't add user site directory to sys.path; also PYTHONNOUSERSITE
-S     : don't imply 'import site' on initialization
-t     : issue warnings about inconsistent tab usage (-tt: issue errors)
-u     : unbuffered binary stdout and stderr; also PYTHONUNBUFFERED=x
         see man page for details on internal buffering relating to '-u'
-v     : verbose (trace import statements); also PYTHONVERBOSE=x
         can be supplied multiple times to increase verbosity
-V     : print the Python version number and exit (also --version)
-W arg : warning control; arg is action:message:category:module:lineno
         also PYTHONWARNINGS=arg
-x     : skip first line of source, allowing use of non-Unix forms of #!cmd
-3     : warn about Python 3.x incompatibilities that 2to3 cannot trivially fix
file   : program read from script file
-      : program read from stdin (default; interactive mode if a tty)
arg ...: arguments passed to program in sys.argv[1:]
Other environment variables:
PYTHONSTARTUP: file executed on interactive startup (no default)
PYTHONPATH   : '%c'-separated list of directories prefixed to the
               default module search path.  The result is sys.path.
PYTHONHOME   : alternate <prefix> directory (or <prefix>%c<exec_prefix>).
               The default module search path uses %s.
PYTHONCASEOK : ignore case in 'import' statements (Windows).
PYTHONIOENCODING: Encoding[:errors] used for stdin/stdout/stderr.
PYTHONHASHSEED: if this variable is set to 'random', the effect is the same
   as specifying the -R option: a random value is used to seed the hashes of
   str, bytes and datetime objects.  It can also be set to an integer
   in the range [0,4294967295] to get hash values with a predictable seed.
not enough memory to copy PYTHONWARNINGS
Type "help", "copyright", "credits" or "license" for more information.
%s: can't open file '%s': [Errno %d] %s
%s: '%s' is a directory, cannot continue
-X is reserved for implementation-specific arguments
Argument expected for the -%c option
PYTHONHASHSEED must be "random" or an integer in range [0; 4294967295]
Failed to read bytes from /dev/urandom
Py_Initialize: can't make first interpreter
Py_Initialize: can't make first thread
Py_Initialize: can't init frames
Py_Initialize: can't init ints
Py_Initialize: can't init longs
Py_Initialize: can't make modules dictionary
Py_Initialize: can't make modules_reloading dictionary
Py_Initialize: can't initialize __builtin__
Py_Initialize: can't initialize builtins dict
Py_Initialize: can't initialize sys
Py_Initialize: can't initialize sys dict
Can't initialize threads for interpreter
string is too long for a Python string
cannot add more objects to list
PyString_InternInPlace: strings only please!
Couldn't create autoTLSkey mapping
Can't initialize callable weakref proxy type
Can't initialize weakref proxy type
Can't initialize bytearray type
Can't initialize NotImplemented type
Can't initialize traceback type
Can't initialize static method type
Can't initialize frozenset type
Can't initialize property type
Can't initialize memoryview type
Can't initialize enumerate type
Can't initialize reversed type
Can't initialize builtin function type
Can't initialize function type
Can't initialize dict proxy type
Can't initialize generator type
Can't initialize get-set descriptor type
Can't initialize instance type
Can't initialize ellipsis type
Can't initialize member descriptor type
Can't initialize call iter type
Can't initialize sequence iterator type
method cannot be both class and static
Overriding __eq__ blocks inheritance of __hash__ in 3.x
type '%.100s' is not dynamically allocated but its base type '%.100s' is dynamically allocated
type '%.100s' participates in gc and is a base type but has inappropriate tp_free slot
Out of memory interning slotdef names
deletion of interned string failed
Immortal interned string died.
Inconsistent interned string state.
mro() returned a non-class ('%.500s')
mro() returned base with unsuitable layout ('%.500s')
string too long for Python string
NULL object passed to Py_BuildValue
bad format char passed to Py_BuildValue
cannot create weak reference to '%s' object
gc couldn't allocate "__del__"
gc: collecting generation %d...
gc: objects in each generation:
gc: done, %zd unreachable, %zd uncollectable
gc couldn't create gc.garbage list
unexpected exception during garbage collection
gc: %.100s <%.100s instance at %p>
size in bytes of the C type used to represent a digit
Internal error in the Python interpreter.
Please report this to the Python maintainer, along with the traceback,
the Python version, and the hardware/OS platform and version.
Signal the end from iterator.next().
True if the file descriptor will be closed by close().
Base class for warning categories.
Inappropriate argument value (of correct type).
Base class for warnings about deprecated features.
Base class for arithmetic errors.
Result too large to be represented.
the real part of a complex number
the imaginary part of a complex number
the numerator of a rational number in lowest terms
the denominator of a rational number in lowest terms
Returns self, the complex conjugate of any long.
Truncating an Integral returns itself.
Returns size in memory, in bytes
Returns self, the complex conjugate of any int.
Return self, the complex conjugate of any float.
Return the Integral closest to x between 0 and x.
Return True if the float is an integer.
end-of-line convention used in this file
flag indicating that a space needs to be printed; used by print
file mode ('r', 'U', 'w', 'a', possibly with 'b' or '+' added)
D.has_key(k) -> True if D has a key k, else False
D.get(k[,d]) -> D[k] if D.has_key(k), else d.  d defaults to None.
D.values() -> list of D's values
D.items() -> list of D's (key, value) pairs, as 2-tuples
D.iterkeys() -> an iterator over the keys of D
D.itervalues() -> an iterator over the values of D
D.iteritems() -> an iterator over the (key, value) items of D
D.copy() -> a shallow copy of D
the class associated with a method
the function (or other callable) implementing a method
the instance to which a method is bound; None for unbound methods
the instance invoking super(); may be None
the type of the instance invoking super(); may be None
__sizeof__() -> int
size of object in memory, in bytes
mro() -> list
return a type's method resolution order
__subclasses__() -> list of immediate subclasses
__instancecheck__() -> bool
check if an object is an instance
__subclasscheck__() -> bool
check if a class is a subclass
Common base class for all exceptions
Common base class for all non-exit exceptions.
Base class for all standard Python exceptions that do not represent
interpreter exiting.
Base class for I/O related errors.
T.__new__(S, ...) -> a new object with type S, a subtype of T
x.__getattribute__('name') <==> x.name
x.__setattr__('name', value) <==> x.name = value
x.__delattr__('name') <==> del x.name
x.next() -> the next value, or raise StopIteration
descr.__get__(obj[, type]) -> value
x.__init__(...) initializes x; see help(type(x)) for signature
x.__divmod__(y) <==> divmod(x, y)
x.__rdivmod__(y) <==> divmod(y, x)
x.__pow__(y[, z]) <==> pow(x, y[, z])
y.__rpow__(x[, z]) <==> pow(x, y[, z])
x.__coerce__(y) <==> coerce(x, y)
x[y:z] <==> x[y.__index__():z.__index__()]
x.__setitem__(i, y) <==> x[i]=y
x.__delitem__(y) <==> del x[y]
x.__getslice__(i, j) <==> x[i:j]
           
           Use of negative indices is not supported.
x.__setslice__(i, j, y) <==> x[i:j]=y
           
           Use  of negative indices is not supported.
x.__delslice__(i, j) <==> del x[i:j]
           
           Use of negative indices is not supported.
B.upper() -> copy of B
Return a copy of B with all ASCII characters converted to uppercase.
B.title() -> copy of B
Return a titlecased version of B, i.e. ASCII words start with uppercase
characters, all remaining cased characters have lowercase.
B.swapcase() -> copy of B
Return a copy of B with uppercase ASCII characters converted
to lowercase ASCII and vice versa.
B.lower() -> copy of B
Return a copy of B with all ASCII characters converted to lowercase.
B.isupper() -> bool
Return True if all cased characters in B are uppercase and there is
at least one cased character in B, False otherwise.
B.istitle() -> bool
Return True if B is a titlecased string and there is at least one
character in B, i.e. uppercase characters may only follow uncased
characters and lowercase characters only cased ones. Return False
otherwise.
B.isspace() -> bool
Return True if all characters in B are whitespace
and there is at least one character in B, False otherwise.
B.islower() -> bool
Return True if all cased characters in B are lowercase and there is
at least one cased character in B, False otherwise.
B.isdigit() -> bool
Return True if all characters in B are digits
and there is at least one character in B, False otherwise.
B.isalpha() -> bool
Return True if all characters in B are alphabetic
and there is at least one character in B, False otherwise.
B.isalnum() -> bool
Return True if all characters in B are alphanumeric
and there is at least one character in B, False otherwise.
B.capitalize() -> copy of B
Return a copy of B with only its first character capitalized (ASCII)
and the rest lower-cased.
Can't initialize 'unicode'
Ellipsis
NotImplemented
False
True
../Objects/moduleobject.c
<stdout>
<stderr>
__stdin__
__stdout__
__stderr__
__displayhook__
excepthook
__excepthook__
hexversion
CPython
(ssz)
subversion
(szz)
_mercurial
dont_write_bytecode
api_version
copyright
platform
executable
exec_prefix
maxsize
maxint
py3kwarning
x86_64-linux-gnu
_multiarch
maxunicode
builtin_module_names
little
byteorder
warnoptions
final
float_repr_style
pydebug
(isO)
<uninitialized file>
[GCC 5.4.0 20160609]
%.80s (%.80s) %.80s
%s%s%s, %.20s, %.9s
14:50:18
Dec  4 2017
string is too large
PYTHONPATH
os.py
Modules/Setup
/usr
pybuilddir.txt
lib/lib-dynload
PYTHONHOME
an integer is required
|OOi:sort
expected a sortwrapperobject
list modified during sort
 in cmp
can't assign sys.path
can't create sys.path
.pyc
.pyo
NotImplementedError
UnicodeTranslateError
PendingDeprecationWarning
OOOOi
{OO}
__path__
__package__ set to non-string
Package name too long
Module name too long
Could not set __package__
Empty module name
No module named %.200s
not holding the import lock
../Objects/methodobject.c
s|OOOi:__import__
../Python/getargs.c
exception encoding
exception object
exception start
exception end
exception reason
exception msg
exception lineno
exception offset
exception text
exception print_file_and_line
exception code
cmath
_struct
operator
_random
_collections
_heapq
itertools
strop
_functools
_bisect
unicodedata
_locale
select
_socket
_md5
_sha
_sha256
_sha512
syslog
binascii
cStringIO
cPickle
zlib
posix
_sre
_codecs
_weakref
zipimport
_symtable
xxsubtype
marshal
_ast
_warnings
py3k_warning
division_warning
division_new
-Qnew
inspect
interactive
optimize
-O or -OO
no_user_site
no_site
ignore_environment
tabcheck
-t or -tt
verbose
bytes_warning
hash_randomization
Major release number
Minor release number
micro
Patch release number
releaselevel
serial
Serial release number
max_exp
max_10_exp
min_exp
min_10_exp
DBL_DIG -- digits
mant_dig
epsilon
radix
FLT_ROUNDS -- addition rounds
fromlist
exceptions.BytesWarning
exceptions.UnicodeWarning
exceptions.ImportWarning
exceptions.FutureWarning
exceptions.RuntimeWarning
exceptions.SyntaxWarning
exceptions.UserWarning
exceptions.BufferError
Buffer error.
exceptions.MemoryError
Out of memory.
exceptions.ReferenceError
exceptions.ZeroDivisionError
exceptions.FloatingPointError
exceptions.AssertionError
Assertion failed.
Unicode translation error.
exceptions.UnicodeDecodeError
Unicode decoding error.
exceptions.UnicodeEncodeError
Unicode encoding error.
exceptions.UnicodeError
Unicode related error.
exceptions.KeyError
Mapping key not found.
exceptions.IndexError
Sequence index out of range.
exceptions.TabError
exceptions.IndentationError
Improper indentation.
exceptions.SyntaxError
Invalid syntax.
exceptions.AttributeError
Attribute not found.
exceptions.UnboundLocalError
exceptions.NameError
Name not found globally.
exceptions.RuntimeError
Unspecified run-time error.
exceptions.EOFError
Read beyond end of file.
exceptions.OSError
OS system call failed.
exceptions.ImportError
exceptions.KeyboardInterrupt
Program interrupted by user.
exceptions.SystemExit
exceptions.GeneratorExit
.x86_64-linux-gnu.so
module.so
sortwrapper
cmpwrapper
sys.flags
sys.version_info
callstats
_clear_type_cache
_current_frames
exc_info
exc_clear
getdefaultencoding
getdlopenflags
getfilesystemencoding
getrefcount
getrecursionlimit
getcheckinterval
setprofile
getprofile
settrace
gettrace
apply
coerce
delattr
divmod
eval
getattr
hasattr
hash
isinstance
issubclass
raw_input
reload
repr
setattr
formatteriterator
fieldnameiterator
EncodingMap
sys.float_info
Can't initialize field name iterator type
Can't initialize formatter iter type
Python import machinery not initialized
module functions cannot set METH_CLASS or METH_STATIC
PyThreadState_Get: no current thread
PyImport_GetModuleDict: no module dictionary!
Python error: <stdin> is a directory, cannot continue
Negative size passed to PyString_FromStringAndSize
:plat-x86_64-linux-gnu:lib-tk:lib-old
Could not find platform independent libraries <prefix>
Could not find platform dependent libraries <exec_prefix>
Consider setting $PYTHONHOME to <prefix>[:<exec_prefix>]
Not enough memory for dynamic PYTHONPATH.
Using default static PYTHONPATH.
buffer overflow in getpath.c's joinpath()
__int__ method should return an integer
the cmp argument is not supported in 3.x
tp_compare didn't return -1, 0 or 1
comparing unequal types not supported in 3.x
_PyImport_FixupExtension: module %.200s not loaded
list assignment index out of range
Can't initialize import file table.
exceptions bootstrapping error.
Module dictionary insertion problem.
Cannot pre-allocate MemoryError instance
Cannot pre-allocate RuntimeError instance for recursion errors
maximum recursion depth exceeded
cannot allocate argument for RuntimeError pre-allocation
cannot allocate tuple for RuntimeError pre-allocation
init of pre-allocated RuntimeError failed
Import by filename is not supported.
Attempted relative import in non-package
Attempted relative import beyond toplevel package
Parent module '%.200s' not found while handling absolute import
Parent module '%.200s' not loaded, cannot perform relative import
attribute name must be string, not '%.200s'
'%.50s' object has no attribute '%.400s'
 while calling a Python object
NULL result without error in PyObject_Call
'%.200s' object is not callable
%.200s() takes no arguments (%zd given)
%.200s() takes exactly one argument (%zd given)
%.200s() takes no keyword arguments
'alpha', 'beta', 'candidate', or 'release'
Return the size (in bytes) of this object
DBL_MAX -- maximum representable finite float
DBL_MAX_EXP -- maximum int e such that radix**(e-1) is representable
DBL_MAX_10_EXP -- maximum int e such that 10**e is representable
DBL_MIN -- Minimum positive normalizer float
DBL_MIN_EXP -- minimum int e such that radix**(e-1) is a normalized float
DBL_MIN_10_EXP -- minimum int e such that 10**e is a normalized
DBL_MANT_DIG -- mantissa digits
DBL_EPSILON -- Difference between 1 and the next representable float
FLT_RADIX -- radix of exponent
Base class for warnings about bytes and buffer related problems, mostly
related to conversion from str or comparing to str.
Base class for warnings about Unicode related problems, mostly
related to conversion problems.
Base class for warnings about probable mistakes in module imports
Base class for warnings about constructs that will change semantically
in the future.
Base class for warnings about dubious runtime behavior.
Base class for warnings about dubious syntax.
exceptions.PendingDeprecationWarning
Base class for warnings about features which will be deprecated
in the future.
Base class for warnings generated by user code.
Weak ref proxy used after referent went away.
Second argument to a division or modulo operation was zero.
Floating point operation failed.
exceptions.UnicodeTranslateError
Improper mixture of spaces and tabs.
Local name referenced but not bound to a value.
exceptions.NotImplementedError
Method or function hasn't been implemented yet.
Import can't find module, or can't find name in module.
Request to exit from the interpreter.
Request that a generator exit.
integer<b>
integer<B>
integer<h>
integer<H>
integer<i>
integer<I>
integer<l>
long<L>
float<f>
float<d>
complex<D>
(unicode conversion error)
(cleanup problem)
size does not fit in an int
string without null bytes
string or None
(buffer is NULL)
(encoding failed)
(buffer_len is NULL)
(memory error)
cannot convert raw buffers
(unspecified)
read-write buffer
contiguous buffer
string or pinned buffer
(impossible<bad format char>)
%s: '%s'
keywords must be strings
__all__
%lld
%llu
../Objects/stringobject.c
module '%s' has no __dict__
# installing zipimport hook
meta_path
path_importer_cache
path_hooks
# can't import zipimport
# installed zipimport hook
module name is too long
# trying %s
import hook without loader
import %s # builtin
zipimport.ZipImportError
_zip_directory_cache
type() takes 1 or 3 arguments
SO!O!:type
__slots__
__slots__ must be identifiers
__weakref__
bases must be types
SIG_DFL
SIG_IGN
NSIG
default_int_handler
SIGHUP
SIGINT
SIGQUIT
SIGILL
SIGTRAP
SIGIOT
SIGABRT
SIGFPE
SIGKILL
SIGBUS
SIGSEGV
SIGSYS
SIGPIPE
SIGALRM
SIGTERM
SIGUSR1
SIGUSR2
SIGCLD
SIGCHLD
SIGPWR
SIGIO
SIGURG
SIGWINCH
SIGPOLL
SIGSTOP
SIGTSTP
SIGCONT
SIGTTIN
SIGTTOU
SIGVTALRM
SIGPROF
SIGXCPU
SIGXFSZ
SIGRTMIN
SIGRTMAX
ITIMER_REAL
ITIMER_VIRTUAL
ITIMER_PROF
signal.ItimerError
too many digits in integer
ignore
once_registry
default_action
filters
unknown action
can't create __main__ module
Fatal Python error: %s
list index out of range
unknown encoding: %s
not a Zip file
bad central directory size
bad central directory offset
bad local header offset
zipimporter()
s:zipimporter
archive path is empty
archive path too long
Zip path name is too long
can't open Zip file: '%.200s'
sHIIkHHI
can't read Zip file: %.200s
encodings
detach
_io._TextIOBase
_io._BufferedIOBase
_io._RawIOBase
_CHUNK_SIZE
line_buffering
_io.TextIOWrapper
reset
_io.IncrementalNewlineDecoder
_checkClosed
_checkSeekable
_checkReadable
_checkWritable
_io._IOBase
_io.BufferedRWPair
_io.BufferedRandom
_io.BufferedWriter
_io.BufferedReader
__hello__
__phello__
__phello__.spam
archive
strict
strict_errors
ignore_errors
xmlcharrefreplace
xmlcharrefreplace_errors
backslashreplace
backslashreplace_errors
pause
bases
zipimport.zipimporter
%s%s takes at most %d argument%s (%d given)
More keyword list entries (%d) than format specifiers (%d)
Argument given by name ('%s') and position (%d)
integer argument expected, got float
unsigned byte integer is less than minimum
unsigned byte integer is greater than maximum
signed short integer is less than minimum
signed short integer is greater than maximum
signed integer is greater than maximum
signed integer is less than minimum
string without null bytes or None
(unknown parser marker combination)
string or unicode or text buffer
(encoder failed to return a string)
encoded string too long (%zd, maximum length %zd)
encoded string without null bytes
single-segment read-write buffer
invalid use of 't' format character
string or read-only character buffer
string or single-segment read-only buffer
Required argument '%s' (pos %d) not found
PyCapsule_SetDestructor called with invalid PyCapsule object
more argument specifiers than keyword list entries (remaining format:'%s')
'%s' is an invalid keyword argument for this function
Item in ``from list'' not a string
PyModule_AddObject() needs module as first arg
PyModule_AddObject() needs non-NULL value
%s does not take keyword arguments
initializing sys.meta_path, sys.path_hooks, path_importer_cache, or NullImporter failed
# can't import zipimport.zipimporter
sys.meta_path must be a list of import hooks
full frozen module name too long
No frozen submodule named %.200s
sys.path must be a list of directory names
sys.path_hooks must be a list of import hooks
sys.path_importer_cache must be a dict
Not importing directory '%.*s': missing __init__.py
file object required for import (type code %d)
Purported %s module %.200s not found
%s module %.200s not properly initialized
Don't know how to import %.200s (type code %d)
Cannot re-init internal module %.200s
import %s # previously loaded (%s)
PyErr_NewException: name must be module.class
cannot create '%.100s' instances
metaclass conflict: the metaclass of a derived class must be a (non-strict) subclass of the metaclasses of all its bases
nonempty __slots__ not supported for subtype of '%s'
__slots__ items must be strings, not '%.200s'
__dict__ slot disallowed: we already got one
__weakref__ slot disallowed: either we already got one, or __itemsize__ != 0
type name must not contain null characters
a new-style class can't have only classic bases
type '%.100s' is not an acceptable base type
multiple bases have instance lay-out conflict
type.__init__() takes no keyword arguments
type.__init__() takes 1 or 3 arguments
object.__init__() takes no parameters
can't add __builtins__ to __main__
tls find_key: small circular list(!)
tls find_key: circular list(!)
no codec search functions registered: can't find encoding
codec search functions must return 4-tuples
bad central directory size or offset
# zipimport: found %u names in %.200s
can't initialize codec error registry
can't initialize codec registry
Implements the 'strict' error handling, which raises a UnicodeError on coding errors.
Implements the 'ignore' error handling, which ignores malformed data and continues.
Implements the 'replace' error handling, which replaces malformed data with a replacement marker.
Implements the 'xmlcharrefreplace' error handling, which replaces an unencodable character with the appropriate XML character reference.
Implements the 'backslashreplace' error handling, which replaces an unencodable character with a backslashed escape sequence.
dictionary for instance variables (if defined)
list of weak references to the object (if defined)
 !"#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
handler must be callable
exactly
at least
at most
excess ')' in getargs format
missing ')' in getargs format
%.200s%s takes no arguments
bad format string: %.200s
 in __subclasscheck__
NullImporter()
s:NullImporter
empty pathname
existing directory
# %s has bad magic
# %s has bad mtime
# %s matches %s
import %s # from %s
# can't create %s
# can't write %s
# wrote %s
Non-code object in %.200s
recursion limit exceeded
import %s # directory %s
__file__
non-string found in code slot
tuple index out of range
../Objects/codeobject.c
utf-8
Tab size set to %d
no mem for next token
import_stmt
no mem for new parser
XXX too many states!
XXX ambiguity!
pass
break
continue
raise
exec
assert
elif
finally
except
lambda
yield
single_input
file_input
eval_input
decorator
decorators
decorated
funcdef
varargslist
fpdef
fplist
simple_stmt
small_stmt
expr_stmt
augassign
print_stmt
del_stmt
pass_stmt
flow_stmt
break_stmt
continue_stmt
return_stmt
yield_stmt
raise_stmt
import_name
import_from
import_as_name
dotted_as_name
import_as_names
dotted_as_names
dotted_name
global_stmt
exec_stmt
assert_stmt
compound_stmt
if_stmt
while_stmt
for_stmt
try_stmt
with_stmt
with_item
except_clause
suite
testlist_safe
old_test
old_lambdef
or_test
and_test
not_test
comparison
comp_op
xor_expr
and_expr
shift_expr
arith_expr
term
factor
power
atom
listmaker
testlist_comp
trailer
subscriptlist
subscript
sliceop
exprlist
testlist
dictorsetmaker
classdef
arglist
list_iter
list_for
list_if
comp_iter
comp_for
comp_if
testlist1
encoding_decl
yield_expr
tab-width:
:tabstop=
:ts=
set tabsize=
too many tuple nesting levels in argument format string
%.200s%s takes at least one argument
old style getargs format uses new features
new style getargs format but argument is not a tuple
%.150s%s takes %s %d argument%s (%ld given)
descriptor '%s' for '%s' objects doesn't apply to '%s' object
issubclass() arg 1 must be a class
issubclass() arg 2 must be a class or tuple of classes
unable to get file status from '%s'
import %s # precompiled from %s
EOF read where object expected
bad marshal data (long size out of range)
bad marshal data (unnormalized long data)
bad marshal data (digit out of range in long)
bad marshal data (string size out of range)
bad marshal data (string ref out of range)
bad marshal data (unicode size out of range)
bad marshal data (tuple size out of range)
NULL object in marshal data for tuple
bad marshal data (list size out of range)
NULL object in marshal data for list
bad marshal data (set size out of range)
NULL object in marshal data for set
bad marshal data (unknown type code)
cannot unmarshal code objects in restricted execution mode
0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz
tok_backup: beginning of buffer
<> not supported in 3.x; use !=
s_push: parser stack overflow
no mem to build parser accelerators
XXX too high nonterminal number!
no mem to add parser accelerators
Loaded module %.200s not found in sys.modules
import:  deleting existing key insys.modules failed
PyEval_EvalCodeEx: NULL globals
%.200s() takes %s %d argument%s (%d given)
%.200s() keywords must be strings
%.200s() got an unexpected keyword argument '%.400s'
%.200s() got multiple values for keyword argument '%.400s'
%.200s() takes no arguments (%d given)
3333333333
3233333333333333333333333333	3
33333333333333333333333333
 constructor
ceval: tstate mix-up
ceval: orphan tstate
lost sys.displayhook
bad RAISE_VARARGS oparg
no locals
XXX block stack underflow
'finally' pops bad exception
__metaclass__
name '%.200s' is not defined
no locals when deleting %s
too many values to unpack
no locals when loading %s
../Objects/cellobject.c
__import__ not found
cannot import name %.230s
XXX block stack overflow
XXX lineno: %d, opcode: %d
unknown opcode
argument list must be a tuple
iso-8859-1
utf-8-
iso-latin-1
iso-8859-1-
iso-latin-1-
encoding problem: %s
encoding problem: %s with BOM
errorcode
ENODEV
ENOCSI
EHOSTUNREACH
ENOMSG
EUCLEAN
EL2NSYNC
EL2HLT
ENODATA
ENOTBLK
ENOSYS
EPIPE
EINVAL
EOVERFLOW
EADV
EINTR
EUSERS
ENOTEMPTY
ENOBUFS
EPROTO
EREMOTE
ENAVAIL
ECHILD
ELOOP
EXDEV
E2BIG
ESRCH
EMSGSIZE
EAFNOSUPPORT
EBADR
EHOSTDOWN
EPFNOSUPPORT
ENOPROTOOPT
EBUSY
EWOULDBLOCK
EBADFD
EDOTDOT
EISCONN
ENOANO
ESHUTDOWN
ECHRNG
ELIBBAD
ENONET
EBADE
EBADF
EMULTIHOP
EUNATCH
EPROTOTYPE
ENOSPC
ENOEXEC
EALREADY
ENETDOWN
ENOTNAM
EACCES
ELNRNG
EILSEQ
ENOTDIR
ENOTUNIQ
EPERM
EDOM
EXFULL
ECONNREFUSED
EISDIR
EPROTONOSUPPORT
EROFS
EADDRNOTAVAIL
EIDRM
ECOMM
ESRMNT
EREMOTEIO
EL3RST
EBADMSG
ENFILE
ELIBMAX
ESPIPE
ENOLINK
ENETRESET
ETIMEDOUT
ENOENT
EEXIST
EDQUOT
ENOSTR
EBADSLT
EBADRQC
ELIBACC
EFAULT
EFBIG
EDEADLK
ENOTCONN
EDESTADDRREQ
ELIBSCN
ENOLCK
EISNAM
ECONNABORTED
ENETUNREACH
ESTALE
ENOSR
ENOMEM
ENOTSOCK
ESTRPIPE
EMLINK
ERANGE
ELIBEXEC
EL3HLT
ECONNRESET
EADDRINUSE
EOPNOTSUPP
EREMCHG
EAGAIN
ENAMETOOLONG
ENOTTY
ERESTART
ESOCKTNOSUPPORT
ETIME
EBFONT
EDEADLOCK
ETOOMANYREFS
EMFILE
ETXTBSY
EINPROGRESS
ENXIO
ENOPKG
ENOTSUP
__future__
with_statement
print_function
unicode_literals
F_OK
R_OK
W_OK
TMP_MAX
WNOHANG
WUNTRACED
O_RDONLY
O_WRONLY
O_RDWR
O_NDELAY
O_NONBLOCK
O_APPEND
O_DSYNC
O_RSYNC
O_SYNC
O_NOCTTY
O_CREAT
O_EXCL
O_LARGEFILE
O_ASYNC
O_DIRECT
O_DIRECTORY
O_NOFOLLOW
O_NOATIME
EX_OK
EX_USAGE
EX_DATAERR
EX_NOINPUT
EX_NOUSER
EX_NOHOST
EX_UNAVAILABLE
EX_SOFTWARE
EX_OSERR
EX_OSFILE
EX_CANTCREAT
EX_IOERR
EX_TEMPFAIL
EX_PROTOCOL
EX_NOPERM
EX_CONFIG
ST_RDONLY
ST_NOSUID
ST_NODEV
ST_NOEXEC
ST_SYNCHRONOUS
ST_MANDLOCK
ST_WRITE
ST_APPEND
ST_NOATIME
ST_NODIRATIME
ST_RELATIME
confstr_names
sysconf_names
posix.stat_result
posix.statvfs_result
environ
pathconf_names
(zlOO)
f_bsize
f_frsize
f_blocks
f_bfree
f_bavail
f_files
f_ffree
f_favail
f_flag
f_namemax
st_mode
protection bits
st_ino
inode
st_dev
device
st_nlink
number of hard links
st_uid
user ID of owner
st_gid
group ID of owner
total size, in bytes
integer time of last access
integer time of last change
st_atime
st_mtime
time of last modification
st_ctime
st_blksize
blocksize for filesystem I/O
st_blocks
number of blocks allocated
st_rdev
device type (if inode device)
SC_2_CHAR_TERM
SC_2_C_BIND
SC_2_C_DEV
SC_2_C_VERSION
SC_2_FORT_DEV
SC_2_FORT_RUN
SC_2_LOCALEDEF
SC_2_SW_DEV
SC_2_UPE
SC_2_VERSION
SC_AIO_LISTIO_MAX
SC_AIO_MAX
SC_AIO_PRIO_DELTA_MAX
SC_ARG_MAX
SC_ASYNCHRONOUS_IO
SC_ATEXIT_MAX
SC_AVPHYS_PAGES
SC_BC_BASE_MAX
SC_BC_DIM_MAX
SC_BC_SCALE_MAX
SC_BC_STRING_MAX
SC_CHARCLASS_NAME_MAX
SC_CHAR_BIT
SC_CHAR_MAX
SC_CHAR_MIN
SC_CHILD_MAX
SC_CLK_TCK
SC_COLL_WEIGHTS_MAX
SC_DELAYTIMER_MAX
SC_EQUIV_CLASS_MAX
SC_EXPR_NEST_MAX
SC_FSYNC
SC_GETGR_R_SIZE_MAX
SC_GETPW_R_SIZE_MAX
SC_INT_MAX
SC_INT_MIN
SC_IOV_MAX
SC_JOB_CONTROL
SC_LINE_MAX
SC_LOGIN_NAME_MAX
SC_LONG_BIT
SC_MAPPED_FILES
SC_MB_LEN_MAX
SC_MEMLOCK
SC_MEMLOCK_RANGE
SC_MEMORY_PROTECTION
SC_MESSAGE_PASSING
SC_MQ_OPEN_MAX
SC_MQ_PRIO_MAX
SC_NGROUPS_MAX
SC_NL_ARGMAX
SC_NL_LANGMAX
SC_NL_MSGMAX
SC_NL_NMAX
SC_NL_SETMAX
SC_NL_TEXTMAX
SC_NPROCESSORS_CONF
SC_NPROCESSORS_ONLN
SC_NZERO
SC_OPEN_MAX
SC_PAGESIZE
SC_PAGE_SIZE
SC_PASS_MAX
SC_PHYS_PAGES
SC_PII
SC_PII_INTERNET
SC_PII_INTERNET_DGRAM
SC_PII_INTERNET_STREAM
SC_PII_OSI
SC_PII_OSI_CLTS
SC_PII_OSI_COTS
SC_PII_OSI_M
SC_PII_SOCKET
SC_PII_XTI
SC_POLL
SC_PRIORITIZED_IO
SC_PRIORITY_SCHEDULING
SC_REALTIME_SIGNALS
SC_RE_DUP_MAX
SC_RTSIG_MAX
SC_SAVED_IDS
SC_SCHAR_MAX
SC_SCHAR_MIN
SC_SELECT
SC_SEMAPHORES
SC_SEM_NSEMS_MAX
SC_SEM_VALUE_MAX
SC_SHARED_MEMORY_OBJECTS
SC_SHRT_MAX
SC_SHRT_MIN
SC_SIGQUEUE_MAX
SC_SSIZE_MAX
SC_STREAM_MAX
SC_SYNCHRONIZED_IO
SC_THREADS
SC_THREAD_ATTR_STACKADDR
SC_THREAD_ATTR_STACKSIZE
SC_THREAD_KEYS_MAX
SC_THREAD_PRIORITY_SCHEDULING
SC_THREAD_PRIO_INHERIT
SC_THREAD_PRIO_PROTECT
SC_THREAD_PROCESS_SHARED
SC_THREAD_SAFE_FUNCTIONS
SC_THREAD_STACK_MIN
SC_THREAD_THREADS_MAX
SC_TIMERS
SC_TIMER_MAX
SC_TTY_NAME_MAX
SC_TZNAME_MAX
SC_T_IOV_MAX
SC_UCHAR_MAX
SC_UINT_MAX
SC_UIO_MAXIOV
SC_ULONG_MAX
SC_USHRT_MAX
SC_VERSION
SC_WORD_BIT
SC_XBS5_ILP32_OFF32
SC_XBS5_ILP32_OFFBIG
SC_XBS5_LP64_OFF64
SC_XBS5_LPBIG_OFFBIG
SC_XOPEN_CRYPT
SC_XOPEN_ENH_I18N
SC_XOPEN_LEGACY
SC_XOPEN_REALTIME
SC_XOPEN_REALTIME_THREADS
SC_XOPEN_SHM
SC_XOPEN_UNIX
SC_XOPEN_VERSION
SC_XOPEN_XCU_VERSION
SC_XOPEN_XPG2
SC_XOPEN_XPG3
SC_XOPEN_XPG4
CS_LFS64_CFLAGS
CS_LFS64_LDFLAGS
CS_LFS64_LIBS
CS_LFS64_LINTFLAGS
CS_LFS_CFLAGS
CS_LFS_LDFLAGS
CS_LFS_LIBS
CS_LFS_LINTFLAGS
CS_PATH
CS_XBS5_ILP32_OFF32_CFLAGS
CS_XBS5_ILP32_OFF32_LDFLAGS
CS_XBS5_ILP32_OFF32_LIBS
CS_XBS5_ILP32_OFF32_LINTFLAGS
CS_XBS5_ILP32_OFFBIG_CFLAGS
CS_XBS5_ILP32_OFFBIG_LDFLAGS
CS_XBS5_ILP32_OFFBIG_LIBS
CS_XBS5_LP64_OFF64_CFLAGS
CS_XBS5_LP64_OFF64_LDFLAGS
CS_XBS5_LP64_OFF64_LIBS
CS_XBS5_LP64_OFF64_LINTFLAGS
CS_XBS5_LPBIG_OFFBIG_CFLAGS
CS_XBS5_LPBIG_OFFBIG_LDFLAGS
CS_XBS5_LPBIG_OFFBIG_LIBS
PC_ASYNC_IO
PC_CHOWN_RESTRICTED
PC_FILESIZEBITS
PC_LINK_MAX
PC_MAX_CANON
PC_MAX_INPUT
PC_NAME_MAX
PC_NO_TRUNC
PC_PATH_MAX
PC_PIPE_BUF
PC_PRIO_IO
PC_SOCK_MAXBUF
PC_SYNC_IO
PC_VDISABLE
ctermid
getcwd
getcwdu
uname
unlink
openpty
forkpty
getegid
geteuid
getgid
getgroups
getpid
getppid
getuid
getlogin
setgroups
setsid
fdopen
pipe
fchdir
fsync
fdatasync
WIFCONTINUED
tmpfile
tmpnam
abort
getloadavg
getresuid
getresgid
%s: inconsistent use of tabs and spaces in indentation
codec did not return a unicode object
Non-ASCII character '\x%.2x' in file %.200s on line %i, but no encoding declared; see http://python.org/dev/peps/pep-0263/ for details
local variable '%.200s' referenced before assignment
invalid argument to DUP_TOPX (bytecode corruption?)
raise: arg 3 must be a traceback or None
calling %s() should have returned an instance of BaseException, not '%s'
instance exception may not have a separate value
exceptions must be old-style classes or derived from BaseException, not %s
exceptions must derive from BaseException in 3.x
globals and locals cannot be NULL
exec: arg 1 must be a string, file, or code object
exec: arg 2 must be a dictionary or None
exec: arg 3 must be a mapping or None
code object passed to exec may not contain free variables
Error when calling the metaclass bases
    %s
no locals found when storing %s
need more than %d value%s to unpack
global name '%.200s' is not defined
free variable '%.200s' referenced before assignment in enclosing scope
catching of string exceptions is deprecated
catching classes that don't inherit from BaseException is not allowed in 3.x
no locals found during 'import *'
from-import-* object has no __dict__ and no __all__
'%.200s' object does not support indexing
%.200s() takes exactly one argument (%d given)
%.200s%.200s argument after ** must be a mapping, not %.200s
%.200s%.200s argument after * must be an iterable, not %200s
error return without exception set
keyword list must be a dictionary
encoding declaration in Unicode string
invalid node %d for PyAST_FromNode
integer time of last modification
SC_THREAD_DESTRUCTOR_ITERATIONS
CS_XBS5_ILP32_OFFBIG_LINTFLAGS
CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
unexpected end of data
invalid continuation byte
invalid start byte
internal error
utf8
Non-statement found: %d %d
invalid augassign: %s
unexpected flow_stmt: %d
malformed 'try' statement
restricted attribute
bad memberdescr type
invalid comp_op: %s
invalid comp_op: %s %s
unhandled factor: %d
(unicode error) %s
(unicode error) unknown error
unhandled atom %d
unhandled expr: %d
../Python/ast.c
string to parse is too long
utf-32-be
\U%02x%02x%02x%02x
field s is required for Str
unexpected import name: %d
cannot assign to None
cannot assign to __debug__
nonlocal
nonlocal is a keyword in 3.x
../Objects/funcobject.c
non-tuple default args
../Objects/unicodeobject.c
field id is required for Name
assign to
delete
conditional expression
literal
dict comprehension
set comprehension
list comprehension
yield expression
generator expression
function call
can't %s %s
readonly attribute
Truncation of value to char
Truncation of value to short
Truncation of value to int
bad memberdescr type for %s
more than 255 arguments
keyword argument repeated
s:lookup_error
../Python/traceback.c
generator already executing
at least 
at most 
frame does not exist
__dir__
__members__
__methods__
argument must be callable
raw_unicode_escape_decode
sequence index must be integer, not '%.200s'
'%.200s' object does not support item deletion
'%.200s' object does not support item assignment
illegal expression for augmented assignment
assignment to yield expression not possible
trailing comma not allowed without surrounding parentheses
Unexpected node-type in from-import
unknown import statement: starts with command '%s'
poorly formed 'exec' statement: %d parts to statement
improper number of parts to 'assert' statement: %d
unhandled small_stmt: TYPE=%d NCH=%d
unexpected token in 'if' statement: %s
wrong number of tokens for 'while' statement: %d
wrong number of children for 'except' clause: %d
invalid comp_op: has %d children
logic error in count_list_fors
backquote not supported in 3.x; use repr()
attribute of type '%.200s' is not callable
non-ascii bytes literals not supported in 3.x
'%.200s' object has no attribute '__getitem__'
field value is required for Expr
assignment to True or False is forbidden in 3.x
field name is required for alias
can't resize shared unicode objects
field ctx is required for Name
unexpected expression in assignment %d (line %d)
'%.100s' object has no attributes (%s .%.100s)
'%.100s' object has only read-only attributes (%s .%.100s)
type object '%.50s' has no attribute '%.400s'
attribute '%.300s' of '%.100s' objects is not readable
field value is required for Attribute
field attr is required for Attribute
field ctx is required for Attribute
'%.100s' object has no attribute '%.200s'
'%.50s' object attribute '%.400s' is read-only
field ctx is required for List
descriptor '%.200s' for '%.100s' objects doesn't apply to '%.100s' object
field value is required for Assign
PyClass_New: name must be a string
PyClass_New: dict must be a dictionary
PyClass_New: bases must be a tuple
PyClass_New: base must be a class
tuple parameter unpacking has been removed in 3.x
parenthesized argument names are invalid in 3.x
unexpected node in varargslist: %d @ %d
parenthesized arg with default
non-default argument follows default argument
can't delete numeric/char attribute
attribute value type must be bool
Truncation of value to unsigned char
Truncation of value to unsigned short
Writing negative value into unsigned field
Truncation of value to unsigned int
attribute name must be a string
class.__dict__ not accessible in restricted mode
class %.50s has no attribute '%.400s'
Generator expression must be parenthesized if not sole argument
non-keyword arg after keyword arg
only named arguments may follow *expression
lambda cannot contain assignment
keyword can't be an expression
field arg is required for keyword
field func is required for Call
unknown error handler name '%.400s'
function attributes not accessible in restricted mode
generator ignored GeneratorExit
field ctx is required for Tuple
field name is required for FunctionDef
field args is required for FunctionDef
PyArg_UnpackTuple() argument list is not a tuple
%s expected %s%zd arguments, got %zd
unpacked tuple should have %s%zd elements, but has %zd
can't send non-None value to a just-started generator
dir(): expected keys() of locals to be a list, not '%.200s'
%.200s.__dict__ is not a dictionary
__dir__() must return a list, not %.200s
field test is required for If
../Objects/iterobject.c
 in __instancecheck__
string index out of range
../Objects/classobject.c
__init__() should return None
|On:split
empty separator
can only join an iterable
field n is required for Num
Trailing \ in string
invalid \x escape
impossible<bad format char>
object() takes no parameters
|O:tuple
|O:list
nested_scopes
generators
absolute_import
braces
not a chance
no symtable
<module>
suite should not be possible
I/O operation on closed file
no mem for sys.argv
can't assign sys.argv
no mem for sys.path insertion
sys.path.insert(0) failed
True if the file is closed.
__getstate__
_io.BytesIO
field target is required for For
field iter is required for For
hasattr(): attribute name must be string
'%.200s' object is not iterable
iter() returned non-iterator of type '%.100s'
field left is required for Compare
isinstance() arg 2 must be a class, type, or tuple of classes and types
field op is required for UnaryOp
field operand is required for UnaryOp
__index__ returned non-(int,long) (type %.200s)
cannot fit '%.200s' into an index-sized integer
string indices must be integers, not %.200s
'%.200s' object cannot be interpreted as an index
deletions are implemented differently for unicode
translation table must be 256 characters long
field value is required for Subscript
field slice is required for Subscript
field ctx is required for Subscript
this constructor takes no arguments
object of type '%.200s' has no len()
sequence item %zd: expected string, %.80s found
join() result is too long for a Python string
instance.__dict__ not accessible in restricted mode
%.50s instance has no attribute '%.400s'
decoding error; unknown error handling code: %.400s
field body is required for Exec
field op is required for BoolOp
'in <string>' requires string as left operand, not %.200s
tuple indices must be integers, not %.200s
field left is required for BinOp
field op is required for BinOp
field right is required for BinOp
strings are too large to concat
cannot concatenate 'str' and '%.200s' objects
field context_expr is required for With
%.200s%s got multiple values for keyword argument '%.200s'
field target is required for comprehension
field iter is required for comprehension
Unmatched right paren in format string
Unmatched left paren in format string
field elt is required for ListComp
uninitialized staticmethod object
__new__() called with non-type 'self'
%s.__new__(): not enough arguments
%s.__new__(X): X is not a type object (%s)
%s.__new__(%s): %s is not a subtype of %s
%s.__new__(%s) is not safe, use %s.__new__()
Can't instantiate abstract class %s with abstract methods %s
field value is required for Index
field name is required for ClassDef
field target is required for AugAssign
field op is required for AugAssign
field value is required for AugAssign
field test is required for While
dictionary changed size during iteration
slice indices must be integers or None or have an __index__ method
'%.200s' object is unsliceable
field test is required for IfExp
field body is required for IfExp
field orelse is required for IfExp
from __future__ imports must occur at the beginning of the file
future feature %.100s is not defined
module kind %d should not be possible
PyEval_SaveThread: NULL tstate
PyEval_RestoreThread: NULL tstate
this compiler does not handle Suites
UUUUUUUU
?33333333
UUUUUUU
P^Cy
^B{	$I
Bad magic number in .pyc file
Bad code object in .pyc file
genexpr
setcomp
dictcomp
can only assign an iterable
ReferenceType
CallableProxyType
O!|O:super
name '%s' is local and global
is a nested function
unknown symbol table entry
compile.c compiler unit
frozenset()
<lambda>
<setcomp>
<dictcomp>
<genexpr>
'yield' outside function
getweakrefcount
getweakrefs
python: Can't reopen .pyc file
'return' with argument inside generator
name '%.400s' is assigned to before global declaration
name '%.400s' is used prior to global declaration
import * only allowed at module level
duplicate argument '%s' in function definition
private identifier too large to be mangled
invalid expression in parameter list
'%.200s' object doesn't support item deletion
Weak-reference support module.
super(type, obj): obj must be an instance or subtype of type
contains a nested function with free variables
import * is not allowed in function '%.100s' because it %s
unqualified exec is not allowed in function '%.100s' because it %s
function '%.100s' uses import * and bare exec, which are illegal because it %s
tp_compare didn't return -1 or -2 for exception
getattr(): attribute name must be string
unary op %d should not be possible
param invalid in attribute expression
param invalid in subscript expression
can't set attributes of built-in/extension type '%s'
attribute '%.300s' of '%.100s' objects is not writable
__init__() should return None, not '%.200s'
unbound method %s%s must be called with %s instance as first argument (got %s%s instead)
can not delete variable '%s' referenced in nested scope
param invalid for deref variable
param invalid for local variable
param invalid for global variable
param invalid for name variable
invalid node type (%d) for augmented assignment
too many statically nested blocks
default 'except:' must be last
assertion is always true, perhaps remove parentheses?
PyCapsule_New called with null pointer
uninitialized classmethod object
expected tuple for closure, got '%.100s'
type inequality comparisons not supported in 3.x
unexpected binary operation %d on a constant
unexpected unary operation %d on a constant
Set changed size during iteration
PyCapsule_GetPointer called with invalid PyCapsule object
PyCapsule_GetPointer called with incorrect name
lookup %s in %s %d %d
freevars of %s: %s
%s() requires a dict argument, not '%s'
extended slice invalid in nested slice
invalid %s kind %d in subscript
__dict__ not accessible in restricted mode
__dict__ must be set to a dictionary
__class__ not accessible in restricted mode
__class__ must be set to a class
unknown scope for %.100s in %.100s(%s) in %s
symbols: %s
locals: %s
globals: %s
inplace binary op %d should not be possible
'continue' not supported inside 'finally' clause
'continue' not properly in loop
ref()
'return' outside function
'break' outside loop
weak object has gone away
opcode = %d
opcode_stack_effect()
:__call__
../Objects/weakrefobject.c
compiler_exit_scope()
compiler_make_closure()
threading
_shutdown
exitfunc
Error in sys.exitfunc:
__missing__
extended slice
param invalid in simple slice
invalid subscript kind %d
method-wrapper
setiterator
itertools.tee_dataobject
# clear __builtin__._
# clear sys.%s
# restore sys.%s
# cleanup __main__
# cleanup[1] %s
# cleanup[2] %s
# cleanup sys
# cleanup __builtin__
#   clear[1] %s
#   clear[2] %s
MAGIC
CODESIZE
MAXREPEAT
iter index too large
|n:pop
pop from empty list
pop index out of range
repeated string is too long
|Oss:unicode
<NULL>
LC_CTYPE
LC_TIME
LC_COLLATE
LC_MONETARY
LC_MESSAGES
LC_NUMERIC
LC_ALL
locale.Error
# cleanup ints
: %d unfreed int%s
# cleanup floats
: %d unfreed float%s
et:lstat
getargs.cleanup_ptr
getargs.cleanup_buffer
%s() arg is an empty sequence
OiO!|nOO
invalid SRE code
find/rfind/index/rindex
et:readlink
truncated \uXXXX
rawunicodeescape
\Uxxxxxxxx out of range
|O:rstrip
et:stat
|O:strip
truncated \xXX escape
\ at end of string
malformed \N character escape
illegal Unicode character
truncated \UXXXXXXXX escape
truncated \uXXXX escape
unicodedata.ucnhash_CAPI
(is)
O|O:enumerate
pattern
lastindex
lastgroup
regs
endpos
span
__copy__
__deepcopy__
groupindex
finditer
|O:lstrip
ABDAY_1
ABDAY_2
ABDAY_3
ABDAY_4
ABDAY_5
ABDAY_6
ABDAY_7
ABMON_1
ABMON_2
ABMON_3
ABMON_4
ABMON_5
ABMON_6
ABMON_7
ABMON_8
ABMON_9
ABMON_10
ABMON_11
ABMON_12
RADIXCHAR
THOUSEP
CRNCYSTR
AM_STR
PM_STR
CODESET
T_FMT_AMPM
ERA_D_FMT
ERA_D_T_FMT
ERA_T_FMT
ALT_DIGITS
YESEXPR
NOEXPR
_DATE_FMT
localeconv
strcoll
dgettext
dcgettext
bindtextdomain
bind_textdomain_codeset
getcodesize
getlower
_sre.SRE_Scanner
_sre.SRE_Match
_sre.SRE_Pattern
last_type
last_value
last_traceback
startswith first arg must be str, unicode, or tuple, not %s
close() called during concurrent operation on the same file object.
PyFileObject locking error in destructor (refcnt <= 0 at close).
close failed in file object destructor:
ord() expected string of length 1, but %.200s found
ord() expected a character, but string of length %zd found
endswith first arg must be str, unicode, or tuple, not %s
PyThreadState_Clear: warning: thread still has a frame
can't multiply sequence by non-int of type '%.200s'
unsupported operand type(s) for %.100s: '%.100s' and '%.100s'
PyInterpreterState_Delete: invalid interp
PyInterpreterState_Delete: remaining threads
PyThreadState_Delete: tstate is still current
PyThreadState_Delete: NULL tstate
PyThreadState_Delete: NULL interp
PyThreadState_Delete: invalid tstate
PyThreadState_Delete: small circular list(!) and tstate not found.
PyThreadState_Delete: circular list(!) and tstate not found.
field value is required for keyword
'%.200s' object doesn't support slice assignment
decoding Unicode is not supported
decoding bytearray is not supported
coercing to Unicode: need string or buffer, %.80s found
decoder did not return an unicode object (type=%.400s)
#   <int at %p, refcnt=%ld, val=%ld>
#   <float at %p, refcnt=%ld, val=%s>
%s() got an unexpected keyword argument
regular expression code size limit exceeded
%s arg must be None, str or unicode
unknown Unicode character name
\N escapes not supported (can't load unicodedata module)
>format requires a mapping
incomplete format key
* wants int
width too big
prec too big
%s%%%s.%dl%c
%s0%c%%.%dl%c
c;%c requires int or char
b;%c requires int or char
incomplete format
<%s object at %p>
(iO)
\x%02x
writeobject with NULL file
nO:insert
print recursion
<nil>
<refcnt %ld at %p>
_[%d]
__len__() should return >= 0
(nn)
slice step cannot be zero
unknown comprehension type %d
iteration over non-sequence
|Oss:bytearray
negative count
string must be of size 1
byte must be in range(0, 256)
bytearray index out of range
../Objects/longobject.c
Object is not writable.
|O:str
|Oi:int
int() missing string argument
a float is required
Max string recursion exceeded
unmatched '{' in format
long int too large to convert
|OnnO:match
expected string or buffer
buffer has negative size
buffer size mismatch
base
not enough arguments for format string
%s argument has non-string str()
int argument required, not %.200s
formatted integer is too long (precision too large?)
%%%c format: a number is required, not %.200s
float argument required, not %.200s
unsupported format character '%c' (0x%x) at index %zd
not all arguments converted during string formatting
__repr__ returned non-string (type %.200s)
field test is required for Assert
string is too large to make repr
can only concatenate tuple (not "%.200s") to tuple
field args is required for Lambda
field body is required for Lambda
logic error in count_comp_fors
field elt is required for GeneratorExp
null file for PyFile_WriteString
__nonzero__ should return an int
__nonzero__ should return >= 0
__len__() should return an int
 while getting the str of an object
__str__ returned non-string (type %.200s)
in 3.x, __getslice__ has been removed; use __getitem__
list indices must be integers, not %.200s
must assign iterable to extended slice
attempt to assign sequence of size %zd to extended slice of size %zd
__iter__ returned non-iterator of type '%.100s'
encoding or errors without sequence argument
unicode argument without an encoding
encoding or errors without a string argument
nb_int should return int object
Python int too large to convert to C long
an integer or string of size 1 is required
Existing exports of data: object cannot be re-sized
l;range() requires 1-3 int arguments
ll|l;range() requires 1-3 int arguments
range() step argument must not be zero
range() result has too many items
bytearray indices must be integer
can assign only bytes, buffers, or iterables of ints in range(0, 256)
attempt to assign bytes of size %zd to extended slice of size %zd
Type %.100s doesn't support the buffer API
bad operand type for unary -: '%.200s'
nb_float should return float object
__int__ returned non-int (type %.200s)
__trunc__ returned non-Integral (type %.200s)
null byte in argument for int()
int() argument must be a string or a number, not '%.200s'
invalid literal for int() with base %d: %s
int() can't convert non-string with explicit base
int() base must be >= 2 and <= 36
Too many decimal digits in format string
cannot switch from manual field specification to automatic field numbering
cannot switch from automatic field numbering to manual field specification
Only '.' or '[' may follow ']' in format field specifier
Empty attribute in format string
Unknown conversion specifier %c
Unknown conversion specifier \x%x
Single '}' encountered in format string
Single '{' encountered in format string
end of format while looking for conversion specifier
expected ':' after format specifier
deallocated bytearray object has exported buffers
can't convert negative value to unsigned long
%s() takes at most %d positional arguments (%zd given)
Argument given by name ('%s') and position (1)
The '%s' keyword parameter name is deprecated.  Use 'string' instead.
Required argument 'string' (pos 1) not found
accessing non-existent string segment
CSign not allowed in string format specifier
Alternate form (#) not allowed in string format specifier
'=' alignment not allowed in string format specifier
Unknown format code '%c' for object of type '%.200s'
globals must be a real dict; try eval(expr, {}, mapping)
eval must be given globals and locals when called without a frame
code object passed to eval() may not contain free variables
eval() arg 1 must be a string or code object
expected string or Unicode object, %.200s found
expected string without null bytes
Could not import runpy module
Could not access runpy._run_module_as_main
Could not create arguments for runpy._run_module_as_main
__name__ must be set to a string object
function's dictionary may not be deleted
setting function's dictionary to a non-dict
format expects arg 2 to be string or unicode, not %.100s
object.__format__ with a non-empty format string is deprecated
Type %.100s doesn't define __format__
%.100s.__format__ must return string or unicode, not %.100s
Mixing iteration and read methods would lose data
requested number of bytes is more than a Python string can hold
argument to __format__ must be unicode or str
dynamic module does not define init function (init%.200s)
dynamic module not initialized properly
import %s # dynamically loaded from %s
__format__ arg must be str or unicode, not %s
compile() arg 3 must be 'exec', 'eval' or 'single'
compile() expected string without null bytes
compiled module %.200s is not a code object
zipimport: no memory to allocate source buffer
field body is required for Expression
marshal.load() arg must be file
XXX readobject called with exception set
NULL object in marshal data for object
zipimport: can not open file %s
can't decompress data; zlib not available
expected a string or other character buffer object
expected a single-segment buffer object
unexpected character after line continuation character
too many levels of indentation
unindent does not match any outer indentation level
inconsistent use of tabs and spaces in indentation
EOL while scanning string literal
EOF while scanning triple-quoted string literal
character mapping must be in range(0x110000)
character mapping must return integer, None or unicode
 $%&'
&)*+
0////123123123
9:;;
?@ABC
OPQQR
//////////////////
////////////
/////
/***
YZZZ
\]]^_`aaabcd
777kkkkkkkkkkkkkkkk
ffffffffffffffff
nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn
oooooooooooooooooooooooooooooooooooooo
///////////////////////////
//////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////
//////////////////////
//////////////////////////////////////////////////////
//////////
///////
////////
//////////////////////
///////
////
//////
//////////////////////
///////
////
/////////
//////////////////////
///////
/////
////////
//////////////////////
///////
/////
//////
////
////////////
////////
///////////////////////
//////////
/////
////////
///////////////////////
//////////
/////
////////
///////////////////////
////////////////
//////
//////////////////
////////////////////////
/////////
///////
////////////////////////////////////////////////
///////
////
///////
////
/////
////////
////////////////////////////////////
////
///////////////////////////////////////////
//////
////
/////////////
pppppppppppppppppppppppppppppppppppppp
///////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////
///////
////
/////////////////////////////////////////
////
/////////////////////////////////
////
///////
////
///////////////
/////////////////////////////////////////////////////////
////
///////////////////////////////////////////////////////////////////
qrstuv
////////////////
/////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////
//////////////////////////
///////////////////////////////////////////////////////////////////////////
/////////////
////
//////////////////
//////////////////
/////////////
////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
/////////////////////////////
//////////////////////////////
/////
////////////////////////////////////////////
///////
///////////////////////
/////////////////////////////////////////////////////
///////////////////////////////////////////////
///////
//////////////////////////////
////////////////////////////////////
////////////////////////////////////
////
////
//////////////////////////////////////////////////////
/////////////////////////////////////
{{{{{{{{||||||||{{{{{{
||||||
{{{{{{{{||||||||{{{{{{{{||||||||{{{{{{
||||||
|{{{{{{{{||||||||}}~~~~
{{{{{{{{
{{{{{{{{
{{{{{{{{
qrstuv
qrstuv
/////
aaaaa
////
qrstuv
qrstuv
qrstuv
qrstuv
qrstuv
qrstuv
qrstuv
nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn
ooooooooooooooooooooooooooooooooooooooooooooooo
//////////////////////////////////////////////////////
///////////////////////
///////
///////
///////
///////
///////
///////
///////
///////
/////
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
////
/////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////
////////////////
/////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////
///////
////////////////////////////////////////
//////////////////////////////
////////
////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////
/////////////////////////////////////////////////////////////////
//////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
//////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////
/////
///////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////
//////////////////////////////////////////////
/////////////
////////////////
//////////////////////////////////////////////////////////////////////
/////////
///////
////
///////////////////////
////////////////////////////////////////////////////
//////////////////////////////////////////////////
//////
////////////////////////////
///////////////////////
/////////////////////////////
///////////////////////////////////////////////
/////////////////////////////////////////
////////
///////////////////////
////////////////////////////////////////////////
/////
///////////////////////////////////
////////////////////////////////////
///////////////////////
/////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////
////
/////////////////////////////////////////////////////////
//////////////////////////////
/////////////////////////////////////////
////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////
/////////////
/////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////
////////////
/////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
//////
//////
//////
////////////
//////////////////////////
///////////////////
///////////////
//////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////
/////////////////////////////////////////////////
///////////////////////////////
/////////////////
////////
//////////////////////////////
////////////////////////////////////
////////
//////////////////////////////////////////////////////////////////////////////
//////
////////////////////////////////////////////
///////////////////////
//////////////////////
//////////////////////////
////
///////////////////////////
/////////////////////////////
//////////////////////////////////////////////////////
//////////////////////
///////////////////
/////////////////////////////////////////////////////////////////////////
qrstuv
/////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////
aaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaa
aaaa
Do nine men interpret Nine men I nod
aaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaa
aaaa
aaaaaaaa
aaaaaaa
aaaa
aaaaa
aaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaa
qrstuv
//////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
////////
///////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////
///////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////
//////////////////////////////
 !""#$%&'"""()*+,-./0123456789:;<=>?@@@ABC@@@DEF@@@@@@G
HIJKLM@NOPQRST@@UV""""""W"""""X""""""""""""""""""""""""""""""""""""YZ[\"""]"""^_"""""`"""a""""""""""bcd""""""ef""""""""g""""""""""""""h""""""""i""""e""""""""""""""""""""h""""""j""""""""""""""""kl"""""""""""""""""mn"""""""""""""""""o"""""""""p""qrstuvwxyz
{"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""|@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@}~
""""""
""""""""
"""""""""""""""W
""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""
""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""


U:listdir
et:listdir
must be %.50s, not %.50s
%.200s() 
argument %d
, item %d
 %.256s
O|OOi:sorted
globals must be a dict
locals must be a mapping
<string>
runpy
_run_module_as_main
(si)
SEARCH_ERROR
PY_SOURCE
PY_COMPILED
C_EXTENSION
PY_RESOURCE
PKG_DIRECTORY
C_BUILTIN
PY_FROZEN
PY_CODERESOURCE
IMP_HOOK
s|O:zipimporter.find_module
s|O:find_module
Os(ssi)
O|O:format
__version__
_PY_STRUCT_RANGE_CHECKING
_PY_STRUCT_FLOAT_COERCE
struct.error
File not open for %s
|l:read
O:__format__
Error in sys.excepthook:
Original exception was:
sys.excepthook is missing
unknown dlopen() error
./%-.255s
init%.200s
dlopen("%s", %x);
s:zipimporter.is_package
can't find module '%.200s'
s:zipimporter.get_code
Oss|ii:compile
compile(): unrecognised flags
single
# trying %s%c%s
bad pyc data
bad local file header
bad local file header size
sHnnlHHI
negative data size
zipimport: can't read data
# zipimport: zlib %s
_fields
_attributes
Module
Interactive
Expression
Suite
FunctionDef
ClassDef
Return
Delete
AugAssign
Print
While
With
Raise
TryExcept
TryFinally
Assert
Import
ImportFrom
Exec
Global
Expr
Pass
Break
Continue
BoolOp
BinOp
UnaryOp
Lambda
IfExp
Dict
ListComp
SetComp
DictComp
GeneratorExp
Yield
Compare
Call
Attribute
Subscript
List
Tuple
expr_context
AugLoad
AugStore
Param
ExtSlice
Index
boolop
Mult
LShift
RShift
BitOr
BitXor
BitAnd
FloorDiv
unaryop
Invert
UAdd
USub
cmpop
NotEq
IsNot
NotIn
excepthandler
ExceptHandler
keyword
alias
EOF read where not expected
s(O){sOss}
... truncated
s:zipimporter.get_filename
list.remove(x): x not in list
OO|n:replace
replace string is too long
unknown decode error
unknown parsing error
expression too long
unexpected EOF while parsing
invalid syntax
unexpected unindent
unexpected indent
expected an indented block
invalid token
error=%d
(sO)
U:charmap_build
lost sys.stderr
O(ziiz)
", line 
<unknown>
: <exception str() failed>
  File "
s*|zO:charmap_decode
character maps to <undefined>
charmap
struct format string
struct size in bytes
pack_into
asname
vararg
kwarg
col_offset
target
dims
elts
keywords
starargs
kwargs
comparators
orelse
operand
finalbody
handlers
inst
tback
context_expr
optional_vars
dest
targets
decorator_list
_ast.AST
dont_inherit
_clearcache
calcsize
get_magic
get_suffixes
lock_held
acquire_lock
release_lock
ordinal not in range(128)
|i:splitlines
codecs.encode()
_is_text_encoding
s*:unpack
O:Struct
bad char in struct format
total struct size too long
O|z:utf_32_be_encode
l:chr
chr() arg not in range(256)
%c arg not in range(0x100)
Cannot specify ',' with '%c'.
|O:float
PyOS_string_to_double
negative shift count
tracebacklimit
i:unichr
buffer()
buffer() not supported in 3.x
O|nn:buffer
          
buffer object expected
size must be zero or positive
(sssss)
%s buffer type not available
[...]
writing
Py_Repr
can't concat %.100s to %.100s
O&O&:setreuid
O&O&:setregid
O|On:warn
DEFAULT_BUFFER_SIZE
UnsupportedOperation
s(OO){}
user id is less than minimum
group id is less than minimum
resolution
MINYEAR
MAXYEAR
datetime.datetime_CAPI
__warningregistry__
O|z:ascii_encode
'registry' must be a dict
defaultaction
always
onceregistry
:%d: 
showwarning
O|zO:charmap_encode
tzname
utcoffset
fromutc
minute
microsecond
Formats self with strftime.
Return self.tzinfo.dst(self).
__reduce__() -> (cls, state)
days
Number of days.
microseconds
total_seconds
utcnow
timetz
Return ctime() style string.
utctimetuple
today
isocalendar
isoweekday
toordinal
characters_written
datetime.tzinfo
datetime.time
datetime.timedelta
datetime.datetime
datetime.date
_io.StringIO
stacklevel
O8M2
vH7B
W4vC
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`ABCDEFGHIJKLMNOPQRSTUVWXYZ{|}~
encoder did not return a string object (type=%.400s)
Unicode equal comparison failed to convert both arguments to Unicode - interpreting them as being unequal
Unicode unequal comparison failed to convert both arguments to Unicode - interpreting them as being unequal
'%.400s' is not a text encoding; use %s to handle arbitrary codecs
unpack requires a string argument of length %zd
encoder must return a tuple (object,integer)
Struct() argument 1 must be string, not %s
can't unpack IEEE 754 special value on non-IEEE platform
Precision not allowed in integer format specifier
Sign not allowed with integer format specifier 'c'
Thousands separators not allowed with integer format specifier 'c'
Format specifier missing precision
Invalid conversion specification
__float__ returned non-float (type %.200s)
float() argument must be a string or a number
invalid literal for float(): %.200s
could not convert string to float: %.200s
value too large to convert to float: %.200s
Traceback (most recent call last):
unichr() arg not in range(0x110000) (wide Python build)
  File "%.500s", line %d, in %.500s
offset must be zero or positive
writable buffers are not hashable
single-segment buffer object expected
Py_TPFLAGS_HAVE_GETCHARBUFFER needed
category is not a subclass of Warning
user id is greater than maximum
group id is greater than maximum
Fast implementation of the datetime type.
days=%d; must have magnitude <= %d
Negative size passed to PyUnicode_FromStringAndSize
_warnings.filters must be a list
_warnings.filters item %zd isn't a 5-tuple
_warnings.defaultaction not found
Unrecognized action (%s) in warnings.filters:
warnings.showwarning() must be set to a function or method
cannot convert float infinity to integer
cannot convert float NaN to integer
datetime -> string name of time zone.
datetime -> minutes east of UTC (negative for west of UTC).
datetime -> DST offset in minutes east of UTC.
datetime in UTC -> datetime in local time.
Return string in ISO 8601 format, HH:MM:SS[.mmmmmm][+HH:MM].
format -> strftime() style string.
Return self.tzinfo.utcoffset(self).
Return self.tzinfo.tzname(self).
Return time with new specified fields.
Number of seconds (>= 0 and less than 1 day).
Number of microseconds (>= 0 and less than 1 second).
Total seconds in the duration.
[tz] -> new datetime with tz's local day and time.
Return a new datetime representing UTC day and time.
timestamp[, tz] -> tz's local time from POSIX timestamp.
timestamp -> UTC datetime from a POSIX timestamp (like time.time()).
string, format -> new datetime parsed from a string (like time.strptime()).
date, time -> datetime with same date and time fields
Return date object with same year, month and day.
Return time object with same time but with tzinfo=None.
Return time object with same time and tzinfo.
Return time tuple, compatible with time.localtime().
Return UTC time tuple, compatible with time.localtime().
[sep] -> string in ISO 8601 format, YYYY-MM-DDTHH:MM:SS[.mmmmmm][+HH:MM].
sep is used to separate the year from the time, and defaults to 'T'.
Return datetime with new specified fields.
tz -> convert to local time in new timezone tz
timestamp -> local date from a POSIX timestamp (like time.time()).
int -> date corresponding to a proleptic Gregorian ordinal.
Current date or datetime:  same as self.__class__.fromtimestamp(time.time()).
Return a 3-tuple containing ISO year, week number, and weekday.
Return string in ISO 8601 format, YYYY-MM-DD.
Return the day of the week represented by the date.
Monday == 1 ... Sunday == 7
Return proleptic Gregorian ordinal.  January 1 of year 1 is day 1.
Return the day of the week represented by the date.
Monday == 0 ... Sunday == 6
Return date with new specified fields.
Exception raised when I/O would block on a non-blocking I/O stream
[%Co
ordinal not in range(256)
&#%d;
O|si:fileio
negative file descriptor
invalid mode: %.200s
O|z:latin_1_encode
year is out of range
month must be in 1..12
day is out of range for month
bad tzinfo state arg
hour must be in 0..23
minute must be in 0..59
second must be in 0..59
iii|iiiiO
xrange()
n:urandom
negative argument not allowed
../Objects/rangeobject.c
O|z:utf_8_encode
O|z:utf_16_le_encode
su#nns
|OOOO:property
O!O!nnO!
s:zipimporter.load_module
__loader__
%s%c%s%s
0123456789abcdef
%.200s attribute not set
__about__
thread.error
LockType
iO:signal
signal number out of range
|i:readline
i|si
<fdopen>
(iss)
empty mode string
|l:readlines
is*:write
u%04x
U%08x
newline
O|sizzzi:open
invalid file: %s
invalid mode: '%s'
invalid buffering size
unknown mode: '%s'
Osssi
|O&:readline
|O&:readlines
I/O operation on closed file.
O|n:BufferedReader
can't allocate read lock
__IOBase_closed
raw stream has been detached
|O&:read
read of closed file
read() should return bytes
readline of closed file
O|zzzi:fileio
illegal newline value: %s
getpreferredencoding
codecs.open()
release
locked_lock
locked
from_iterable
itertools.groupby
itertools.repeat
itertools.product
itertools.permutations
itertools.izip_longest
itertools.izip
itertools.count
itertools.ifilterfalse
itertools.ifilter
itertools.compress
itertools.chain
itertools.imap
itertools.starmap
itertools.islice
itertools.takewhile
itertools.dropwhile
itertools.cycle
itertools.combinations
default_factory
maxlen
appendleft
extendleft
popleft
iso8859-1
utf-16-be
utf-16-le
utf-16
utf-32-le
utf-32
thread.lock
start_new_thread
start_new
allocate_lock
allocate
exit_thread
interrupt_main
get_ident
thread._local
Thread-local data
_thread._localdummy
Thread-local dummy
heappush
heappushpop
heappop
heapreplace
heapify
itertools._grouper
itertools.tee
deque_reverse_iterator
deque_iterator
collections.defaultdict
collections.deque
operator.methodcaller
operator.attrgetter
operator.itemgetter
isCallable
isNumberType
isSequenceType
truth
sequenceIncludes
indexOf
countOf
isMappingType
is_(a, b) -- Same as a is b.
is_not
add(a, b) -- Same as a + b.
sub(a, b) -- Same as a - b.
mul(a, b) -- Same as a * b.
mod(a, b) -- Same as a % b.
neg(a) -- Same as -a.
pos(a) -- Same as +a.
abs(a) -- Same as abs(a).
inv(a) -- Same as ~a.
__inv__
invert
invert(a) -- Same as ~a.
not_
not_(a) -- Same as not a.
__not__
and_(a, b) -- Same as a & b.
xor(a, b) -- Same as a ^ b.
or_(a, b) -- Same as a | b.
__concat__
__repeat__
__iconcat__
__irepeat__
pow(a, b) -- Same as a ** b.
ipow
lt(a, b) -- Same as a<b.
le(a, b) -- Same as a<=b.
eq(a, b) -- Same as a==b.
ne(a, b) -- Same as a!=b.
gt(a, b) -- Same as a>b.
ge(a, b) -- Same as a>=b.
_compare_digest
rangeiterator
encoded result is too long for a Python string
encoder failed to return bytes
Must have exactly one of read/write/append mode and at most one plus
Cannot use closefd=False with file name
accessing non-existent buffer segment
Python int too large to convert to C int
character mapping must be in range(256)
character mapping must return integer, None or str
microsecond must be in 0..999999
tzinfo argument must be None or of a tzinfo subclass, not type '%s'
accessing non-existent bytes segment
l;xrange() requires 1-3 int arguments
ll|l;xrange() requires 1-3 int arguments
xrange() arg 3 must not be zero
xrange() result has too many items
map() requires at least two args
map(None, ...) not supported in 3.x; use list(...)
/dev/urandom (or equivalent) not found
Failed to read %zi bytes from /dev/urandom
O!n;encoding error handler must return (unicode, int) tuple
position %zd from error handler out of bounds
PyCapsule_Import could not import module "%s"
PyCapsule_Import "%s" is not valid
Failed to import %.200s because the import lockis held by another thread.
wrapper %s doesn't take keyword arguments
can only concatenate list (not "%.200s") to list
import %s # loaded from Zip %s
%.200s attribute must be unicode
long() arg 2 must be >= 2 and <= 36
long string too large to convert
invalid literal for long() with base %d: %s
codec must pass exception instance
signal only works in main thread
signal handler must be signal.SIG_IGN, signal.SIG_DFL, or a callable object
universal newline mode can only be used with modes starting with 'r'
mode string must begin with one of 'r', 'w', 'a' or 'U', not '%.200s'
line is longer than a Python string can hold
descriptor '%s' for type '%s' needs either an object or a type
descriptor '%s' for type '%s' needs a type, not a '%s' as arg 2
descriptor '%s' for type '%s' doesn't apply to type '%s'
 while getting the repr of a tuple
'%.400s' codec can't encode character u'\%s' in position %zd: %.400s
'%.400s' codec can't encode characters in position %zd-%zd: %.400s
can't use U and writing mode at once
can't have text and binary mode at once
must have exactly one of read/write/append mode
binary mode doesn't take an encoding argument
binary mode doesn't take an errors argument
binary mode doesn't take a newline argument
can't have unbuffered text I/O
field key is required for DictComp
field value is required for DictComp
unbounded read returned more bytes than a Python string can hold 
peek() should have returned a bytes object, not '%.200s'
read() should have returned a bytes object, not '%.200s'
Negative size passed to PyByteArray_FromStringAndSize
integer argument expected, got '%.200s'
File or stream is not readable.
descriptor '%.300s' of '%.100s' object needs an argument
descriptor '%.200s' requires a '%.100s' object but received a '%.100s'
buffer size must be strictly positive
bytearray indices must be integers
Raw stream returned invalid position %zd
Comparison between bytearray and string
I/O operation on uninitialized object
read length must be positive or -1
could not determine default encoding
itertools.combinations_with_replacement
Factory for default value called by __missing__().
maximum size of a deque or None if unbounded
isCallable(a) -- Same as callable(a).
isNumberType(a) -- Return True if a has a numeric type, False otherwise.
isSequenceType(a) -- Return True if a has a sequence type, False otherwise.
truth(a) -- Return True if a is true, False otherwise.
contains(a, b) -- Same as b in a (note reversed operands).
sequenceIncludes(a, b) -- Same as b in a (note reversed operands; deprecated).
indexOf(a, b) -- Return the first index of b in a.
countOf(a, b) -- Return the number of times b occurs in a.
isMappingType(a) -- Return True if a has a mapping type, False otherwise.
is_not(a, b) -- Same as a is not b.
index(a) -- Same as a.__index__()
div(a, b) -- Same as a / b when __future__.division is not in effect.
floordiv(a, b) -- Same as a // b.
truediv(a, b) -- Same as a / b when __future__.division is in effect.
lshift(a, b) -- Same as a << b.
rshift(a, b) -- Same as a >> b.
a = iadd(a, b) -- Same as a += b.
a = isub(a, b) -- Same as a -= b.
a = imul(a, b) -- Same as a *= b.
a = idiv(a, b) -- Same as a /= b when __future__.division is not in effect.
a = ifloordiv(a, b) -- Same as a //= b.
a = itruediv(a, b) -- Same as a /= b when __future__.division is in effect.
a = imod(a, b) -- Same as a %= b.
a = ilshift(a, b) -- Same as a <<= b.
a = irshift(a, b) -- Same as a >>= b.
a = iand(a, b) -- Same as a &= b.
a = ixor(a, b) -- Same as a ^= b.
a = ior(a, b) -- Same as a |= b.
concat(a, b) -- Same as a + b, for a and b sequences.
repeat(a, b) -- Return a * b, where a is a sequence, and b is an integer.
a = iconcat(a, b) -- Same as a += b, for a and b sequences.
a = irepeat(a, b) -- Same as a *= b, where a is a sequence, and b is an integer.
getitem(a, b) -- Same as a[b].
setitem(a, b, c) -- Same as a[b] = c.
delitem(a, b) -- Same as del a[b].
a = ipow(a, b) -- Same as a **= b.
getslice(a, b, c) -- Same as a[b:c].
setslice(a, b, c, d) -- Same as a[b:c] = d.
delslice(a, b, c) -- Same as del a[b:c].
 !"#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
4@[]
whitespace
lowercase
uppercase
t#t#:maketrans
cStringIO.cStringIO_CAPI
InputType
OutputType
et|si:file
O|si:file
c_call
c_exception
c_return
socket.error
socket.herror
socket.gaierror
socket.timeout
SocketType
has_ipv6
_socket.CAPI
AF_UNSPEC
AF_INET
AF_INET6
AF_UNIX
AF_AX25
AF_IPX
AF_APPLETALK
AF_NETROM
AF_BRIDGE
AF_ATMPVC
AF_X25
AF_ROSE
AF_DECnet
AF_NETBEUI
AF_SECURITY
AF_KEY
AF_NETLINK
NETLINK_ROUTE
NETLINK_USERSOCK
NETLINK_FIREWALL
NETLINK_NFLOG
NETLINK_XFRM
NETLINK_IP6_FW
NETLINK_DNRTMSG
AF_ROUTE
AF_ASH
AF_ECONET
AF_ATMSVC
AF_SNA
AF_IRDA
AF_PPPOX
AF_WANPIPE
AF_LLC
AF_BLUETOOTH
BTPROTO_L2CAP
BTPROTO_HCI
SOL_HCI
HCI_FILTER
HCI_TIME_STAMP
HCI_DATA_DIR
BTPROTO_SCO
BTPROTO_RFCOMM
00:00:00:00:00:00
BDADDR_ANY
00:00:00:FF:FF:FF
BDADDR_LOCAL
AF_PACKET
PF_PACKET
PACKET_HOST
PACKET_BROADCAST
PACKET_MULTICAST
PACKET_OTHERHOST
PACKET_OUTGOING
PACKET_LOOPBACK
PACKET_FASTROUTE
AF_TIPC
TIPC_ADDR_NAMESEQ
TIPC_ADDR_NAME
TIPC_ADDR_ID
TIPC_ZONE_SCOPE
TIPC_CLUSTER_SCOPE
TIPC_NODE_SCOPE
SOL_TIPC
TIPC_IMPORTANCE
TIPC_SRC_DROPPABLE
TIPC_DEST_DROPPABLE
TIPC_CONN_TIMEOUT
TIPC_LOW_IMPORTANCE
TIPC_MEDIUM_IMPORTANCE
TIPC_HIGH_IMPORTANCE
TIPC_CRITICAL_IMPORTANCE
TIPC_SUB_PORTS
TIPC_SUB_SERVICE
TIPC_SUB_CANCEL
TIPC_WAIT_FOREVER
TIPC_PUBLISHED
TIPC_WITHDRAWN
TIPC_SUBSCR_TIMEOUT
TIPC_CFG_SRV
TIPC_TOP_SRV
SOCK_STREAM
SOCK_DGRAM
SOCK_RAW
SOCK_SEQPACKET
SOCK_RDM
SO_DEBUG
SO_ACCEPTCONN
SO_REUSEADDR
SO_KEEPALIVE
SO_DONTROUTE
SO_BROADCAST
SO_LINGER
SO_OOBINLINE
SO_REUSEPORT
SO_SNDBUF
SO_RCVBUF
SO_SNDLOWAT
SO_RCVLOWAT
SO_SNDTIMEO
SO_RCVTIMEO
SO_ERROR
SO_TYPE
SOMAXCONN
MSG_OOB
MSG_PEEK
MSG_DONTROUTE
MSG_DONTWAIT
MSG_EOR
MSG_TRUNC
MSG_CTRUNC
MSG_WAITALL
SOL_SOCKET
SOL_IP
SOL_TCP
SOL_UDP
IPPROTO_IP
IPPROTO_HOPOPTS
IPPROTO_ICMP
IPPROTO_IGMP
IPPROTO_IPV6
IPPROTO_IPIP
IPPROTO_TCP
IPPROTO_EGP
IPPROTO_PUP
IPPROTO_UDP
IPPROTO_IDP
IPPROTO_TP
IPPROTO_ROUTING
IPPROTO_FRAGMENT
IPPROTO_RSVP
IPPROTO_GRE
IPPROTO_ESP
IPPROTO_AH
IPPROTO_ICMPV6
IPPROTO_NONE
IPPROTO_DSTOPTS
IPPROTO_PIM
IPPROTO_RAW
IPPORT_RESERVED
IPPORT_USERRESERVED
INADDR_ANY
INADDR_BROADCAST
INADDR_LOOPBACK
INADDR_UNSPEC_GROUP
INADDR_ALLHOSTS_GROUP
INADDR_MAX_LOCAL_GROUP
INADDR_NONE
IP_OPTIONS
IP_HDRINCL
IP_TOS
IP_TTL
IP_RECVOPTS
IP_RECVRETOPTS
IP_RETOPTS
IP_MULTICAST_IF
IP_MULTICAST_TTL
IP_MULTICAST_LOOP
IP_ADD_MEMBERSHIP
IP_DROP_MEMBERSHIP
IP_DEFAULT_MULTICAST_TTL
IP_DEFAULT_MULTICAST_LOOP
IP_MAX_MEMBERSHIPS
IPV6_JOIN_GROUP
IPV6_LEAVE_GROUP
IPV6_MULTICAST_HOPS
IPV6_MULTICAST_IF
IPV6_MULTICAST_LOOP
IPV6_UNICAST_HOPS
IPV6_V6ONLY
IPV6_CHECKSUM
IPV6_DONTFRAG
IPV6_DSTOPTS
IPV6_HOPLIMIT
IPV6_HOPOPTS
IPV6_NEXTHOP
IPV6_PATHMTU
IPV6_PKTINFO
IPV6_RECVDSTOPTS
IPV6_RECVHOPLIMIT
IPV6_RECVHOPOPTS
IPV6_RECVPKTINFO
IPV6_RECVRTHDR
IPV6_RECVTCLASS
IPV6_RTHDR
IPV6_RTHDRDSTOPTS
IPV6_RTHDR_TYPE_0
IPV6_RECVPATHMTU
IPV6_TCLASS
TCP_NODELAY
TCP_MAXSEG
TCP_CORK
TCP_KEEPIDLE
TCP_KEEPINTVL
TCP_KEEPCNT
TCP_SYNCNT
TCP_LINGER2
TCP_DEFER_ACCEPT
TCP_WINDOW_CLAMP
TCP_INFO
TCP_QUICKACK
EAI_ADDRFAMILY
EAI_AGAIN
EAI_BADFLAGS
EAI_FAIL
EAI_FAMILY
EAI_MEMORY
EAI_NODATA
EAI_NONAME
EAI_OVERFLOW
EAI_SERVICE
EAI_SOCKTYPE
EAI_SYSTEM
AI_PASSIVE
AI_CANONNAME
AI_NUMERICHOST
AI_NUMERICSERV
AI_ALL
AI_ADDRCONFIG
AI_V4MAPPED
NI_MAXHOST
NI_MAXSERV
NI_NOFQDN
NI_NUMERICHOST
NI_NAMEREQD
NI_NUMERICSERV
NI_DGRAM
SHUT_RD
SHUT_WR
SHUT_RDWR
binascii.Error
binascii.Incomplete
vars(): no locals!?
s*|iii
0123456789ABCDEF
s*|i
sem_destroy
|Oi:long
DEBUG_STATS
DEBUG_COLLECTABLE
DEBUG_UNCOLLECTABLE
DEBUG_INSTANCES
DEBUG_OBJECTS
DEBUG_SAVEALL
DEBUG_LEAK
[raw_]input
[raw_]input: lost sys.stdin
[raw_]input: lost sys.stdout
[raw_]input: input too long
PYTHONY2K
accept2dyear
../Objects/fileobject.c
EOF when reading a line
itemgetter()
altzone
daylight
(zz)
n|c:rjust
|i:_getframe
call stack is not deep enough
can't set %s.__module__
can't delete %s.__module__
i|z:setlocale
unsupported locale setting
locale query failed
letters
s:zipimporter.get_source
i:nl_langinfo
unsupported langinfo constant
initial_bytes
|O:BytesIO
incrementaldecoder
O|n:repeat
new buffer size too large
subtract
not readable
|O:readline
richcompare
n:read1
read length must be positive
multiply
classic float division
float division by zero
divide
O|i:IncrementalNewlineDecoder
s*|z:ascii_decode
../Python/pystrtod.c
tm_year
year, for example, 1993
tm_mon
month of year, range [1, 12]
tm_mday
day of month, range [1, 31]
tm_hour
hours, range [0, 23]
tm_min
minutes, range [0, 59]
tm_sec
seconds, range [0, 61])
tm_wday
tm_yday
day of year, range [1, 366]
tm_isdst
the socket family
the socket type
proto
the socket protocol
the socket timeout
accept
bind
connect
connect_ex
getpeername
getsockname
listen
setblocking
settimeout
gettimeout
time.struct_time
clock
asctime
mktime
tzset
enable
disable
isenabled
get_debug
get_count
get_threshold
collect
get_objects
is_tracked
get_referrers
get_referents
quotetabs
istext
unhexlify
a2b_qp
b2a_qp
gethostname
ntohl
htonl
getdefaulttimeout
setdefaulttimeout
_socket.socket
cStringIO.StringO
cStringIO.StringI
joinfields
splitfields
functools.partial
raw readinto() returned invalid length %zd (should have been between 0 and %zd)
type 'partial' takes at least one argument
the first argument must be callable
exported buffer does not have any shape information associated to it
readline() should have returned a bytes object, not '%.200s'
 while getting the repr of a list
maketrans arguments must have same length
byte array too long to convert to int
long int too large to convert to int
invalid mode ('%.50s') or filename
file() constructor not accessible in restricted mode
coercion should return None or 2-tuple
comparison did not return an int
vars() argument must have __dict__ attribute
first argument must be callable
unbound methods must have non-NULL im_class
long() missing string argument
long() can't convert non-string with explicit base
__long__ returned non-long (type %.200s)
long() argument must be a string or a number, not '%.200s'
object.readline() returned non-string
cannot convert dictionary update sequence element #%zd to a sequence
dictionary update sequence element #%zd has length %zd; 2 is required
integer division or modulo by zero
'%100s' does not have the buffer interface
Oi|O:IncrementalNewlineDecoder
underlying buffer has been detached
underlying read1() should have returned a bytes object, not '%.200s'
decoder getstate() should have returned a bytes object, not '%.200s'
readline() should have returned an str object, not '%.200s'
IncrementalNewlineDecoder.__init__ not called
day of week, range [0, 6], Monday is 0
1 if summer time is in effect, 0 if not, and -1 if unknown
function object to use in future partial calls
tuple of arguments to future partial calls
dictionary of keyword arguments to future partial calls
The time value as returned by gmtime(), localtime(), and strptime(), and
 accepted by asctime(), mktime() and strftime().  May be considered as a
 sequence of 9 integers.
 Note that several fields' values are not the same as those defined by
 the C language standard for struct tm.  For example, the value of the
 field tm_year is the actual year, not year - 1900.  See individual
 fields' descriptions for details.
MbP?Infinity
no such group
struct_pwent
>>> 
... 
(ll)
../Objects/setobject.c
can't re-enter readline
input line too long
new string is too long
in math_1
(ss)
(sss)
Unknown newlines value 0x%x
lost __builtin__
<class ?.%s at %p>
<class %s.%s at %p>
math domain error
can't set attribute
can't delete attribute
etet:rename
s|O!O:execfile
Random()
seed
et:remove
OOOO
s*:b2a_hex
LOCK_SH
LOCK_EX
LOCK_NB
LOCK_UN
LOCK_MAND
LOCK_READ
LOCK_WRITE
LOCK_RW
F_DUPFD
F_GETFD
F_SETFD
F_GETFL
F_SETFL
F_GETLK
F_SETLK
F_SETLKW
F_GETOWN
F_SETOWN
F_GETSIG
F_SETSIG
F_RDLCK
F_WRLCK
F_UNLCK
F_GETLK64
F_SETLK64
F_SETLKW64
FASYNC
F_SETLEASE
F_GETLEASE
F_NOTIFY
F_EXLCK
F_SHLCK
FD_CLOEXEC
DN_ACCESS
DN_MODIFY
DN_CREATE
DN_DELETE
DN_RENAME
DN_ATTRIB
DN_MULTISHOT
I_PUSH
I_POP
I_LOOK
I_FLUSH
I_FLUSHBAND
I_SETSIG
I_GETSIG
I_FIND
I_PEEK
I_SRDOPT
I_GRDOPT
I_NREAD
I_FDINSERT
I_STR
I_SWROPT
I_GWROPT
I_SENDFD
I_RECVFD
I_LIST
I_ATMARK
I_CKBAND
I_GETBAND
I_CANPUT
I_SETCLTIME
I_GETCLTIME
I_LINK
I_UNLINK
I_PLINK
I_PUNLINK
can't allocate lock
s#:strftime
unhashable instance
n|c:center
((iiiiiiiii))
unreadable attribute
|OnO:split
O|O:structseq
jumpahead
gr_name
group name
gr_passwd
gr_gid
group id
gr_mem
group members
pw_name
user name
pw_passwd
pw_uid
user id
pw_gid
pw_gecos
real name
pw_dir
home directory
pw_shell
shell program
maxsplit
_random.Random
grp.struct_group
getgrgid
getgrnam
getgrall
pwd.struct_passwd
getpwall
acos
acosh
asin
asinh
atan
atan2
atanh
ceil
copysign
degrees
erfc
expm1
fabs
factorial
floor
isinf
lgamma
log1p
log10
radians
sqrt
trunc
decoder should return a string result, not '%.200s'
sequence item %zd: expected string or Unicode, %.80s found
dict.has_key() not supported in 3.x; use the in operator
integer argument expected, got '%s'
writelines() requires an iterable argument
writelines() argument must be a sequence of strings
long int too large to convert to float
unsupported operand type(s) for ** or pow(): '%.100s' and '%.100s'
unsupported operand type(s) for pow(): '%.100s', '%.100s', '%.100s'
pow() 2nd argument cannot be negative when 3rd argument specified
pow() 3rd argument cannot be 0
pow() 3rd argument not allowed unless all arguments are integers
0.0 cannot be raised to a negative power
negative number cannot be raised to a fractional power
execfile() not supported in 3.x; use exec()
bad operand type for abs(): '%.200s'
bad operand type for unary ~: '%.200s'
can't filter str to str: __getitem__ returned different type
can't filter unicode to unicode: __getitem__ returned different type
filter(): unsubscriptable tuple
tuple assignment index out of range
__hash__() should return an int
expected %d arguments, got %zd
constructor requires a sequence
%.500s() takes a dict as second arg, if any
%.500s() takes an at least %zd-sequence (%zd-sequence given)
%.500s() takes an at most %zd-sequence (%zd-sequence given)
%.500s() takes a %zd-sequence (%zd-sequence given)
random() -> x in the interval [0, 1).
seed([n]) -> None.  Defaults to current time.
getstate() -> tuple containing the current state.
setstate(state) -> None.  Restores generator state.
jumpahead(int) -> None.  Create new state from existing state and integer.
getrandbits(k) -> x.  Generates a long int with k random bits.
getgrgid(id) -> (gr_name,gr_passwd,gr_gid,gr_mem)
Return the group database entry for the given numeric group ID.  If
id is not valid, raise KeyError.
getgrnam(name) -> (gr_name,gr_passwd,gr_gid,gr_mem)
Return the group database entry for the given group name.  If
name is not valid, raise KeyError.
getgrall() -> list of tuples
Return a list of all available group entries, in arbitrary order.
An entry whose name starts with '+' or '-' represents an instruction
to use YP/NIS and may not be accessible via getgrnam or getgrgid.
?aCoc
!	@iW
																WWWWWWWWWWWWWWWW0000000000000000
?year=%ld is before 1900; the datetime strftime() methods require year >= 1900
strftime format ends with raw %
tzname.replace() did not return a string
timestamp out of range for platform localtime() function
float too large to pack with d format
timestamp out of range for platform time_t
__dict__ must be a dictionary object
__bases__ items must be classes
a __bases__ item causes an inheritance cycle
__bases__ must be a tuple object
__name__ must not contain null bytes
__name__ must be a string object
classes are read-only in restricted mode
must be %d-item sequence, not %.50s
must be sequence of length %d, not %d
encoder did not return a string/unicode object (type=%.400s)
unsupported type for timedelta %s component: %s
normalized days too large to fit in a C int
long division or modulo by zero
maximum recursion limit exceeded
internal error in regular expression engine
'%.200s' object can't be concatenated
getsockaddrarg: AF_NETLINK address must be tuple, not %.500s
getsockaddrarg: AF_INET address must be tuple, not %.500s
getsockaddrarg: port must be 0-65535.
getsockaddrarg: AF_INET6 address must be tuple, not %.500s
getsockaddrarg: flowinfo must be 0-1048575.
getsockaddrarg: unknown Bluetooth protocol
getsockaddrarg: AF_PACKET address must be tuple, not %.500s
Hardware address must be 8 bytes or less
getsockaddrarg: protoNumber must be 0-65535.
getsockaddrarg: AF_TIPC address must be tuple, not %.500s
IIII|I;Invalid TIPC address format
wildcard resolved to multiple address
File or stream is not writable.
cannot fit '%.200s' into an offset-sized integer
raw write() returned invalid length %zd (should have been between 0 and %zd)
write could not complete without blocking
iter(v, w): v must be callable
code inequality comparisons not supported in 3.x
d:fromtimestamp
frexp() result out of range
s|O:strftime
day of month out of range
hour out of range
minute out of range
seconds out of range
day of week out of range
day of year out of range
(iiiiiiiii)
year >= 1900 required
is not retrievable
|OOOOOOO:__new__
milliseconds
minutes
hours
weeks
date value out of range
|OnnO:findall
O|nn:scanner
../Objects/object.c
OO|n:sub
_subx
|iii:socket
AF_UNIX path too long
II:getsockaddrarg
idna
eti:getsockaddrarg
eti|II
getsockaddrarg: wrong format
si|iis#
Invalid address type
getsockaddrarg: bad family
unsupported address family
<broadcast>
address family mismatched
%d.%d.%d.%d%c
unknown address family
%X:%X:%X:%X:%X:%X%c
bad bluetooth address
|O:groups
|i:acquire
release unlocked lock
eti|i
max_buffer_size
O|nn:BufferedWriter
max_buffer_size is deprecated
write to closed file
flush of closed file
convertible to a buffer
i:close
et|i:mkdir
et:chdir
s|si:popen
|OnnO:search
repl
<field value is required for Repr
dict inequality comparisons not supported in 3.x
sum() can't sum strings [use ''.join(seq) instead]
bad operand type for unary +: '%.200s'
popitem(): dictionary is empty
%.200s object is not an iterator
zip argument #%zd must support iteration
argument to reversed() must be a sequence
rounded value too large to represent
apply() not supported in 3.x; use func(*args, **kwargs)
apply() arg 2 expected sequence, found %s
apply() arg 3 expected dictionary, found %s
PyNumber_ToBase: index not int or long
maximum recursion depth exceeded%s
huge integer: number of bits overflows a Py_ssize_t
decoder must return a tuple (object,integer)
this __dict__ descriptor does not support '%.200s' objects
__members__ and __methods__ not supported in 3.x
string indices must be integers
__format__ requires str or unicode
Cannot specify ',' with '\x%x'.
Unknown format code '\x%x' for object of type '%.200s'
hex() argument can't be converted to hex
__hex__ returned non-string (type %.200s)
can't intern subclass of string
long has too many bits to express in a platform size_t
oct() argument can't be converted to oct
__oct__ returned non-string (type %.200s)
range() integer %s argument expected, got %s.
__int__ should return int object
reduce() not supported in 3.x; use functools.reduce()
reduce() arg 2 must support iteration
reduce() of empty sequence with no initial value
In 3.x, reload() is renamed to imp.reload()
PyImport_ReloadModule: no modules_reloading dictionary!
reload() argument must be module
reload(): module %.200s not in sys.modules
reload(): parent %.200s not in sys.modules
%s(...)
%s(%s)
classic int division
(ziOO)
(zO)
invalid generation
|O:bool
reversed()
{...}
instance has no next() method
d|O:round
%s0%se%d
long is too large to format
coerce() not supported in 3.x
number coercion failed
codecs.decode()
s*|zi:utf_8_decode
S|O:module.__init__
nameless module
This object has no __dict__
float divmod()
(dd)
<%s '%s.%s'>
<%s '%s'>
<%s.%s object at %p>
<?.%s instance at %p>
<%s.%s instance at %p>
s;embedded '\0' in input line
s*:StringIO
out of memory
length too large
new position too large
n|i:seek
getval
S:intern
s*|z:unicode_escape_decode
ndigits
<comparison function must return int, not %.200s
can only assign string to %s.__name__, not '%s'
def __str__(self):
  return self.args and ('%s' % self.args[0]) or '(what)'
def __str__(self):
  a=self.args
  a=a and type(a[0]) or '(what)'
  return 'Cannot pickle %s objects' % a
BaseException.message has been deprecated as of Python 2.6
pickle protocol %d asked for; the highest available protocol is %d
argument must have 'write' attribute
Value returned by %s must be string or tuple
tuple returned by %s must contain 2 through 5 elements
Second element of tuple returned by %s must be a tuple
Fourth element of tuple returned by %s must be an iterator, not %s
Fifth element of tuple returned by %s must be an iterator, not %s
args[0] from __newobj__ args has no __new__
args[0] from __newobj__ args has the wrong class
Can't pickle %s: import of module %s failed
Can't pickle %s: attribute lookup %s.%s failed
Can't pickle %s: it's not the same object as %s.%s
Can't pickle %s: extension code %s isn't an integer
Can't pickle %s: extension code %ld is out of range
argument must have 'read' and 'readline' attributes
NEWOBJ class argument isn't a type object
NEWOBJ class argument has NULL tp_new
slot state is not a dictionary
A load persistent id instruction was encountered,
but no persistent_load function was specified.
Global and instance pickles are not supported.
unsupported pickle protocol: %d
could not convert string to int
decoder did not return a string/unicode object (type=%.400s)
s*|z:raw_unicode_escape_decode
pack expected %zd items for packing (got %zd)
argument for 's' must be a string
argument for 'p' must be a string
integer out of range for '%c' format code
integer argument expected, got non-integer (implicit conversion using __int__ is deprecated)
__int__ method returned non-integer
cannot convert argument to integer
BINUNICODE pickle has negative byte count
'%.400s' codec can't decode byte 0x%s in position %zd: %.400s
'%.400s' codec can't decode bytes in position %zd-%zd: %.400s
can't translate character u'\%s' in position %zd: %.400s
can't translate characters in position %zd-%zd: %.400s
dict items iterator must return 2-tuples
odd number of items for SETITEMS
__getslice__ not supported for exception classes in 3.x; use args attribute
right operand length must match slice length
buffer indices must be integers
buffer assignment index out of range
right operand must be a single byte
the typecode character used to create the array
the size, in bytes, of one array item
dump(object) -- Write an object in pickle format to the object's pickle stream
clear_memo() -- Clear the picklers memo
getvalue() -- Finish picking a list-based pickle
dump(obj, file, protocol=0) -- Write an object in pickle format to the given file.
See the Pickler docstring for the meaning of optional argument proto.
dumps(obj, protocol=0) -- Return a string containing an object in pickle format.
See the Pickler docstring for the meaning of optional argument proto.
load(file) -- Load a pickle from the given file
loads(string) -- Load a pickle from the given string
Pickler(file, protocol=0) -- Create a pickler.
This takes a file-like object for writing a pickle data stream.
The optional proto argument tells the pickler to use the given
protocol; supported protocols are 0, 1, 2.  The default
protocol is 0, to be backwards compatible.  (Protocol 0 is the
only protocol that can be written to a file opened in text
mode and read back successfully.  When using a protocol higher
than 0, make sure the file is opened in binary mode, both when
pickling and unpickling.)
Protocol 1 is more efficient than protocol 0; protocol 2 is
more efficient than protocol 1.
Specifying a negative protocol version selects the highest
protocol version supported.  The higher the protocol used, the
more recent the version of Python needed to read the pickle
produced.
The file parameter must have a write() method that accepts a single
string argument.  It can thus be an open file object, a StringIO
object, or any other custom object that meets this interface.
Unpickler(file) -- Create an unpickler.
can't set %s.__name__
can't delete %s.__name__
__getinitargs__
dispatch_table
copy_reg
_extension_registry
_inverted_registry
_extension_cache
cPickle.PickleError
cPickle.PicklingError
cPickle.UnpickleableError
cPickle.UnpicklingError
cPickle.BadPickleGet
1.71
HIGHEST_PROTOCOL
[sssss]
format_version
compatible_formats
message attribute was deleted
|i:__reduce_ex__
|n:read
O|i:dumps
 while pickling an object
long too large to pickle
class has no name
save_reduce
__newobj__
__newobj__ arglist is empty
persistent id must be string
S:loads
could not find MARK
unpickling stack underflow
bad pickle data
pickle data was truncated
NEWOBJ expected an arg tuple.
state is not a dictionary
invalid load key, '%s'.
s#|z:escape_decode
insecure string pickle
[Errno %s] %s: %s
[Errno %s] %s
%s (%s, line %ld)
%s (%s)
%s (line %ld)
O|z:raw_unicode_escape_encode
missing format argument
bBhHiIlLqQ
s#:loads
args may not be deleted
Exception 
<exception repr() failed>
 in 
<object repr() failed>
 ignored
<unbound method %s.%s>
<bound method %s.%s of %s>
float modulo
result too large
buffer is read-only
ArrayType
typecode
buffer_info
byteswap
tofile
tostring
tounicode
inst_persistent_id
binary
fast
clear_memo
arrayiterator
array.array
cPickle.Pdata
cPickle.Unpickler
cPickle.Pickler
O|O:array
array.array()
../Modules/arraymodule.c
precision too big
int_curr_symbol
currency_symbol
mon_decimal_point
mon_thousands_sep
mon_grouping
positive_sign
negative_sign
int_frac_digits
p_cs_precedes
p_sep_by_space
n_cs_precedes
n_sep_by_space
p_sign_posn
n_sign_posn
classic long division
complex_add
can't pickle %.200s objects
__slotnames__
_slotnames
(NO)
(Oi)
_reduce_ex
substring not found
<function %s at %p>
i:getsignal
ii:kill
ss#nns
<built-in function %s>
%s%s%sj%s
complex_sub
complex_abs
absolute value too large
|O:now
iiiiiiiO
can't compare %s to %s
ii:waitpid
<module '%s' (built-in)>
<module '%s' from '%s'>
module filename missing
|OO:count
a number is required
no current thread ident
select.error
POLLNVAL
EPOLLIN
EPOLLOUT
EPOLLPRI
EPOLLERR
EPOLLHUP
EPOLLET
EPOLLONESHOT
EPOLLRDNORM
EPOLLRDBAND
EPOLLWRNORM
EPOLLWRBAND
EPOLLMSG
b;array item must be integer
string or read-only buffer
|n:readlines
|n:truncate
O:memoryview
thread.local.%p
5.2.0
unidata_version
3.2.0
ucd_3_2_0
s:lookup
zlib.error
MAX_WBITS
DEFLATED
DEF_MEM_LEVEL
Z_BEST_SPEED
Z_BEST_COMPRESSION
Z_DEFAULT_COMPRESSION
Z_FILTERED
Z_HUFFMAN_ONLY
Z_DEFAULT_STRATEGY
Z_FINISH
Z_NO_FLUSH
Z_SYNC_FLUSH
Z_FULL_FLUSH
1.2.8
ZLIB_VERSION
attrgetter()
|O:groupdict
zlib.Decompress
zlib.Compress
unicodedata.UCD
insort
_localdummy_destroyed
select.epoll
select.poll
array() argument 1 or typecode must be char (string or ascii-unicode with length 1), not %s
array assignment index out of range
bad typecode (must be c, b, B, u, h, H, i, I, l, L, f or d)
Accessing non-existent array segment
Alternate form (#) not allowed in float format specifier
string too large in _PyString_FormatLong
__complex__ should return a complex object
no ordering relation is defined for complex numbers
__getnewargs__ should return a tuple, not '%.200s'
copy_reg._slotnames didn't return a list or None
'%.200s' object doesn't support slice deletion
builtin_function_or_method order comparisons not supported in 3.x
%s arg must be None, unicode or str
O!n;decoding error handler must return (unicode, int) tuple
decoded result is too long for a Python string
<built-in method %s of %s object at %p>
%c arg not in range(0x110000) (wide Python build)
timestamp out of range for platform localtime()/gmtime() function
can't compare offset-naive and offset-aware datetimes
can't subtract offset-naive and offset-aware datetimes
cannot make memory view because object does not have the buffer interface
structseq index must be integer
throw() third argument must be a traceback object
exceptions must be classes, or instances, not %s
Initialization arguments are not supported
Couldn't get thread-state dictionary
methodcaller needs at least one argument, the method name
%s should return bool or int, returned %s
True if the epoll handler is closed
Y@eti:access
ifilter()
dropwhile()
O|O&O&:index
%r is not in list
imap()
s#:fromstring
|OOO:print
O&:sysconf
DEF_GLOBAL
DEF_LOCAL
DEF_PARAM
DEF_FREE
DEF_FREE_CLASS
DEF_IMPORT
DEF_BOUND
TYPE_FUNCTION
TYPE_CLASS
TYPE_MODULE
OPT_IMPORT_STAR
OPT_EXEC
OPT_BARE_EXEC
GLOBAL_EXPLICIT
GLOBAL_IMPLICIT
CELL
SCOPE_OFF
SCOPE_MASK
|OO:deque
maxlen must be non-negative
|OO:complex
complex() arg is not a string
__complex__
can't convert complex to int
s*:a2b_hex
Odd-length string
Non-hexadecimal digit found
O|i:seek
in math_frexp
(di)
dO:ldexp
in math_ldexp
|O:read
negative seek value %zd
PyCF_ONLY_AST
82160
eti:chmod
et:rmdir
ss:putenv
%s=%s
s:unsetenv
buffer index out of range
c;array item must be char
array indices must be integer
On:fromfile
arg1 must be open file
not enough items in file
array.index(x): x not in list
u#:fromunicode
O(cO)O
pop from empty array
array('%c')
array('%c', 
arg must be open file
arg must be list
h;array item must be integer
O|O:getsizeof
i;array item must be integer
l;array item must be integer
long too big to convert
f;array item must be float
d;array item must be float
e%+.02d
either 0 or 
invalid decimal Unicode string
imap() must have at least two arguments.
array.fromstring(x): x cannot be self
string length not a multiple of item size
sep must be None, str or unicode, not %.200s
end must be None, str or unicode, not %.200s
unrecognized configuration name
configuration names must be strings or integers
field elt is required for SetComp
cannot add more blocks to the deque
complex() can't take second arg if first is a string
complex() arg is a malformed string
complex() second arg can't be a string
complex() argument must be a string or a number
float(r) didn't return a float
can't convert complex to float
don't know how to byteswap this array type
'%c' format requires 0 <= number <= %zu
Expected an int or long as second argument to ldexp.
ubyte format requires 0 <= number <= 255
invalid whence (%i, should be 0, 1 or 2)
can only append array (not "%.200s") to array
bad argument type for built-in operation
sequence index must be integer
can only assign array (not "%.200s") to array slice
attempt to assign array of size %zd to extended slice of size %zd
can only extend with array of same kind
array indices must be integers
can only extend array with array (not "%.200s")
fromunicode() may only be called on type 'u' arrays
tounicode() may only be called on type 'u' arrays
array.remove(x): x not in list
weakly-referenced object no longer exists
u#;array item must be unicode character
array item must be unicode character
signed char is less than minimum
signed char is greater than maximum
Type %.100s doesn't define __sizeof__
__sizeof__() should return >= 0
unsigned short is less than minimum
unsigned short is greater than maximum
unsigned int is greater than maximum
unsigned int is less than minimum
can't convert negative long to unsigned
LONG pickle has negative byte count
unsigned long is less than minimum
could not convert string to float
PyOS_ascii_formatd is deprecated, use PyOS_double_to_string instead
%.400s constructor takes %s%zd positional argument%s
Return symbol and scope dictionaries used internally by compiler.
expected %s node, got %.400s
invalid boolean value: %.400s
invalid integer value: %.400s
unknown boolop found
unknown unaryop found
unknown cmpop found
unknown expr_context found
O()O
unknown operator found
izip()
pop from an empty deque
ii|i:getsockopt
getsockaddrlen: bad family
Module field "body" must be a list, not a %.200s
required field "body" missing from Module
Interactive field "body" must be a list, not a %.200s
required field "body" missing from Interactive
required field "body" missing from Expression
Suite field "body" must be a list, not a %.200s
required field "body" missing from Suite
expected some sort of mod, but got %.400s
required field "lineno" missing from stmt
required field "col_offset" missing from stmt
required field "name" missing from FunctionDef
required field "args" missing from FunctionDef
FunctionDef field "body" must be a list, not a %.200s
required field "body" missing from FunctionDef
FunctionDef field "decorator_list" must be a list, not a %.200s
required field "decorator_list" missing from FunctionDef
required field "name" missing from ClassDef
ClassDef field "bases" must be a list, not a %.200s
required field "bases" missing from ClassDef
ClassDef field "body" must be a list, not a %.200s
required field "body" missing from ClassDef
ClassDef field "decorator_list" must be a list, not a %.200s
required field "decorator_list" missing from ClassDef
Delete field "targets" must be a list, not a %.200s
required field "targets" missing from Delete
Assign field "targets" must be a list, not a %.200s
required field "targets" missing from Assign
required field "value" missing from Assign
required field "target" missing from AugAssign
required field "op" missing from AugAssign
required field "value" missing from AugAssign
Print field "values" must be a list, not a %.200s
required field "values" missing from Print
required field "nl" missing from Print
required field "target" missing from For
required field "iter" missing from For
For field "body" must be a list, not a %.200s
required field "body" missing from For
For field "orelse" must be a list, not a %.200s
required field "orelse" missing from For
required field "test" missing from While
While field "body" must be a list, not a %.200s
required field "body" missing from While
While field "orelse" must be a list, not a %.200s
required field "orelse" missing from While
required field "test" missing from If
If field "body" must be a list, not a %.200s
required field "body" missing from If
If field "orelse" must be a list, not a %.200s
required field "orelse" missing from If
required field "context_expr" missing from With
With field "body" must be a list, not a %.200s
required field "body" missing from With
TryExcept field "body" must be a list, not a %.200s
required field "body" missing from TryExcept
TryExcept field "handlers" must be a list, not a %.200s
required field "lineno" missing from excepthandler
required field "col_offset" missing from excepthandler
ExceptHandler field "body" must be a list, not a %.200s
required field "body" missing from ExceptHandler
expected some sort of excepthandler, but got %.400s
required field "handlers" missing from TryExcept
TryExcept field "orelse" must be a list, not a %.200s
required field "orelse" missing from TryExcept
TryFinally field "body" must be a list, not a %.200s
required field "body" missing from TryFinally
TryFinally field "finalbody" must be a list, not a %.200s
required field "finalbody" missing from TryFinally
required field "test" missing from Assert
Import field "names" must be a list, not a %.200s
required field "names" missing from Import
ImportFrom field "names" must be a list, not a %.200s
required field "names" missing from ImportFrom
required field "body" missing from Exec
Global field "names" must be a list, not a %.200s
required field "names" missing from Global
required field "value" missing from Expr
expected some sort of stmt, but got %.400s
required field "lineno" missing from expr
required field "col_offset" missing from expr
expected some sort of boolop, but got %.400s
required field "op" missing from BoolOp
BoolOp field "values" must be a list, not a %.200s
required field "values" missing from BoolOp
required field "left" missing from BinOp
required field "op" missing from BinOp
required field "right" missing from BinOp
expected some sort of unaryop, but got %.400s
required field "op" missing from UnaryOp
required field "operand" missing from UnaryOp
required field "args" missing from Lambda
required field "body" missing from Lambda
required field "test" missing from IfExp
required field "body" missing from IfExp
required field "orelse" missing from IfExp
Dict field "keys" must be a list, not a %.200s
required field "keys" missing from Dict
Dict field "values" must be a list, not a %.200s
required field "values" missing from Dict
Set field "elts" must be a list, not a %.200s
required field "elts" missing from Set
required field "elt" missing from ListComp
ListComp field "generators" must be a list, not a %.200s
required field "generators" missing from ListComp
required field "elt" missing from SetComp
SetComp field "generators" must be a list, not a %.200s
required field "generators" missing from SetComp
required field "key" missing from DictComp
required field "value" missing from DictComp
DictComp field "generators" must be a list, not a %.200s
required field "generators" missing from DictComp
required field "elt" missing from GeneratorExp
GeneratorExp field "generators" must be a list, not a %.200s
required field "generators" missing from GeneratorExp
required field "left" missing from Compare
Compare field "ops" must be a list, not a %.200s
expected some sort of cmpop, but got %.400s
required field "ops" missing from Compare
Compare field "comparators" must be a list, not a %.200s
required field "comparators" missing from Compare
required field "func" missing from Call
Call field "args" must be a list, not a %.200s
required field "args" missing from Call
Call field "keywords" must be a list, not a %.200s
required field "arg" missing from keyword
required field "value" missing from keyword
required field "keywords" missing from Call
required field "value" missing from Repr
required field "n" missing from Num
AST string must be of type str or unicode
required field "s" missing from Str
required field "value" missing from Attribute
required field "attr" missing from Attribute
required field "ctx" missing from Attribute
required field "value" missing from Subscript
required field "slice" missing from Subscript
required field "ctx" missing from Subscript
required field "id" missing from Name
required field "ctx" missing from Name
List field "elts" must be a list, not a %.200s
required field "elts" missing from List
required field "ctx" missing from List
Tuple field "elts" must be a list, not a %.200s
required field "elts" missing from Tuple
required field "ctx" missing from Tuple
expected some sort of expr, but got %.400s
AST identifier must be of type str
required field "target" missing from comprehension
required field "iter" missing from comprehension
comprehension field "ifs" must be a list, not a %.200s
required field "ifs" missing from comprehension
required field "name" missing from alias
no int where int expected in memo
izip argument #%zd must support iteration
getsockopt buflen out of range
getsockaddrlen: unknown BT protocol
OiII
Unknown Bluetooth protocol
shbhs#
IIIII
%02X:%02X:%02X:%02X:%02X:%02X
first arg must be callable
2nd arg must be a tuple
can't start new thread
timed out
d:sleep
i|i:recv
negative buffersize in recv
timeout period too long
deque index out of range
s*|i:send
O|O&:register
concurrent poll() invocation
i:strerror
Timeout value out of range
iii:setsockopt
iis#:setsockopt
i:dup
O&is#:fcntl
fcntl string arg too long
ii:read
 after coercion
../Objects/bytearrayobject.c
s*:a2b_base64
Incorrect padding
s*:b2a_base64
Too much data for base64 line
n|O&:center
padded string is too long
O|zi:utf_32_encode
O|z:utf_7_encode
n|c:ljust
op_getitem
n:zfill
op_setitem
s*|I:crc32
s*i:crc_hqx
s*:a2b_hqx
Illegal char
s*:a2b_uu
Trailing garbage
s*:rledecode_hqx
Orphaned RLE code at start
s*:b2a_hqx
s*:b2a_uu
At most 45 bytes at once
s*:rlecode_hqx
OO|nn:bisect_left
lo must be non-negative
OO|nn:bisect_right
OO|nn:insort_left
OO|nn:insort_right
op_contains
op_lt
i:fstat
replace bytes is too long
O|zi:utf_16_encode
s*|zi:utf_16_decode
truncated data
illegal UTF-16 surrogate
illegal encoding
utf16
(u#n)
%.200s attribute must be str
subsection not found
s#:fromhex
optional 3rd arg must be a dictionary
Unhandled exception in thread started by 
PyEval_AcquireThread: NULL new thread state
PyEval_AcquireThread: non-NULL old thread state
timeout must be a float or None
arguments 1-3 must be sequences
filedescriptor out of range in select()
too many file descriptors in select()
fileno() returned a non-integer
argument must be an int, or have a fileno() method.
file descriptor cannot be a negative integer (%i)
sys.exc_clear() not supported in 3.x; use except clauses
PyThreadState_DeleteCurrent: no current tstate
Python int too large for C unsigned short
timeout must be an integer or None
strerror() argument out of range
O&i|I;fcntl requires a file or file descriptor, an integer and optionally a third integer or a string
short format requires SHRT_MIN <= number <= SHRT_MAX
byte format requires -128 <= number <= 127
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/
String has incomplete number of bytes
xrange object index out of range
operator.isCallable() is not supported in 3.x. Use hasattr(obj, '__call__').
can't set bytearray slice from %.100s
cannot add more objects to bytearray
object cannot be interpreted as an index
non-hexadecimal number found in fromhex() arg at position %zd
can only join an iterable of bytes (item %ld has type '%.100s')
!"#$%&'()*+,-012345689@ABCDEFGHIJKLMNPQRSTUVXYZ[`abcdefhijklmpqr
}}}}}}}}}}~}}~}}}}}}}}}}}}}}}}}}}
}}}}}
 !"#$}%&'()*+},-./}}}}0123456}789:;<}}=>?}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}
B c0
s2R"
b$C4 
S6r&
>2.Q
P%@Fpg`
RwbVr
ftGd$T
Wfvv
F4VL
DXeH
uJTZ7j
ld\EL
n6~UNt^
 n;^
Qkkbal
i]Wb
9a&g
MGiI
wn>Jj
#.zf
+o*7
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/
?456789:;<=
 !"#$%&'()*+,-./0123
.A(O(Ns)N)
pop from empty bytearray
value not found in bytearray
|On:rsplit
(ii)
_after_fork
i:WIFSIGNALED
i:WIFEXITED
i:WEXITSTATUS
ii:dup2
etO:execv
etOO:execve
integer conversion failed
count exceeds C integer size
index exceeds C integer size
(nO)
(nnO)
 in __call__
unknown
IEEE, little-endian
IEEE, big-endian
complex function
math range error
in math_2
D:isnan
D:phase
arg function
D:polar
polar function
dd:rect
rect function
OO|i:dump
|O:localtime
s#|I:crc32
sO:register_error
s*|zi:utf_7_decode
unexpected special character
utf7
unterminated shift sequence
O|z:unicode_internal_decode
truncated input
unicode_internal
PyImport_ReInitLock failed to create a new lock
execv() arg 2 must be a tuple or list
execv() arg 2 must not be empty
execv() arg 2 must contain only strings
execve() arg 2 must be a tuple or list
execve() arg 3 must be a mapping object
et;execve() arg 2 must contain only strings
execve(): env.keys() or env.values() is not a list
s;execve() arg 3 contains a non-string key
s;execve() arg 3 contains a non-string value
PyCapsule_SetContext called with invalid PyCapsule object
PyCapsule_GetContext called with invalid PyCapsule object
PyCapsule_GetDestructor called with invalid PyCapsule object
PyCapsule_GetName called with invalid PyCapsule object
PyCapsule_SetPointer called with null pointer
PyCapsule_SetPointer called with invalid PyCapsule object
PyCapsule_SetName called with invalid PyCapsule object
Couldn't create thread-state for new thread
auto-releasing thread-state, but no thread-state for this thread
This thread state must be current when releasing
argument of type '%.200s' is not iterable
sequence.index(x): x not in sequence
can't apply this %s to %s object
in 3.x, __delslice__ has been removed; use __delitem__
in 3.x, __setslice__ has been removed; use __setitem__
%.200s instance has no __call__ method
__getformat__() argument must be string, not %.500s
__getformat__() argument 1 must be 'double' or 'float'
insane float_format or double_format
marshal.dump() 2nd arg must be file
ushort format requires 0 <= number <= USHRT_MAX
<code object %.100s at %p, file "%.300s", line %d>
don't know how to handle %.400s in error callback
partial character in shift sequence
non-zero padding bits in shift sequence
expected a readable buffer object
illegal code point (> 0x10FFFF)
O!n;translating error handler must return (unicode, int) tuple
?|)b,
7'{O^B@
character mapping must be in range(0x%lx)
need a single Unicode character as parameter
code point not in range(0x110000)
Out of memory while decompressing data
while preparing to decompress data
while finishing data decompression
Can't allocate memory to compress data
Out of memory while compressing data
Can't allocate memory for compression object
while creating compression object
Can't allocate memory for decompression object
while creating decompression object
max_length must be greater than zero
length must be greater than zero
__coerce__ didn't return a 2-tuple
0.0 to a negative or complex power
complex divmod(), // and % are deprecated
list changed size during iteration
Stop argument for islice() must be None or an integer: 0 <= x <= maxint.
Indices for islice() must be None or an integer: 0 <= x <= maxint.
Step for islice() must be a positive integer or None.
expected some sort of expr_context, but got %.400s
arguments field "args" must be a list, not a %.200s
required field "args" missing from arguments
arguments field "defaults" must be a list, not a %.200s
required field "defaults" missing from arguments
ExtSlice field "dims" must be a list, not a %.200s
required field "dims" missing from ExtSlice
required field "value" missing from Index
expected some sort of slice, but got %.400s
expected some sort of operator, but got %.400s
Alternate form (#) not allowed in complex format specifier
Zero padding is not allowed in complex format specifier
'=' alignment flag is not allowed in complex format specifier
File or stream is not seekable.
whence must be between 0 and 2, not %d
null byte in argument for long()
Cannot create a consistent method resolution
order (MRO) for bases
required argument is not a float
float too large to pack with f format
O!|O:name
no such name
HANGUL SYLLABLE 
CJK UNIFIED IDEOGRAPH-%X
s*|zii:utf_32_ex_decode
utf32
s*|zi:utf_32_le_decode
s*|zi:utf_32_decode
O|z:utf_32_le_encode
s*|zi:utf_32_be_decode
s*|zii:utf_16_ex_decode
s*|zi:utf_16_le_decode
O|z:utf_16_be_encode
s*|zi:utf_16_be_decode
s#|z:readbuffer_encode
t#|z:charbuffer_encode
O|z:unicode_internal_encode
S|z:escape_encode
sO!:normalize
NFKD
invalid normalization form
NFKC
O!:category
O!:bidirectional
O|ss:decode
s*|z:latin_1_decode
O|ss:encode
s#|in:decompress
while decompressing data
O|z:unicode_escape_encode
s#|i:compress
Bad compression level
while compressing data
while finishing compression
|iiiii:compressobj
Invalid initialization option
s#:compress
while compressing
|i:flush
from deflateEnd()
while flushing
|i:decompressobj
unused_data
unconsumed_tail
s#|i:decompress
while decompressing
from inflateEnd()
incrementalencoder
complex_mul
complex modulo
complex_pow
complex exponentiation
complex remainder
complex divmod()
classic complex division
complex_classic_div
complex division by zero
op_eq
n must be >= 0
nO:nlargest
starmap()
op_ne
op_xor
op_le
op_or_
op_gt
op_and_
op_sub
op_ge
islice()
chain()
slice(
can't convert complex to long
complex_div
|O:gmtime
OO|n:subn
xrange(%ld)
xrange(%ld, %ld)
xrange(%ld, %ld, %ld)
O|nn:BufferedRandom
seek of closed file
Onn:getslice
op_delitem
										
"#$%&'
"#$%&'
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
                                                                                                                                
%&'()*+,-./01
34567
;<=>??
ABCDE
FGHIJKLMN
]00^_0`abcdef
ijklm
pqrstu
vwxyz
000000
00000000
00000000000000000000000000000000
	!	$	'	*	-	0	3	6	9	<	?	B	E	
H	K	N	Q	T	W	Z	]	`	c	f	i	l	o	r	u	x	{	~	
 ! $ ' * - 0 3 6 9 < ? B E H K N Q T W Z ] ` c f i m q u y } 
! !#!&!)!,!/!2!5!8!;!>!A!D!G!J!M!P!S!V!Y!\!_!b!e!h!k!n!q!t!w!z!}!
"""%"("+"/"3"7":"="@"C"F"I"L"O"R"U"X"["^"a"d"g"j"m"p"s"v"y"|"
#"#&#*#.#2#6#:#>#B#F#J#N#R#V#Z#^#b#f#j#n#r#v#z#~#
$"$&$*$.$2$6$:$>$B$F$J$N$R$V$Z$^$b$f$j$n$r$v$z$~$
%,%5%
:%<%>%@%B%D%F%H%J%L%
N%P%R%T%V%X%Z%\%^%`%b%d%f%h%j%l%n%p%r%t%v%
x%z%|%~%
& &"&$&&&(&*&,&.&0&2&4&6&8&:&<&>&@&B&D&F&H&J&L&N&P&R&T&V&X&Z&\&^&`&b&d&f&h&j&l&n&p&r&t&v&x&z&|&~&
' '"'$'&'('*','.'0'2'4'6'8':'<'>'@'B'D'F'H'J'L'N'P'R'T'V'X'Z'\'^'`'b'd'f'h'j'l'n'p'r't'v'x'z'|'~'
( ("($(&(((*(,(.(0(2(4(6(8(:(<(>(@(B(D(F(H(J(L(N(P(R(T(V(X(Z(\(^(`(b(d(
f(h(j(l(n(p(
r(t(v(x(z(|(
) )")$)&)()*),).)0)2)4)6)8):)<)>)@)B)D)F)H)J)L)N)P)R)T)V)X)Z)\)^)`)b)d)f)h)j)l)n)p)r)t)v)x)z)|)~)
* *"*$*
&*(***,*.*0*2*4*6*8*:*<*
@*B*D*F*H*J*L*
N*P*R*T*V*X*Z*\*^*`*b*d*f*h*j*l*n*p*r*t*v*x*z*|*~*
+ +"+$+&+(+*+,+
.+0+2+4+
6+8+:+<+>+
B+D+F+H+J+L+N+
P+R+T+V+X+Z+\+^+`+b+d+f+h+j+l+n+p+r+t+v+x+z+|+~+
, ,",$,&,(,*,,,.,0,2,4,6,8,:,<,>,@,B,D,F,H,J,L,N,P,R,T,V,X,Z,\,^,`,b,d,f,h,j,l,n,p,r,t,v,x,z,|,~,
- -"-$-&-(-*-,-.-0-2-4-6-8-:-<->-@-B-D-F-H-J-L-N-P-R-T-V-X-Z-\-^-`-b-d-f-h-j-l-n-p-r-t-v-x-z-|-~-
. .".$.&.(.*.,...0.2.4.6.8.:.<.>.@.B.D.F.H.J.L.N.P.R.T.V.X.Z.\.^.`.b.d.f.h.j.l.n.p.r.t.v.x.z.|.~.
/ /"/$/&/(/*/,/./0/2/4/6/8/:/</>/@/B/D/F/H/J/L/N/P/R/T/V/X/Z/\/^/`/b/d/f/h/j/l/n/p/r/t/v/x/z/|/~/
0 0"0$0&0(0*0,0.00020406080:0<0>0
@0B0D0F0H0J0L0N0P0R0T0V0X0Z0\0^0`0b0d0f0h0j0l0n0p0r0t0v0x0z0|0~0
1!1%1)1-111315181
E1H1K1N1Q1
[1]1_1a1c1e1g1i1k1m1o1q1s1u1w1y1{1}1
2!2#2%2'2)2+2-2/21232527292;2=2?2A2C2E2G2I2K2M2O2Q2S2U2W2Y2[2]2_2a2c2e2g2i2k2m2o2q2s2u2w2y2{2}2
3!3#3%3'3)3+3-3/31333537393;3=3?3A3C3E3G3I3K3M3O3Q3S3U3W3Y3[3]3_3a3c3e3g3i3k3m3o3q3s3u3w3y3{3}3
4!4#4%4'4)4+4-4/41434547494;4=4?4A4C4E4G4I4K4M4O4Q4S4U4W4Y4[4]4_4a4c4e4g4i4k4m4o4q4s4u4w4y4{4}4
5!5#5%5'5)5+5-5/51535557595;5=5?5A5C5E5G5I5K5M5O5Q5S5U5W5Y5[5]5_5a5c5e5g5i5k5m5o5q5s5u5w5y5{5}5
#$%&'()
,-./
 !"#$%&'()))*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNNOPQRS
TUVWXYZ[\]^_`abcdddddddddddddddddddddddddddddddddddddddddddddddddddedddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddfgddddddddh))ijklmnopqr
stttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttuvvvvvvvvvvvvvvvvwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwxxyz{|}}~
))))))
))))))))
ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd
dddddddddddddddddddddddddddddddd
xxxx
wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww
wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww
EN67
m*A$
$=2$
^2$3
,2$3E
,2$3
^8$l
8$=8$
t8$m
+$3m
8$(8$
8$3E
,8$*
2$*-L8$
5L8$
^2$=G
!2$3
	8$3
t8$3
$3ZL8$
$3=2
T%SS
k%SS
g%SS
wp2$
EN*3
EN-3
@7$*
hL2$
L2$*L2$-L2$
$*-L2$
J$3E
$*L8$-L8$
5AZA
A*-AlqA
A*-L
kZLh
LhZA
\*-3L
\Z3L
53AZ3A
3A*-3Alq3A
5CAZCA
5C3A
5C3L
{lqCA-L
E\ZL
E\*-L
3E\ZL
3E\*-L
uA*-
?rer
Whre
x(s 
+-EV
mVYq
VYqj
:VYjq
sVYq
VYqj
:VYjq
mVYl
VYlj
:VYjl
sVYl
VYlj
:VYjl
mVYE
VYlj
:VYqj
:VYEj
:VYq
VYjE
sVYE
VYlj
:VYqj
:VYEj
:VYq
VYjE
VY*j
:VY-j
:VYq
VYqj
:VY-
VYjq
VY*j
:VY-j
:VYl
VYlj
:VY-
VYjl
VY*j
:VY-j
:VYE
VYlj
:VYqj
:VYEj
:VY*lj
:VY-lj
:VY*qj
:VY-qj
:VYq
VYjE
VYj3
VYj3
VYq3
lVY3q
mVYq
VYq3
lVY3q
sVYl
VYl3
lVY3l
mVYl
VYl3
lVY3l
sVYE
VYE3
lVY3E
mVYE
VYE3
lVY3E
sVYq
VYq3
lVY3q
VYl3
lVY3l
VYE3
lVY3E
sVYj
?VYj
mVYj
VYj*
mVYjl
.7jC
AjZAj
 ZAj
YZAj
YZAj
YZATZA
ZAjT
TZAj
iCZA
oCZA
CZAj
hCZAj
hCZA
hCZA
hCZA"jCZA
4ZAj
UZAj
*C(s
-C(s
*-3A
E\Z3L
E\*-3L
E\ZL
3E\Z
AZLG
X8ZL
m-3L
qGZA
pZLG
pZLG
]GZA
Os-C
Os*C
Gs*(
Ws*T
GX7X
re(*
CA*-CA
TA*-TAlqTAZL
reZL
qGZAZLG
pZLG
?2K$
RNK0
RNK0
^2*m
=8*E
is*3
Zk	 
Zg	 
=k	 
=g	 
!k	 
!g	 
~k	 
~g	 
(k	 
(g	 
mk	 
mg	 
5 k5 
Y5 `5 g5 
z5 |
5 A5 
xs*3
xs-3
|s*C
|s-C
|s*T
[s-T
[s-C
[s*C
s*C(s-C(s
ENm3
p|Nb
xk"6
xg"6
B7"4<"4H"4D"4I"4J"4
W"4e"4
|#Eb
|#Eb
|#E*C
|#E-C
|#E|=
|#Em
|#E*
|#E-
|#E*
|#E-
|#E*
|#E-
|#E*T
|#E-T
|#E*3
|#E-3
|#E*
|#E-
|#E*
|#E-
|#E*C
|#E-C
|#E*(s
|#E-(s
ENn67n
nX7n
n*(sn
n-(sn
OsnE
|s]-
|s]b
	N]4
	N]4
5A]ZA]
jg91
l91a
V91a
P91a
D91a
d91a
'91a
n91a
>91a
M91a
K91a
J91a
H91a
G91a
C91a
B91a
@91a
?91a
<91a
;91a
:91a
991a
891a
791a
691a
591a
491a
x91a
291a
b91a
091a
/91a
.91a
-91a
,91a
+91a
*91a
)91a
(91a
'91a
&91a
A91a
491a
491a
i91a
E91a
$91a
#91a
"91a
!91a
 91a
	91a
@6k0
iXiXD
XXpX
iXiXD
ihii
iXiXD
iXiXi
eQ|u
eQ|u
eQ|u
ENv67v
vX7v
v*(sv
v-(sv
OsvE
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUV
WXYZ[\]^_`abcdef
hijklmnopqrstuvwxyz{|}
expected a writeable buffer object
Cannot use string as modifiable buffer
__format__ expects str or unicode, not %.200s
astimezone() cannot be applied to a naive datetime
can't compare offset-naive and offset-aware times
%s(%d, %d, %d, %d, %d, %d, %d)
tzinfo.%s() must return a whole number of minutes
tzinfo.%s() must return None or timedelta, not '%s'
tzinfo.%s() returned %d; must be in -1439 .. 1439
tzinfo.tzname() must return None or a string, not '%s'
unexpected value from _strptime._strptime
fromutc: argument must be a datetime
fromutc: dt.tzinfo is not self
fromutc: non-None utcoffset() result required
fromutc: non-None dst() result required
fromutc: tz.dst() gaveinconsistent results; cannot convert
a tzinfo subclass must implement %s()
goofy result from PyOS_snprintf
intermediate overflow during division
integer division result too large for a float
'%.50s' object attribute '__dict__' is read-only
Cannot pass NaN to float.as_integer_ratio.
Cannot pass infinity to float.as_integer_ratio.
first argument must be callable or None
deque mutated during iteration
deque mutated during remove().
deque.remove(x): x not in deque
%s.__cmp__(x,y) requires y to be a '%s', not a '%s'
can only assign tuple to %s.__bases__, not %s
can only assign non-empty tuple to %s.__bases__, not ()
%s.__bases__ must be tuple of old- or new-style classes, not '%s'
%s assignment: '%s' deallocator differs from '%s'
%s assignment: '%s' object layout differs from '%s'
__get__(None, None) is invalid
descriptor '%s' of '%.100s' object needs an argument
descriptor '%s' requires a type but received a '%.100s'
descriptor '%s' requires a subtype of '%.100s' but received '%.100s
__dict__ must be set to a dictionary, not a '%.200s'
can't delete __class__ attribute
__class__ must be set to new-style class, not '%s' object
__class__ assignment: only for heap types
This object has no __weakref__
<attribute '%s' of '%s' objects>
getaddrinfo() argument 1 must be string or None
getaddrinfo() argument 2 must be integer or string
invalid indexing of 0-dim memory
cannot index memory using "%.200s"
number of bits must be greater than zero
sizehint must be greater zero, got %d
I/O operation on closed epoll fd
an int variable for demonstration purposes
OnnO:setslice
O!O!:combine
|iiiiiiiO:replace
%s %s %2d %02d:%02d:%02d %04d
i:fromordinal
ordinal must be >= 1
%04d-%02d-%02d
mktime argument out of range
(ON)
|iii:replace
%s(%d, %d, %d)
O!:astimezone
|c:isoformat
%02d:%02d:%02d
.%06d
d|O:fromtimestamp
d:utcfromtimestamp
unconvertible time
%s(%d, %d, %d, %d, %d, %d)
%s(%d, %d, %d, %d, %d)
ss:strptime
_strptime
(ONN)
|iiiiO:replace
%c%02d%s%02d
, tzinfo=
iiiiiiiii
%s(%d, %d, %d, %d)
%s(%d, %d)
%s(%d)
%d day%s, 
%d:%02d:%02d
defaultdict(
defaultdict(%s, %s)
|n:rotate
O(O)
O(On)
O(OO)O
O(On)O
deque(%%r, maxlen=%zd)
deque(%r)
deque([
], maxlen=%zd)
:getstate
i:setstate
n|O&:ljust
n|O&:rjust
can't set %s.__bases__
can't delete %s.__bases__
op_truediv
op_floordiv
__dict__ may not be deleted
__dict__ must be a dictionary
dict_proxy(%s)
|i:__reduce__
OO|iiii:getaddrinfo
iiisO
s*|i:sendall
i:umask
i:getrandbits
s:gethostbyaddr
|i:epoll
O|I:register
getstate() -> state
setstate(state)
classmeth
classmeth(*args, **kw)
staticmeth
staticmeth(*args, **kw)
eventmask
sizehint
bench
xxsubtype.spamlist
xxsubtype.spamdict
maxevents must be greater than 0, got %d
file.softspace not supported in 3.x
can't delete softspace attribute
f.xreadlines() not supported in 3.x, try 'for line in f' instead
<%s file u'%s', mode '%s' at %p>
cannot use unicode as modifiable buffer
<_io.FileIO name=%s mode='%s'>
hexadecimal value too large to represent as a float
invalid hexadecimal floating-point string
hexadecimal string too long to convert
__setformat__() argument 1 must be 'double' or 'float'
__setformat__() argument 2 must be 'unknown', 'IEEE, little-endian' or 'IEEE, big-endian'
can only set %s format to 'unknown' or the detected platform value
Excluded frozen object named %.200s
frozen object %.200s is not a code object
__defaults__ must be set to a tuple object
__code__ must be set to a code object
%s() requires a code object with %zd free vars, not %zd
a partial object's dictionary may not be deleted
setting partial object's dictionary to a non-dict
<generator object %.200s at %p>
accessing non-existent unicode segment
getgrnam(): name not found: %s
getgrgid(): gid not found: %lu
|di:poll
timeout is too large
O:unregister
OI:modify
w*:readinto
O:writelines
|O:truncate
reentrant call inside %s
<%s file %s, mode '%s' at %p>
cycle()
ifilterfalse()
(OK)
<_io.FileIO [closed]>
<_io.FileIO fd=%d mode='%s'>
op_mod
ss:__setformat__
-0x0.0p+0
-0x%sp%c%d
op_add
op_mul
op_div
 package
import %s # frozen%s
<frozen>
Cell is empty
O(O)(OOOO)
invalid partial state
i:set_debug
(iii)
i|ii:set_threshold
i:setcheckinterval
etet:symlink
MD5Type
digest_size
blocksize
digestsize
|s*:new
block_size
hexdigest
_sha512.sha512
_sha512.sha384
_sha256.sha256
_sha256.sha224
_sha.sha
_md5.md5
maxevents
0@heap argument must be a list
nO:nsmallest
OO:compare_digest
Missing ']' in format string
|n:product
repeat argument too large
s:getpwnam
O&:setuid
sOs(ssi):load_module
invalid file open mode %.200s
bad/closed file object
Bad magic number in %.200s
etO:utime
iiiiSO!O!O!SSiS|O!O!:code
s:new_module
(nnn)
len() of unsized object
pop from an empty set
O|O:groupby
takewhile()
fillvalue
On:combinations
r must be non-negative
O|O:permutations
OO:compress
count(%zd)
count(%s)
count(%s, %s)
O(OO)
O(n)
repeat(%s)
repeat(%s, %zd)
selectors
Buffer must be single dimension
unsupported operand types(s) or combination of types: '%.100s' and '%.100s'
repeat argument cannot be negative
getpwnam(): name not found: %s
load_module arg#2 should be a file or None
utime() arg 2 must be a tuple (atime, mtime)
code: argcount must not be negative
code: nlocals must not be negative
name tuples must contain only strings, not '%.500s'
izip_longest() got an unexpected keyword argument
izip_longest argument #%zd must support iteration
On:combinations_with_replacement
CJK UNIFIED IDEOGRAPH-
iOi:lseek
s:system
etet:link
invalid time
|iii:socketpair
O&i|OOi:lockf
unrecognized lockf argument
_strptime_time
unmarshallable object
in math_fmod
intermediate overflow in fsum
-inf + inf in fsum
math.fsum partials
in math_hypot
in math_modf
in math_pow
in math_1a
(OnN)
|O:readlines
negative size value %zd
initial_value
|Oz:__init__
Negative seek position %zd
(OOnN)
Negative size value %zd
cannot delete memory
index out of bounds
<memory at %p>
s:gethostbyname
O!O!|OOO:function
arg 5 (closure) must be tuple
O!|O:instance
i:isatty
op_concat
Onn:delslice
op_iadd
op_iand
op_idiv
op_ifloordiv
op_ilshift
op_imod
op_imul
op_ior
op_irshift
op_isub
op_itruediv
op_ixor
op_iconcat
Oi:op_irepeat
op_lshift
Oi:op_repeat
op_rshift
ii:closerange
|zz:tempnam
<tmpfile>
unexpected NULL from tmpnam_r
s:statvfs
ii:fchmod
iO&O&:fchown
iO&:fpathconf
i:fstatvfs
iO:ftruncate
i:tcgetpgrp
ii:tcsetpgrp
i:ttyname
O&:setegid
O&:seteuid
O&:setgid
(s#)
(u#)
(O(OO))
s:zipimporter.get_data
OO&:modify
ddddd
etO&O&:chown
O&:confstr
(NNN)
sO&:initgroups
O&:getpwuid
getpwuid(): uid not found
etO&O&:lchown
O&:major
expected int/long, %s found
O&:minor
ii:makedev
O&O&O&:setresgid
O&O&O&:setresuid
bytearray(b
i:alarm
O&Iw#|i:ioctl
ioctl string arg too long
O&Is#:ioctl
(Ni)
state vector must be a tuple
invalid state
_expand
read-write
<cell at %p: empty>
<method '%s' of '%s' objects>
U:write
not writable
%s([
O|i:Pickler
|i:getvalue
Invalid get data
persistent_load
find_global
s|i:mkfifo
i:set_wakeup_fd
invalid fd
ii:siginterrupt
id|d:setitimer
load() -- Load a pickle
noload
argdefs
strcoll arguments must be strings
object too deeply nested to marshal
factorial() only accepts integral values
factorial() not defined for negative values
%.200s.__setstate__ argument should be 3-tuple, got %.200s
second item of state must be an integer, not %.200s
position value cannot be negative
third item of state should be a dict, got a %.200s
initial_value must be unicode or None, not %.200s
Invalid whence (%i, should be 0, 1 or 2)
Can't do nonzero cur-relative seeks
unicode argument expected, got '%s'
%.200s.__setstate__ argument should be 4-tuple, got %.200s
third item of state must be an integer, got %.200s
fourth item of state should be a dict, got a %.200s
cannot modify read-only memory
mismatching item sizes for "%.200s" and "%.200s"
cannot modify size of memoryview object
tolist() only supports byte views
tolist() only supports one-dimensional objects
arg 3 (name) must be None or string
arg 4 (defaults) must be None or tuple
arg 5 (closure) must be None or tuple
%s requires closure of length %zd, not %zd
arg 5 (closure) expected cell, found %s
instance() second arg must be dictionary or None
operator.sequenceIncludes() is not supported in 3.x. Use operator.contains().
'%.200s' object can't be repeated
null argument to internal routine
tempnam is a potential security risk to your program
tempnam has been removed in 3.x; use the tempfile module
tmpfile has been removed in 3.x; use the tempfile module
tmpnam is a potential security risk to your program
tmpnam has been removed in 3.x; use the tempfile module
__getitem__ not supported for exception classes in 3.x; use args attribute
Load averages are unobtainable
getpwuid(): uid not found: %lu
can't convert negative number to unsigned long
bytearray object is too large to make repr
O&I|i;ioctl requires a file or file descriptor, an integer and optionally an integer or buffer argument
state vector is the wrong size
jumpahead requires an integer, not '%s'
<%s buffer ptr %p, size %zd at %p>
<%s buffer for %p, size %zd, offset %zd at %p>
<cell at %p: %.80s object at %p>
cannot compare sets using cmp()
Attempt to getvalue() a non-list-based pickler
Unexpected data in internal list
set_wakeup_fd only works in main thread
noload() -- not load a pickle, but go through most of the motions
This function can be used to read past a pickle without instantiating
any objects or importing any modules.  It can also be used to find all
persistent references without instantiating any objects or importing
any modules.
(;L4B
YaRwND
qqiA
{`Zj@
>@#B
a@i:getitimer
unhashable type
O(OOO)
s|s:getservbyname
service/proto not found
i|s:getservbyport
port/proto not found
s:inet_aton
is:inet_pton
Oi:getnameinfo
si|II
IPv4 sockaddr must be 2 tuple
i:ntohs
long int larger than 32 bits
i:htons
s*O:sendto
s*iO:sendto
s#:inet_ntoa
is#:inet_ntop
unknown address family %d
iii|i:fromfd
i|i:recvfrom
w*|ii:recvfrom_into
w*|ii:recv_into
s:atof
strop_atof
empty string for atof()
s|i:atoi
invalid base for atoi()
s|i:atol
invalid base for atol()
empty string for atol()
t#t#|nn:find
O|t#:join
t#t#t#|n:replace
empty pattern string
t#t#|nn:rfind
t#|z#n:split
St#|t#:translate
z*|n:unpack_from
sss:symtable
OO!:call_tracing
i:setdlopenflags
i:setrecursionlimit
lineno must be an integer
i:WIFSTOPPED
s#:lookup
undefined character name '%s'
O!|O:decimal
not a decimal
O!|O:numeric
not a numeric character
O!|O:digit
not a digit
O!:mirrored
O!:combining
O!:decomposition
%04X
O!:east_asian_width
(s#i)
((si))
((OK))
negative seek position %s
s:gethostbyname_ex
i:wait3
resource
struct_rusage
ii:wait4
sp_nam
login name
sp_pwd
encrypted password
sp_lstchg
date of last change
sp_min
min #days between changes
sp_max
max #days between changes
sp_warn
sp_inact
sp_expire
sp_flag
reserved
<noBreak>
<compat>
<super>
<fraction>
<sub>
<font>
<circle>
<wide>
<vertical>
<square>
<isolated>
<final>
<initial>
<medial>
<small>
<narrow>
spwd.struct_spwd
getspall
nbytes
getservbyport: port must be 0-65535.
illegal IP address string passed to inet_aton
illegal IP address string passed to inet_pton
getnameinfo() argument 1 must be a tuple
sockaddr resolved to multiple addresses
sendto() takes 2 or 3 arguments (%d given)
packed IP wrong length for inet_ntoa
invalid length of packed IP address string
<socket object, fd=%ld, family=%d, type=%d, protocol=%d>
negative buffersize in recvfrom
negative buffersize in recvfrom_into
nbytes is greater than the length of the buffer
negative buffersize in recv_into
buffer too small for requested bytes
tuple.index(x): x not in tuple
strop functions are obsolete; use string methods
invalid literal for atof(): %.200s
invalid literal for atoi(): %.200s
atoi() literal too large: %.200s
invalid literal for atol(): %.200s
first argument must be sequence of strings
first argument must be a sequence
'%c' format requires %zd <= number <= %zd
char format require string of length 1
pack_into expected buffer argument
pack_into expected offset argument
pack_into expected %zd items for packing (got %zd)
pack_into requires a buffer of at least %zd bytes
unpack_from requires a buffer argument
unpack_from requires a buffer of at least %zd bytes
symtable() arg 3 must be 'exec' or 'eval' or 'single'
recursion limit must be positive
f_lineno can only be set by a line trace function
line %d comes before the current code block
line %d comes after the current code block
can't jump to 'except' line as there's no exception
can't jump into or out of a 'finally' block
can't jump into the middle of a block
cell comparisons not supported in 3.x
The fill character cannot be converted to Unicode
The fill character must be exactly one character long
decoding Unicode is not supported in 3.x
underlying stream is not seekable
telling position disabled by next() call
can't reconstruct logical file position
can't do nonzero cur-relative seeks
can't do nonzero end-relative seeks
invalid whence (%d, should be 0, 1 or 2)
underlying read() should have returned a bytes object, not '%.200s'
can't restore logical file position
#days before pw expires to warn user about it
#days after pw expires until account is blocked
#days since 1970-01-01 until account is disabled
@OOOi|OOO:warn_explicit
<weakref at %p; dead>
EXT specifies code <= 0
(O(lll))
<zipimporter object "%.300s">
s#|I:adler32
invalid input data
inconsistent stream state
library version mismatch
Error %d %s
Error %d %s: %.200s
Inconsistent stream state
et:chroot
OO|i
memo must be a dictionary
cannot copy this match object
SHA1
SHA512
SHA384
SHA256
SHA224
|n:stack_size
size not valid: %zd bytes
l:LOG_UPTO
l:LOG_MASK
l;mask for priority
ss:load_package
ss|O!:load_source
ss|O!:load_compiled
s:is_builtin
s:getprotobyname
protocol not found
OS|i
<%s>
<%s name=%s>
i:_exit
OO|n:BlockingIOError
LOG_EMERG
LOG_ALERT
LOG_CRIT
LOG_ERR
LOG_WARNING
LOG_NOTICE
LOG_INFO
LOG_DEBUG
LOG_PID
LOG_CONS
LOG_NDELAY
LOG_NOWAIT
LOG_PERROR
LOG_KERN
LOG_USER
LOG_MAIL
LOG_DAEMON
LOG_AUTH
LOG_LPR
LOG_LOCAL0
LOG_LOCAL1
LOG_LOCAL2
LOG_LOCAL3
LOG_LOCAL4
LOG_LOCAL5
LOG_LOCAL6
LOG_LOCAL7
LOG_SYSLOG
LOG_CRON
LOG_UUCP
LOG_NEWS
|Sll:openlog
is;[priority,] message string
t#t#|nn:count
s#|i:expandtabs
tabsize must be at least 1
result is too long
s:getspnam
getspnam(): name not found
|si:makefile
<socket>
|n:peek
s*:update
sO&:pathconf
s|iO&:mknod
ii:setpgid
i:getsid
ii:killpg
i:getpgid
i:nice
O&i:flock
i:WSTOPSIG
i:WTERMSIG
i:WCONTINUED
i:WCOREDUMP
|i:stat_float_times
s:is_frozen
too many groups
groups must be integers
OO|nn:BufferedRWPair
s:strxfrm
ss|O!:load_dynamic
s:get_frozen_object
s:init_builtin
s:init_frozen
Python %s
__main__ not frozen
s:setdefaultencoding
logoption
facility
closelog
setlogmask
module_globals
<weakref at %p; to '%.50s' at %p (%s)>
<weakref at %p; to '%.50s' at %p>
fast mode: can't pickle cyclic objects including object type %s at %p
unregistered extension code %ld
_inverted_registry[%ld] isn't a 2-tuple of strings
BINSTRING pickle has negative byte count
<zipimporter object "%.300s%c%.150s">
incomplete or truncated stream
while copying compression object
while copying decompression object
attribute deletion is not supported
cannot deepcopy this match object
cannot deepcopy this pattern object
cannot copy this pattern object
<symtable entry %.100s(%ld), line %d>
bad argument to internal function
%s:%d: bad argument to internal function
size must be 0 or a positive value
setting stack size not supported
the BufferedRWPair object is being garbage-collected
a strictly positive integer is required
<_io.TextIOWrapper encoding=%s>
<_io.TextIOWrapper name=%s encoding=%s>
array.write() not supported in 3.x; use array.tofile()
array.read() not supported in 3.x; use array.fromfile()
unable to determine login name
domain must be a non-empty string
setgroups argument must be a sequence
PyOS_ascii_strtod and PyOS_ascii_atof are deprecated.  Use PyOS_string_to_double instead.
Py_EndInterpreter: thread is not current
Py_EndInterpreter: thread still has a frame
Py_EndInterpreter: not the last thread
PyEval_ReleaseThread: NULL thread state
PyEval_ReleaseThread: wrong thread state
Py_NewInterpreter: call Py_Initialize first
No such frozen object named %.200s
ffffff
?<member '%s' of '%s' objects>
NT%d
%.32s(%.32s)
Subset DFA %s
 Subset %d
 (finish)
  Arc to state %d, label %s
NULL
<super: <class '%s'>, NULL>
<capsule object %s%s%s at %p>
deallocating None
Label %d/'%s' not found
grammar.c:findlabel()
NULL
object  : 
no mem for new grammar
no mem for bitset
result too long
out of mem
Label @ %8p, %d: %s
Calculate FIRST set for '%s'
Left-recursion for '%s'
Left-recursion below '%s'
FIRST set for '%s': {
Adding FIRST sets ...
Translating label %s ...
Label %s is non-terminal %d.
Label %s is terminal %d.
Label %s is a keyword
Can't alloc dest '%s'
Unknown OP label %s
Can't translate label '%s'
no mem for new nfa grammar
no mem for new nfa
Dump of NFA for '%s' ...
%c%2d%c
    
-> %2d  %s
Making DFA for '%s' ...
before minimizing
Rename state %d to %d.
after minimizing
MSTART
RULE
ITEM
ATOM
ENDMARKER
NUMBER
STRING
NEWLINE
INDENT
DEDENT
LPAR
RPAR
LSQB
RSQB
COLON
COMMA
SEMI
PLUS
MINUS
VBAR
AMPER
LESS
GREATER
PERCENT
BACKQUOTE
LBRACE
RBRACE
EQEQUAL
NOTEQUAL
LESSEQUAL
GREATEREQUAL
TILDE
CIRCUMFLEX
LEFTSHIFT
RIGHTSHIFT
DOUBLESTAR
PLUSEQUAL
MINEQUAL
PERCENTEQUAL
AMPEREQUAL
VBAREQUAL
CIRCUMFLEXEQUAL
LEFTSHIFTEQUAL
RIGHTSHIFTEQUAL
DOUBLESTAREQUAL
DOUBLESLASH
DOUBLESLASHEQUAL
<ERRORTOKEN>
<N_TOKENS>
<slot wrapper '%s' of '%s' objects>
The basestring type cannot be instantiated
method.__self__ not accessible in restricted mode
Invalid call to PyCObject_SetVoidPtr
PyCObject_GetDesc with non-C-object
PyCObject_GetDesc called with null pointer
<weakproxy at %p to %.100s at %p>
<super: <class '%s'>, <%s object>>
<method-wrapper '%s' of %s object at %p>
releasing %zd interned strings
total size of all interned strings: %zd/%zd mortal/immortal
decoder did not return a string object (type=%.400s)
type    : %s
refcount: %ld
address : %p
writable contiguous buffer requested for a non-contiguousobject.
both destination and source must have the buffer interface
destination is too small to receive data from source
f_exc_value has been removed in 3.x
f_exc_type has been removed in 3.x
f_exc_traceback has been removed in 3.x
PyCObject_AsVoidPtr with non-C-object
PyCObject_AsVoidPtr called with null pointer
CObject type is not supported in 3.x. Please use capsule objects instead.
PyCObject_FromVoidPtrAndDesc called with null description
no mem to resize labellist in addlabel
no mem to resize arc list in addarc
no mem to resize state in addstate
no mem to resize dfa in adddfa
Re-calculating FIRST set for '%s' ???
no mem for new sym in calcfirstset
no mem to resize sym in calcfirstset
Can't translate NAME label '%s'
Can't translate STRING label %s
Compiling (meta-) parse tree into NFA grammar
NFA '%s' has %d states; start %d, finish %d
no mem for xx_state in makedfa
Error: nonterminal '%s' may produce empty.
Unversioned directory
;*3$"
sys.long_info
A struct sequence that holds information about Python's
internal representation of integers.  The attributes are read only.
isatty() -> bool.  True if the file is connected to a TTY device.
fileno() -> int.  Return the underlying file descriptor (an integer).
writable() -> bool.  True if file was opened in a write mode.
readable() -> bool.  True if file was opened in a read mode.
seekable() -> bool.  True if file supports random-access.
close() -> None.  Close the file.
A closed file cannot be used for further I/O operations.  close() may be
called more than once without error.
truncate([size: int]) -> int.  Truncate the file to at most size bytes and
return the truncated size.
Size defaults to the current file position, as returned by tell().
The current file position is changed to the value of size.
tell() -> int.  Current file position.
Can raise OSError for non seekable files.
seek(offset: int[, whence: int]) -> int.  Move to new file position
and return the file position.
Argument offset is a byte count.  Optional argument whence defaults to
SEEK_SET or 0 (offset from start of file, offset should be >= 0); other values
are SEEK_CUR or 1 (move relative to current position, positive or negative),
and SEEK_END or 2 (move relative to end of file, usually negative, although
many platforms allow seeking beyond the end of a file).
Note that not all file objects are seekable.
write(b) -> int.  Write array of bytes b, return number written.
Only makes one system call, so not all of the data may be written.
The number of bytes actually written is returned.  In non-blocking mode,
returns None if the write would block.
readinto() -> Same as RawIOBase.readinto().
readall() -> bytes.  read all data from the file, returned as bytes.
In non-blocking mode, returns as much as is immediately available,
or None if no data is available.  On end-of-file, returns ''.
read(size: int) -> bytes.  read at most size bytes, returned as bytes.
Only makes one system call, so less data may be returned than requested
In non-blocking mode, returns None if no data is available.
On end-of-file, returns ''.
file(name: str[, mode: str]) -> file IO object
Open a file.  The mode can be 'r' (default), 'w' or 'a' for reading,
writing or appending.  The file will be created if it doesn't exist
when opened for writing or appending; it will be truncated when
opened for writing.  Add a '+' to the mode to allow simultaneous
reading and writing.
S.__sizeof__() -> size of S in memory, in bytes
S.__format__(format_spec) -> unicode
Return a formatted version of S as described by format_spec.
S.format(*args, **kwargs) -> unicode
Return a formatted version of S, using substitutions from args and kwargs.
The substitutions are identified by braces ('{' and '}').
S.zfill(width) -> unicode
Pad a numeric string S with zeros on the left, to fill a field
of the specified width. The string S is never truncated.
S.isalnum() -> bool
Return True if all characters in S are alphanumeric
and there is at least one character in S, False otherwise.
S.isalpha() -> bool
Return True if all characters in S are alphabetic
and there is at least one character in S, False otherwise.
S.isnumeric() -> bool
Return True if there are only numeric characters in S,
False otherwise.
S.isdigit() -> bool
Return True if all characters in S are digits
and there is at least one character in S, False otherwise.
S.isdecimal() -> bool
Return True if there are only decimal characters in S,
False otherwise.
S.isspace() -> bool
Return True if all characters in S are whitespace
and there is at least one character in S, False otherwise.
S.istitle() -> bool
Return True if S is a titlecased string and there is at least one
character in S, i.e. upper- and titlecase characters may only
follow uncased characters and lowercase characters only cased ones.
Return False otherwise.
S.isupper() -> bool
Return True if all cased characters in S are uppercase and there is
at least one cased character in S, False otherwise.
S.islower() -> bool
Return True if all cased characters in S are lowercase and there is
at least one cased character in S, False otherwise.
S.endswith(suffix[, start[, end]]) -> bool
Return True if S ends with the specified suffix, False otherwise.
With optional start, test S beginning at that position.
With optional end, stop comparing S at that position.
suffix can also be a tuple of strings to try.
S.startswith(prefix[, start[, end]]) -> bool
Return True if S starts with the specified prefix, False otherwise.
With optional start, test S beginning at that position.
With optional end, stop comparing S at that position.
prefix can also be a tuple of strings to try.
S.upper() -> unicode
Return a copy of S converted to uppercase.
S.translate(table) -> unicode
Return a copy of the string S, where all characters have been mapped
through the given translation table, which must be a mapping of
Unicode ordinals to Unicode ordinals, Unicode strings or None.
Unmapped characters are left untouched. Characters mapped to None
are deleted.
S.swapcase() -> unicode
Return a copy of S with uppercase characters converted to lowercase
and vice versa.
S.strip([chars]) -> unicode
Return a copy of the string S with leading and trailing
whitespace removed.
If chars is given and not None, remove characters in chars instead.
If chars is a str, it will be converted to unicode before stripping
S.splitlines(keepends=False) -> list of strings
Return a list of the lines in S, breaking at line boundaries.
Line breaks are not included in the resulting list unless keepends
is given and true.
S.rpartition(sep) -> (head, sep, tail)
Search for the separator sep in S, starting at the end of S, and return
the part before it, the separator itself, and the part after it.  If the
separator is not found, return two empty strings and S.
S.rstrip([chars]) -> unicode
Return a copy of the string S with trailing whitespace removed.
If chars is given and not None, remove characters in chars instead.
If chars is a str, it will be converted to unicode before stripping
S.rjust(width[, fillchar]) -> unicode
Return S right-justified in a Unicode string of length width. Padding is
done using the specified fill character (default is a space).
S.rindex(sub [,start [,end]]) -> int
Like S.rfind() but raise ValueError when the substring is not found.
S.rfind(sub [,start [,end]]) -> int
Return the highest index in S where substring sub is found,
such that sub is contained within S[start:end].  Optional
arguments start and end are interpreted as in slice notation.
Return -1 on failure.
S.decode([encoding[,errors]]) -> string or unicode
Decodes S using the codec registered for encoding. encoding defaults
to the default encoding. errors may be given to set a different error
handling scheme. Default is 'strict' meaning that encoding errors raise
a UnicodeDecodeError. Other possible values are 'ignore' and 'replace'
as well as any other name registered with codecs.register_error that is
able to handle UnicodeDecodeErrors.
S.lstrip([chars]) -> unicode
Return a copy of the string S with leading whitespace removed.
If chars is given and not None, remove characters in chars instead.
If chars is a str, it will be converted to unicode before stripping
S.lower() -> unicode
Return a copy of the string S converted to lowercase.
S.ljust(width[, fillchar]) -> int
Return S left-justified in a Unicode string of length width. Padding is
done using the specified fill character (default is a space).
S.index(sub [,start [,end]]) -> int
Like S.find() but raise ValueError when the substring is not found.
S.partition(sep) -> (head, sep, tail)
Search for the separator sep in S, and return the part before it,
the separator itself, and the part after it.  If the separator is not
found, return S and two empty strings.
S.find(sub [,start [,end]]) -> int
Return the lowest index in S where substring sub is found,
such that sub is contained within S[start:end].  Optional
arguments start and end are interpreted as in slice notation.
Return -1 on failure.
S.expandtabs([tabsize]) -> unicode
Return a copy of S where all tab characters are expanded using spaces.
If tabsize is not given, a tab size of 8 characters is assumed.
S.count(sub[, start[, end]]) -> int
Return the number of non-overlapping occurrences of substring sub in
Unicode string S[start:end].  Optional arguments start and end are
interpreted as in slice notation.
S.center(width[, fillchar]) -> unicode
Return S centered in a Unicode string of length width. Padding is
done using the specified fill character (default is a space)
S.title() -> unicode
Return a titlecased version of S, i.e. words start with title case
characters, all remaining cased characters have lower case.
S.capitalize() -> unicode
Return a capitalized version of S, i.e. make the first character
have upper case and the rest lower case.
S.join(iterable) -> unicode
Return a string which is the concatenation of the strings in the
iterable.  The separator between elements is S.
S.rsplit([sep [,maxsplit]]) -> list of strings
Return a list of the words in S, using sep as the
delimiter string, starting at the end of the string and
working to the front.  If maxsplit is given, at most maxsplit
splits are done. If sep is not specified, any whitespace string
is a separator.
S.split([sep [,maxsplit]]) -> list of strings
Return a list of the words in S, using sep as the
delimiter string.  If maxsplit is given, at most maxsplit
splits are done. If sep is not specified or is None, any
whitespace string is a separator and empty strings are
removed from the result.
S.replace(old, new[, count]) -> unicode
Return a copy of S with all occurrences of substring
old replaced by new.  If the optional argument count is
given, only the first count occurrences are replaced.
S.encode([encoding[,errors]]) -> string or unicode
Encodes S using the codec registered for encoding. encoding defaults
to the default encoding. errors may be given to set a different error
handling scheme. Default is 'strict' meaning that encoding errors raise
a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and
'xmlcharrefreplace' as well as any other name registered with
codecs.register_error that can handle UnicodeEncodeErrors.
T.count(value) -> integer -- return number of occurrences of value
T.index(value, [start, [stop]]) -> integer -- return first index of value.
Raises ValueError if the value is not present.
Private method returning an estimate of len(list(it)).
S.__sizeof__() -> size of S in memory, in bytes
S.splitlines(keepends=False) -> list of strings
Return a list of the lines in S, breaking at line boundaries.
Line breaks are not included in the resulting list unless keepends
is given and true.
S.expandtabs([tabsize]) -> string
Return a copy of S where all tab characters are expanded using spaces.
If tabsize is not given, a tab size of 8 characters is assumed.
S.decode([encoding[,errors]]) -> object
Decodes S using the codec registered for encoding. encoding defaults
to the default encoding. errors may be given to set a different error
handling scheme. Default is 'strict' meaning that encoding errors raise
a UnicodeDecodeError. Other possible values are 'ignore' and 'replace'
as well as any other name registered with codecs.register_error that is
able to handle UnicodeDecodeErrors.
S.encode([encoding[,errors]]) -> object
Encodes S using the codec registered for encoding. encoding defaults
to the default encoding. errors may be given to set a different error
handling scheme. Default is 'strict' meaning that encoding errors raise
a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and
'xmlcharrefreplace' as well as any other name registered with
codecs.register_error that is able to handle UnicodeEncodeErrors.
S.__format__(format_spec) -> string
Return a formatted version of S as described by format_spec.
S.format(*args, **kwargs) -> string
Return a formatted version of S, using substitutions from args and kwargs.
The substitutions are identified by braces ('{' and '}').
S.zfill(width) -> string
Pad a numeric string S with zeros on the left, to fill a field
of the specified width.  The string S is never truncated.
S.center(width[, fillchar]) -> string
Return S centered in a string of length width. Padding is
done using the specified fill character (default is a space)
S.rjust(width[, fillchar]) -> string
Return S right-justified in a string of length width. Padding is
done using the specified fill character (default is a space)
S.ljust(width[, fillchar]) -> string
Return S left-justified in a string of length width. Padding is
done using the specified fill character (default is a space).
S.title() -> string
Return a titlecased version of S, i.e. words start with uppercase
characters, all remaining cased characters have lowercase.
S.translate(table [,deletechars]) -> string
Return a copy of the string S, where all characters occurring
in the optional argument deletechars are removed, and the
remaining characters have been mapped through the given
translation table, which must be a string of length 256 or None.
If the table argument is None, no translation is applied and
the operation simply removes the characters in deletechars.
S.swapcase() -> string
Return a copy of the string S with uppercase characters
converted to lowercase and vice versa.
S.strip([chars]) -> string or unicode
Return a copy of the string S with leading and trailing
whitespace removed.
If chars is given and not None, remove characters in chars instead.
If chars is unicode, S will be converted to unicode before stripping
S.startswith(prefix[, start[, end]]) -> bool
Return True if S starts with the specified prefix, False otherwise.
With optional start, test S beginning at that position.
With optional end, stop comparing S at that position.
prefix can also be a tuple of strings to try.
S.rpartition(sep) -> (head, sep, tail)
Search for the separator sep in S, starting at the end of S, and return
the part before it, the separator itself, and the part after it.  If the
separator is not found, return two empty strings and S.
S.rstrip([chars]) -> string or unicode
Return a copy of the string S with trailing whitespace removed.
If chars is given and not None, remove characters in chars instead.
If chars is unicode, S will be converted to unicode before stripping
S.rindex(sub [,start [,end]]) -> int
Like S.rfind() but raise ValueError when the substring is not found.
S.rfind(sub [,start [,end]]) -> int
Return the highest index in S where substring sub is found,
such that sub is contained within S[start:end].  Optional
arguments start and end are interpreted as in slice notation.
Return -1 on failure.
S.replace(old, new[, count]) -> string
Return a copy of string S with all occurrences of substring
old replaced by new.  If the optional argument count is
given, only the first count occurrences are replaced.
S.lstrip([chars]) -> string or unicode
Return a copy of the string S with leading whitespace removed.
If chars is given and not None, remove characters in chars instead.
If chars is unicode, S will be converted to unicode before stripping
S.index(sub [,start [,end]]) -> int
Like S.find() but raise ValueError when the substring is not found.
S.find(sub [,start [,end]]) -> int
Return the lowest index in S where substring sub is found,
such that sub is contained within S[start:end].  Optional
arguments start and end are interpreted as in slice notation.
Return -1 on failure.
S.partition(sep) -> (head, sep, tail)
Search for the separator sep in S, and return the part before it,
the separator itself, and the part after it.  If the separator is not
found, return S and two empty strings.
S.endswith(suffix[, start[, end]]) -> bool
Return True if S ends with the specified suffix, False otherwise.
With optional start, test S beginning at that position.
With optional end, stop comparing S at that position.
suffix can also be a tuple of strings to try.
S.count(sub[, start[, end]]) -> int
Return the number of non-overlapping occurrences of substring sub in
string S[start:end].  Optional arguments start and end are interpreted
as in slice notation.
S.capitalize() -> string
Return a copy of the string S with only its first character
capitalized.
S.isalnum() -> bool
Return True if all characters in S are alphanumeric
and there is at least one character in S, False otherwise.
S.isalpha() -> bool
Return True if all characters in S are alphabetic
and there is at least one character in S, False otherwise.
S.istitle() -> bool
Return True if S is a titlecased string and there is at least one
character in S, i.e. uppercase characters may only follow uncased
characters and lowercase characters only cased ones. Return False
otherwise.
S.isdigit() -> bool
Return True if all characters in S are digits
and there is at least one character in S, False otherwise.
S.isspace() -> bool
Return True if all characters in S are whitespace
and there is at least one character in S, False otherwise.
S.isupper() -> bool
Return True if all cased characters in S are uppercase and there is
at least one cased character in S, False otherwise.
S.islower() -> bool
Return True if all cased characters in S are lowercase and there is
at least one cased character in S, False otherwise.
S.upper() -> string
Return a copy of the string S converted to uppercase.
S.lower() -> string
Return a copy of the string S converted to lowercase.
S.rsplit([sep [,maxsplit]]) -> list of strings
Return a list of the words in the string S, using sep as the
delimiter string, starting at the end of the string and working
to the front.  If maxsplit is given, at most maxsplit splits are
done. If sep is not specified or is None, any whitespace string
is a separator.
S.split([sep [,maxsplit]]) -> list of strings
Return a list of the words in the string S, using sep as the
delimiter string.  If maxsplit is given, at most maxsplit
splits are done. If sep is not specified or is None, any
whitespace string is a separator and empty strings are removed
from the result.
S.join(iterable) -> string
Return a string which is the concatenation of the strings in the
iterable.  The separator between elements is S.
Return state information for pickling.
S.indices(len) -> (start, stop, stride)
Assuming a sequence of length len, calculate the start and stop
indices, and the stride length of the extended slice described by
S. Out of bounds indices are clipped in a manner consistent with the
handling of normal slices.
Update a set with the union of itself and others.
Return the union of sets as a new set.
(i.e. all elements that are in either set.)
Update a set with the symmetric difference of itself and another.
Return the symmetric difference of two sets as a new set.
(i.e. all elements that are in exactly one of the sets.)
S.__sizeof__() -> size of S in memory, in bytes
Remove an element from a set; it must be a member.
If the element is not a member, raise a KeyError.
Return state information for pickling.
Remove and return an arbitrary set element.
Raises KeyError if the set is empty.
Report whether this set contains another set.
Report whether another set contains this set.
Return True if two sets have a null intersection.
Update a set with the intersection of itself and another.
Return the intersection of two or more sets as a new set.
(i.e. elements that are common to all of the sets.)
Remove all elements of another set from this set.
Return the difference of two or more sets as a new set.
(i.e. all elements that are in this set but not the others.)
Remove an element from a set if it is a member.
If the element is not a member, do nothing.
Return a shallow copy of a set.
x.__contains__(y) <==> y in x.
Remove all elements from this set.
Add an element to a set.
This has no effect if the element is already present.
Returns a reverse iterator.
Private method returning an estimate of len(list(it)).
D.iteritems() -> an iterator over the (key, value) items of D
D.itervalues() -> an iterator over the values of D
D.iterkeys() -> an iterator over the keys of D
D.copy() -> a shallow copy of D
D.clear() -> None.  Remove all items from D.
dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v.
v defaults to None.
D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.
If E present and has a .keys() method, does:     for k in E: D[k] = E[k]
If E present and lacks .keys() method, does:     for (k, v) in E: D[k] = v
In either case, this is followed by: for k in F: D[k] = F[k]
D.viewvalues() -> an object providing a view on D's values
D.viewitems() -> a set-like object providing a view on D's items
D.viewkeys() -> a set-like object providing a view on D's keys
D.values() -> list of D's values
D.items() -> list of D's (key, value) pairs, as 2-tuples
D.keys() -> list of D's keys
D.popitem() -> (k, v), remove and return some (key, value) pair as a
2-tuple; but raise KeyError if D is empty.
D.pop(k[,d]) -> v, remove specified key and return the corresponding value.
If key is not found, d is returned if given, otherwise KeyError is raised
D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D
D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.
D.has_key(k) -> True if D has a key k, else False
D.__sizeof__() -> size of D in memory, in bytes
x.__getitem__(y) <==> x[y]
D.__contains__(k) -> True if D has a key k, else False
long.bit_length() -> int or long
Number of bits necessary to represent self in binary.
>>> bin(37L)
'0b100101'
>>> (37L).bit_length()
Private method returning an estimate of len(list(it)).
Private method returning an estimate of len(list(it)).
int.bit_length() -> int
Number of bits necessary to represent self in binary.
>>> bin(37)
'0b100101'
>>> (37).bit_length()
F.__sizeof__() -> size of F in memory, in bytes
float.__format__(format_spec) -> string
Formats the float according to format_spec.
float.__setformat__(typestr, fmt) -> None
You probably don't want to use this function.  It exists mainly to be
used in Python's test suite.
typestr must be 'double' or 'float'.  fmt must be one of 'unknown',
'IEEE, big-endian' or 'IEEE, little-endian', and in addition can only be
one of the latter two if it appears to match the underlying C reality.
Override the automatic determination of C-level floating point type.
This affects how floats are converted to and from binary strings.
float.__getformat__(typestr) -> string
You probably don't want to use this function.  It exists mainly to be
used in Python's test suite.
typestr must be 'double' or 'float'.  This function returns whichever of
'unknown', 'IEEE, big-endian' or 'IEEE, little-endian' best describes the
format of floating point numbers used by the C type named by typestr.
float.hex() -> string
Return a hexadecimal representation of a floating-point number.
>>> (-0.1).hex()
'-0x1.999999999999ap-4'
>>> 3.14159.hex()
'0x1.921f9f01b866ep+1'
float.fromhex(string) -> float
Create a floating-point number from a hexadecimal string.
>>> float.fromhex('0x1.ffffp10')
2047.984375
>>> float.fromhex('-0x1p-1074')
-4.9406564584124654e-324
float.as_integer_ratio() -> (int, int)
Return a pair of integers, whose ratio is exactly equal to the original
float and with a positive denominator.
Raise OverflowError on infinities and a ValueError on NaNs.
>>> (10.0).as_integer_ratio()
(10, 1)
>>> (0.0).as_integer_ratio()
(0, 1)
>>> (-.25).as_integer_ratio()
(-1, 4)
__exit__(*excinfo) -> None.  Closes the file.
__enter__() -> self.
isatty() -> true or false.  True if the file is connected to a tty device.
close() -> None or (perhaps) an integer.  Close the file.
Sets data attribute .closed to True.  A closed file cannot be used for
further I/O operations.  close() may be called more than once without
error.  Some kinds of file objects (for example, opened by popen())
may return an exit status upon closing.
flush() -> None.  Flush the internal I/O buffer.
writelines(sequence_of_strings) -> None.  Write the strings to the file.
Note that newlines are not added.  The sequence can be any iterable object
producing strings. This is equivalent to calling write() for each string.
xreadlines() -> returns self.
For backward compatibility. File objects now include the performance
optimizations previously implemented in the xreadlines module.
readlines([size]) -> list of strings, each a line from the file.
Call readline() repeatedly and return a list of the lines so read.
The optional size argument, if given, is an approximate bound on the
total number of bytes in the lines returned.
readinto() -> Undocumented.  Don't use this; it may go away.
tell() -> current file position, an integer (may be a long integer).
truncate([size]) -> None.  Truncate the file to at most size bytes.
Size defaults to the current file position, as returned by tell().
seek(offset[, whence]) -> None.  Move to new file position.
Argument offset is a byte count.  Optional argument whence defaults to
0 (offset from start of file, offset should be >= 0); other values are 1
(move relative to current position, positive or negative), and 2 (move
relative to end of file, usually negative, although many platforms allow
seeking beyond the end of a file).  If the file is opened in text mode,
only offsets returned by tell() are legal.  Use of other offsets causes
undefined behavior.
Note that not all file objects are seekable.
fileno() -> integer "file descriptor".
This is needed for lower-level file interfaces, such os.read().
write(str) -> None.  Write string str to file.
Note that due to buffering, flush() or close() may be needed before
the file on disk reflects the data written.
read([size]) -> read at most size bytes, returned as a string.
If the size argument is negative or omitted, read until EOF is reached.
Notice that when in non-blocking mode, less data than what was requested
may be returned, even if no size parameter was given.
readline([size]) -> next line from the file, as a string.
Retain newline.  A non-negative size argument limits the maximum
number of bytes to return (an incomplete line may be returned then).
Return an empty string at EOF.
Return the name of the generator's associated code object.
close() -> raise GeneratorExit inside generator.
throw(typ[,val[,tb]]) -> raise exception in generator,
return next yielded value or raise StopIteration.
send(arg) -> send 'arg' into generator,
return next yielded value or raise StopIteration.
Private method returning an estimate of len(list(it)).
Descriptor to change the deleter on a property.
Descriptor to change the setter on a property.
Descriptor to change the getter on a property.
complex.__format__() -> str
Convert to a string according to format_spec.
complex.conjugate() -> complex
Return the complex conjugate of its argument. (3-4j).conjugate() == 3+4j.
Private method returning an estimate of len(list(it)).
B.zfill(width) -> copy of B
Pad a numeric string B with zeros on the left, to fill a field
of the specified width.  B is never truncated.
B.translate(table[, deletechars]) -> bytearray
Return a copy of B, where all characters occurring in the
optional argument deletechars are removed, and the remaining
characters have been mapped through the given translation
table, which must be a bytes object of length 256.
B.strip([bytes]) -> bytearray
Strip leading and trailing bytes contained in the argument.
If the argument is omitted, strip ASCII whitespace.
B.startswith(prefix [,start [,end]]) -> bool
Return True if B starts with the specified prefix, False otherwise.
With optional start, test B beginning at that position.
With optional end, stop comparing B at that position.
prefix can also be a tuple of strings to try.
B.splitlines(keepends=False) -> list of lines
Return a list of the lines in B, breaking at line boundaries.
Line breaks are not included in the resulting list unless keepends
is given and true.
B.split([sep[, maxsplit]]) -> list of bytearray
Return a list of the sections in B, using sep as the delimiter.
If sep is not given, B is split on ASCII whitespace characters
(space, tab, return, newline, formfeed, vertical tab).
If maxsplit is given, at most maxsplit splits are done.
B.rstrip([bytes]) -> bytearray
Strip trailing bytes contained in the argument.
If the argument is omitted, strip trailing ASCII whitespace.
B.rsplit(sep[, maxsplit]) -> list of bytearray
Return a list of the sections in B, using sep as the delimiter,
starting at the end of B and working to the front.
If sep is not given, B is split on ASCII whitespace characters
(space, tab, return, newline, formfeed, vertical tab).
If maxsplit is given, at most maxsplit splits are done.
B.rpartition(sep) -> (head, sep, tail)
Searches for the separator sep in B, starting at the end of B,
and returns the part before it, the separator itself, and the
part after it.  If the separator is not found, returns two empty
bytearray objects and B.
B.rjust(width[, fillchar]) -> copy of B
Return B right justified in a string of length width. Padding is
done using the specified fill character (default is a space)
B.rindex(sub [,start [,end]]) -> int
Like B.rfind() but raise ValueError when the subsection is not found.
B.rfind(sub [,start [,end]]) -> int
Return the highest index in B where subsection sub is found,
such that sub is contained within B[start,end].  Optional
arguments start and end are interpreted as in slice notation.
Return -1 on failure.
B.reverse() -> None
Reverse the order of the values in B in place.
B.replace(old, new[, count]) -> bytes
Return a copy of B with all occurrences of subsection
old replaced by new.  If the optional argument count is
given, only the first count occurrences are replaced.
B.remove(int) -> None
Remove the first occurance of a value in B.
B.pop([index]) -> int
Remove and return a single item from B. If no index
argument is given, will pop the last value.
B.partition(sep) -> (head, sep, tail)
Searches for the separator sep in B, and returns the part before it,
the separator itself, and the part after it.  If the separator is not
found, returns B and two empty bytearray objects.
B.lstrip([bytes]) -> bytearray
Strip leading bytes contained in the argument.
If the argument is omitted, strip leading ASCII whitespace.
B.ljust(width[, fillchar]) -> copy of B
Return B left justified in a string of length width. Padding is
done using the specified fill character (default is a space).
B.join(iterable_of_bytes) -> bytes
Concatenates any number of bytearray objects, with B in between each pair.
B.insert(index, int) -> None
Insert a single item into the bytearray before the given index.
B.index(sub [,start [,end]]) -> int
Like B.find() but raise ValueError when the subsection is not found.
bytearray.fromhex(string) -> bytearray
Create a bytearray object from a string of hexadecimal numbers.
Spaces between two numbers are accepted.
Example: bytearray.fromhex('B9 01EF') -> bytearray(b'\xb9\x01\xef').
B.find(sub [,start [,end]]) -> int
Return the lowest index in B where subsection sub is found,
such that sub is contained within B[start,end].  Optional
arguments start and end are interpreted as in slice notation.
Return -1 on failure.
B.extend(iterable int) -> None
Append all the elements from the iterator or sequence to the
end of B.
B.expandtabs([tabsize]) -> copy of B
Return a copy of B where all tab characters are expanded using spaces.
If tabsize is not given, a tab size of 8 characters is assumed.
B.endswith(suffix [,start [,end]]) -> bool
Return True if B ends with the specified suffix, False otherwise.
With optional start, test B beginning at that position.
With optional end, stop comparing B at that position.
suffix can also be a tuple of strings to try.
B.decode([encoding[, errors]]) -> unicode object.
Decodes B using the codec registered for encoding. encoding defaults
to the default encoding. errors may be given to set a different error
handling scheme.  Default is 'strict' meaning that encoding errors raise
a UnicodeDecodeError.  Other possible values are 'ignore' and 'replace'
as well as any other name registered with codecs.register_error that is
able to handle UnicodeDecodeErrors.
B.count(sub [,start [,end]]) -> int
Return the number of non-overlapping occurrences of subsection sub in
bytes B[start:end].  Optional arguments start and end are interpreted
as in slice notation.
B.center(width[, fillchar]) -> copy of B
Return B centered in a string of length width.  Padding is
done using the specified fill character (default is a space).
B.append(int) -> None
Append a single item to the end of B.
B.__sizeof__() -> int
Returns the size of B in memory, in bytes
Return state information for pickling.
B.__alloc__() -> int
Returns the number of bytes actually allocated.
Abstract classes can override this to customize issubclass().
This is invoked early on by abc.ABCMeta.__subclasscheck__().
It should return True, False or NotImplemented.  If it returns
NotImplemented, the normal algorithm is used.  Otherwise, it
overrides the normal algorithm (and the outcome is cached).
unicode(object='') -> unicode object
unicode(string[, encoding[, errors]]) -> unicode object
Create a new Unicode object from the given encoded string.
encoding defaults to the current default string encoding.
errors can be 'strict', 'replace' or 'ignore' and defaults to 'strict'.
tuple() -> empty tuple
tuple(iterable) -> tuple initialized from iterable's items
If the argument is a tuple, the return value is the same object.
Type basestring cannot be instantiated; it is the base for str and unicode.
str(object='') -> string
Return a nice string representation of the object.
If the argument is a string, the return value is the same object.
slice(stop)
slice(start, stop[, step])
Create a slice object.  This is used for extended slicing (e.g. a[0:10:2]).
frozenset() -> empty frozenset object
frozenset(iterable) -> frozenset object
Build an immutable unordered collection of unique elements.
set() -> new empty set object
set(iterable) -> new set object
Build an unordered collection of unique elements.
xrange(stop) -> xrange object
xrange(start, stop[, step]) -> xrange object
Like range(), but instead of returning a list, returns an object that
generates the numbers in the range on demand.  For looping, this is 
slightly faster than range() and more memory efficient.
module(name[, doc])
Create a module object.
The name must be a string; the optional doc argument can have any type.
memoryview(object)
Create a new memoryview object which references the given object.
dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)
long(x=0) -> long
long(x, base=10) -> long
Convert a number or string to a long integer, or return 0L if no arguments
are given.  If x is floating point, the conversion truncates towards zero.
If x is not a number or if base is given, then x must be a string or
Unicode object representing an integer literal in the given base.  The
literal can be preceded by '+' or '-' and be surrounded by whitespace.
The base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to
interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
int(x=0) -> int or long
int(x, base=10) -> int or long
Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is floating point, the conversion truncates towards zero.
If x is outside the integer range, the function returns a long instead.
If x is not a number or if base is given, then x must be a string or
Unicode object representing an integer literal in the given base.  The
literal can be preceded by '+' or '-' and be surrounded by whitespace.
The base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to
interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
staticmethod(function) -> method
Convert a function to be a static method.
A static method does not receive an implicit first argument.
To declare a static method, use this idiom:
     class C:
     def f(arg1, arg2, ...): ...
     f = staticmethod(f)
It can be called either on the class (e.g. C.f()) or on an instance
(e.g. C().f()).  The instance is ignored except for its class.
Static methods in Python are similar to those found in Java or C++.
For a more advanced concept, see the classmethod builtin.
classmethod(function) -> method
Convert a function to be a class method.
A class method receives the class as implicit first argument,
just like an instance method receives the instance.
To declare a class method, use this idiom:
  class C:
      def f(cls, arg1, arg2, ...): ...
      f = classmethod(f)
It can be called either on the class (e.g. C.f()) or on an instance
(e.g. C().f()).  The instance is ignored except for its class.
If a class method is called for a derived class, the derived class
object is passed as the implied first argument.
Class methods are different than C++ or Java static methods.
If you want those, see the staticmethod builtin.
function(code, globals[, name[, argdefs[, closure]]])
Create a function object from a code object and a dictionary.
The optional name string overrides the name from the code object.
The optional argdefs tuple specifies the default argument values.
The optional closure tuple supplies the bindings for free variables.
float(x) -> floating point number
Convert a string or number to a floating point number, if possible.
file(name[, mode[, buffering]]) -> file object
Open a file.  The mode can be 'r', 'w' or 'a' for reading (default),
writing or appending.  The file will be created if it doesn't exist
when opened for writing or appending; it will be truncated when
opened for writing.  Add a 'b' to the mode for binary files.
Add a '+' to the mode to allow simultaneous reading and writing.
If the buffering argument is given, 0 means unbuffered, 1 means line
buffered, and larger numbers specify the buffer size.  The preferred way
to open a file is with the builtin open() function.
Add a 'U' to mode to open the file for input with universal newline
support.  Any line ending in the input file will be seen as a '\n'
in Python.  Also, a file so opened gains the attribute 'newlines';
the value for this attribute is one of None (no newline read yet),
'\r', '\n', '\r\n' or a tuple containing all the newline types seen.
'U' cannot be combined with 'w' or '+' mode.
enumerate(iterable[, start]) -> iterator for index, value of iterable
Return an enumerate object.  iterable must be another object that supports
iteration.  The enumerate object yields pairs containing a count (from
start, which defaults to zero) and a value yielded by the iterable argument.
enumerate is useful for obtaining an indexed list:
    (0, seq[0]), (1, seq[1]), (2, seq[2]), ...
reversed(sequence) -> reverse iterator over values of the sequence
Return a reverse iterator
property(fget=None, fset=None, fdel=None, doc=None) -> property attribute
fget is a function to be used for getting an attribute value, and likewise
fset is a function for setting, and fdel a function for del'ing, an
attribute.  Typical use is to define a managed attribute x:
class C(object):
    def getx(self): return self._x
    def setx(self, value): self._x = value
    def delx(self): del self._x
    x = property(getx, setx, delx, "I'm the 'x' property.")
Decorators make defining new properties or modifying existing ones easy:
class C(object):
    @property
    def x(self):
        "I am the 'x' property."
        return self._x
    @x.setter
    def x(self, value):
        self._x = value
    @x.deleter
    def x(self):
        del self._x
complex(real[, imag]) -> complex number
Create a complex number from a real part and an optional imaginary part.
This is equivalent to (real + imag*1j) where imag defaults to 0.
code(argcount, nlocals, stacksize, flags, codestring, constants, names,
      varnames, filename, name, firstlineno, lnotab[, freevars[, cellvars]])
Create a code object.  Not for the faint of heart.
C objects to be exported from one extension module to another
C objects are used for communication between extension modules.  They
provide a way for an extension module to export a C interface to other
extension modules, so that extension modules can use the Python import
mechanism to link to one another.
instancemethod(function, instance, class)
Create an instance method object.
classobj(name, bases, dict)
Create a class object.  The name must be a string; the second argument
a tuple of classes, and the third a dictionary.
instance(class[, dict])
Create an instance without calling its __init__() method.
The class must be a classic class.
If present, dict must be a dictionary or None.
Capsule objects let you wrap a C "void *" pointer in a Python
object.  They're a way of passing data through the Python interpreter
without creating your own custom type.
Capsules are used for communication between extension modules.
They provide a way for an extension module to export a C interface
to other extension modules, so that extension modules can use the
Python import mechanism to link to one another.
bytearray(iterable_of_ints) -> bytearray.
bytearray(string, encoding[, errors]) -> bytearray.
bytearray(bytes_or_bytearray) -> mutable copy of bytes_or_bytearray.
bytearray(memory_view) -> bytearray.
Construct a mutable bytearray object from:
  - an iterable yielding integers in range(256)
  - a text string encoded using the specified encoding
  - a bytes or a bytearray object
  - any object implementing the buffer API.
bytearray(int) -> bytearray.
Construct a zero-initialized bytearray of the given length.
buffer(object [, offset[, size]])
Create a new buffer object which references the given object.
The buffer will reference a slice of the target object from the
start of the object (or at the specified offset). The slice will
extend to the end of the target object (or with the specified size).
bool(x) -> bool
Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.
super(type, obj) -> bound super object; requires isinstance(obj, type)
super(type) -> unbound super object
super(type, type2) -> bound super object; requires issubclass(type2, type)
Typical use to call a cooperative superclass method:
class C(B):
    def meth(self, arg):
        super(C, self).meth(arg)
L.sort(cmp=None, key=None, reverse=False) -- stable sort *IN PLACE*;
cmp(x, y) -> -1, 0, 1
L.reverse() -- reverse *IN PLACE*
L.count(value) -> integer -- return number of occurrences of value
L.index(value, [start, [stop]]) -> integer -- return first index of value.
Raises ValueError if the value is not present.
L.remove(value) -- remove first occurrence of value.
Raises ValueError if the value is not present.
L.pop([index]) -> item -- remove and return item at index (default last).
Raises IndexError if list is empty or index is out of range.
L.extend(iterable) -- extend list by appending elements from the iterable
L.insert(index, object) -- insert object before index
L.append(object) -- append object to end
L.__sizeof__() -- size of L in memory, in bytes
L.__reversed__() -- return a reverse iterator over the list
x.__getitem__(y) <==> x[y]
type(object) -> the object's type
type(name, bases, dict) -> a new type
list() -> new empty list
list(iterable) -> new list initialized from iterable's items
n_unnamed_fields
n_fields
n_sequence_fields
Object wrapper with a custom sort key.
cmp() wrapper for sort with custom keys.
sys.flags
Flags provided through command line arguments or environment vars.
sys.version_info
Version information as a named tuple.
call_tracing(func, args) -> object
Call func(*args), while tracing is enabled.  The tracing state is
saved, and restored afterwards.  This is intended to be called from
a debugger from a checkpoint, to recursively debug some other code.
gettrace()
Return the global debug tracing function set with sys.settrace.
See the debugger chapter in the library manual.
settrace(function)
Set the global debug tracing function.  It will be called on each
function call.  See the debugger chapter in the library manual.
setrecursionlimit(n)
Set the maximum depth of the Python interpreter stack to n.  This
limit prevents infinite recursion from causing an overflow of the C
stack and crashing Python.  The highest possible limit is platform-
dependent.
getprofile()
Return the profiling function set with sys.setprofile.
See the profiler chapter in the library manual.
setprofile(function)
Set the profiling function.  It will be called on each function call
and return.  See the profiler chapter in the library manual.
setdlopenflags(n) -> None
Set the flags used by the interpreter for dlopen calls, such as when the
interpreter loads extension modules.  Among other things, this will enable
a lazy resolving of symbols when importing a module, if called as
sys.setdlopenflags(0).  To share symbols across extension modules, call as
sys.setdlopenflags(ctypes.RTLD_GLOBAL).  Symbolic names for the flag modules
can be either found in the ctypes module, or in the DLFCN module. If DLFCN
is not available, it can be generated from /usr/include/dlfcn.h using the
h2py script.
getcheckinterval() -> current check interval; see setcheckinterval().
setcheckinterval(n)
Tell the Python interpreter to check for asynchronous events every
n instructions.  This also affects how often thread switches occur.
setdefaultencoding(encoding)
Set the current default string encoding used by the Unicode implementation.
_getframe([depth]) -> frameobject
Return a frame object from the call stack.  If optional integer depth is
given, return the frame object that many calls below the top of the stack.
If that is deeper than the call stack, ValueError is raised.  The default
for depth is zero, returning the frame at the top of the call stack.
This function should be used for internal and specialized
purposes only.
getsizeof(object, default) -> int
Return the size of object in bytes.
getrecursionlimit()
Return the current value of the recursion limit, the maximum depth
of the Python interpreter stack.  This limit prevents infinite
recursion from causing an overflow of the C stack and crashing Python.
getrefcount(object) -> integer
Return the reference count of object.  The count returned is generally
one higher than you might expect, because it includes the (temporary)
reference as an argument to getrefcount().
getfilesystemencoding() -> string
Return the encoding used to convert Unicode filenames in
operating system filenames.
getdlopenflags() -> int
Return the current value of the flags that are used for dlopen calls.
The flag constants are defined in the ctypes and DLFCN modules.
getdefaultencoding() -> string
Return the current default string encoding used by the Unicode 
implementation.
exit([status])
Exit the interpreter by raising SystemExit(status).
If the status is omitted or None, it defaults to zero (i.e., success).
If the status is an integer, it will be used as the system exit status.
If it is another kind of object, it will be printed and the system
exit status will be one (i.e., failure).
excepthook(exctype, value, traceback) -> None
Handle an exception by displaying it with a traceback on sys.stderr.
exc_clear() -> None
Clear global information on the current exception.  Subsequent calls to
exc_info() will return (None,None,None) until another exception is raised
in the current thread or the execution stack returns to a frame where
another exception is being handled.
exc_info() -> (type, value, traceback)
Return information about the most recent exception caught by an except
clause in the current stack frame or in an older stack frame.
displayhook(object) -> None
Print an object to sys.stdout and also save it in __builtin__._
_current_frames() -> dictionary
Return a dictionary mapping each current thread T's thread id to T's
current stack frame.
This function should be used for specialized purposes only.
_clear_type_cache() -> None
Clear the internal type lookup cache.
callstats() -> tuple of integers
Return a tuple of function call statistics, if CALL_PROFILE was defined
when Python was built.  Otherwise, return None.
When enabled, this function returns detailed, implementation-specific
details about the number of function calls executed. The return value is
a 11-tuple where the entries in the tuple are counts of:
0. all function calls
1. calls to PyFunction_Type objects
2. PyFunction calls that do not create an argument tuple
3. PyFunction calls that do not create an argument tuple
   and bypass PyEval_EvalCodeEx()
4. PyMethod calls
5. PyMethod calls on bound methods
6. PyType calls
7. PyCFunction calls
8. generator calls
9. All other calls
10. Number of stack pops performed by call_function()
zip(seq1 [, seq2 [...]]) -> [(seq1[0], seq2[0] ...), (...)]
Return a list of tuples, where each tuple contains the i-th element
from each of the argument sequences.  The returned list is truncated
in length to the length of the shortest argument sequence.
vars([object]) -> dictionary
Without arguments, equivalent to locals().
With an argument, equivalent to object.__dict__.
unichr(i) -> Unicode character
Return a Unicode string of one character with ordinal i; 0 <= i <= 0x10ffff.
sum(sequence[, start]) -> value
Return the sum of a sequence of numbers (NOT strings) plus the value
of parameter 'start' (which defaults to 0).  When the sequence is
empty, return start.
sorted(iterable, cmp=None, key=None, reverse=False) --> new sorted list
setattr(object, name, value)
Set a named attribute on an object; setattr(x, 'y', v) is equivalent to
``x.y = v''.
round(number[, ndigits]) -> floating point number
Round a number to a given precision in decimal digits (default 0 digits).
This always returns a floating point number.  Precision may be negative.
repr(object) -> string
Return the canonical string representation of the object.
For most object types, eval(repr(object)) == object.
reload(module) -> module
Reload the module.  The module must have been successfully imported before.
reduce(function, sequence[, initial]) -> value
Apply a function of two arguments cumulatively to the items of a sequence,
from left to right, so as to reduce the sequence to a single value.
For example, reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates
((((1+2)+3)+4)+5).  If initial is present, it is placed before the items
of the sequence in the calculation, and serves as a default when the
sequence is empty.
raw_input([prompt]) -> string
Read a string from standard input.  The trailing newline is stripped.
If the user hits EOF (Unix: Ctl-D, Windows: Ctl-Z+Return), raise EOFError.
On Unix, GNU readline is used if enabled.  The prompt string, if given,
is printed without a trailing newline before reading.
range(stop) -> list of integers
range(start, stop[, step]) -> list of integers
Return a list containing an arithmetic progression of integers.
range(i, j) returns [i, i+1, i+2, ..., j-1]; start (!) defaults to 0.
When step is given, it specifies the increment (or decrement).
For example, range(4) returns [0, 1, 2, 3].  The end point is omitted!
These are exactly the valid indices for a list of 4 elements.
print(value, ..., sep=' ', end='\n', file=sys.stdout)
Prints the values to a stream, or to sys.stdout by default.
Optional keyword arguments:
file: a file-like object (stream); defaults to the current sys.stdout.
sep:  string inserted between values, default a space.
end:  string appended after the last value, default a newline.
pow(x, y[, z]) -> number
With two arguments, equivalent to x**y.  With three arguments,
equivalent to (x**y) % z, but may be more efficient (e.g. for longs).
ord(c) -> integer
Return the integer ordinal of a one-character string.
open(name[, mode[, buffering]]) -> file object
Open a file using the file() type, returns a file object.  This is the
preferred way to open a file.  See file.__doc__ for further information.
oct(number) -> string
Return the octal representation of an integer or long integer.
next(iterator[, default])
Return the next item from the iterator. If default is given and the iterator
is exhausted, it is returned instead of raising StopIteration.
min(iterable[, key=func]) -> value
min(a, b, c, ...[, key=func]) -> value
With a single iterable argument, return its smallest item.
With two or more arguments, return the smallest argument.
max(iterable[, key=func]) -> value
max(a, b, c, ...[, key=func]) -> value
With a single iterable argument, return its largest item.
With two or more arguments, return the largest argument.
map(function, sequence[, sequence, ...]) -> list
Return a list of the results of applying the function to the items of
the argument sequence(s).  If more than one sequence is given, the
function is called with an argument list consisting of the corresponding
item of each sequence, substituting None for missing values when not all
sequences have the same length.  If the function is None, return a list of
the items of the sequence (or a list of tuples if more than one sequence).
locals() -> dictionary
Update and return a dictionary containing the current scope's local variables.
len(object) -> integer
Return the number of items of a sequence or collection.
iter(collection) -> iterator
iter(callable, sentinel) -> iterator
Get an iterator from an object.  In the first form, the argument must
supply its own iterator, or be a sequence.
In the second form, the callable is called until it returns the sentinel.
issubclass(C, B) -> bool
Return whether class C is a subclass (i.e., a derived class) of class B.
When using a tuple as the second argument issubclass(X, (A, B, ...)),
is a shortcut for issubclass(X, A) or issubclass(X, B) or ... (etc.).
isinstance(object, class-or-type-or-tuple) -> bool
Return whether an object is an instance of a class or of a subclass thereof.
With a type as second argument, return whether that is the object's type.
The form using a tuple, isinstance(x, (A, B, ...)), is a shortcut for
isinstance(x, A) or isinstance(x, B) or ... (etc.).
intern(string) -> string
``Intern'' the given string.  This enters the string in the (global)
table of interned strings whose purpose is to speed up dictionary lookups.
Return the string itself or the previously interned string object with the
same value.
input([prompt]) -> value
Equivalent to eval(raw_input(prompt)).
id(object) -> integer
Return the identity of an object.  This is guaranteed to be unique among
simultaneously existing objects.  (Hint: it's the object's memory address.)
hex(number) -> string
Return the hexadecimal representation of an integer or long integer.
hash(object) -> integer
Return a hash value for the object.  Two objects with the same value have
the same hash value.  The reverse is not necessarily true, but likely.
hasattr(object, name) -> bool
Return whether the object has an attribute with the given name.
(This is done by calling getattr(object, name) and catching exceptions.)
globals() -> dictionary
Return the dictionary containing the current scope's global variables.
getattr(object, name[, default]) -> value
Get a named attribute from an object; getattr(x, 'y') is equivalent to x.y.
When a default argument is given, it is returned when the attribute doesn't
exist; without it, an exception is raised in that case.
format(value[, format_spec]) -> string
Returns value.__format__(format_spec)
format_spec defaults to ""
filter(function or None, sequence) -> list, tuple, or string
Return those items of sequence for which function(item) is true.  If
function is None, return the items that are true.  If sequence is a tuple
or string, return the same type, else return a list.
execfile(filename[, globals[, locals]])
Read and execute a Python script from a file.
The globals and locals are dictionaries, defaulting to the current
globals and locals.  If only globals is given, locals defaults to it.
eval(source[, globals[, locals]]) -> value
Evaluate the source in the context of globals and locals.
The source may be a string representing a Python expression
or a code object as returned by compile().
The globals must be a dictionary and locals can be any mapping,
defaulting to the current globals and locals.
If only globals is given, locals defaults to it.
divmod(x, y) -> (quotient, remainder)
Return the tuple (x//y, x%y).  Invariant: div*y + mod == x.
dir([object]) -> list of strings
If called without an argument, return the names in the current scope.
Else, return an alphabetized list of names comprising (some of) the attributes
of the given object, and of attributes reachable from it.
If the object supplies a method named __dir__, it will be used; otherwise
the default dir() logic is used and returns:
  for a module object: the module's attributes.
  for a class object:  its attributes, and recursively the attributes
    of its bases.
  for any other object: its attributes, its class's attributes, and
    recursively the attributes of its class's base classes.
delattr(object, name)
Delete a named attribute on an object; delattr(x, 'y') is equivalent to
``del x.y''.
compile(source, filename, mode[, flags[, dont_inherit]]) -> code object
Compile the source string (a Python module, statement or expression)
into a code object that can be executed by the exec statement or eval().
The filename will be used for run-time error messages.
The mode must be 'exec' to compile a module, 'single' to compile a
single (interactive) statement, or 'eval' to compile an expression.
The flags argument, if present, controls which future statements influence
the compilation of the code.
The dont_inherit argument, if non-zero, stops the compilation inheriting
the effects of any future statements in effect in the code calling
compile; if absent or zero these statements do influence the compilation,
in addition to any features explicitly specified.
coerce(x, y) -> (x1, y1)
Return a tuple consisting of the two numeric arguments converted to
a common type, using the same rules as used by arithmetic operations.
If coercion is not possible, raise TypeError.
cmp(x, y) -> integer
Return negative if x<y, zero if x==y, positive if x>y.
chr(i) -> character
Return a string of one character with ordinal i; 0 <= i < 256.
callable(object) -> bool
Return whether the object is callable (i.e., some kind of function).
Note that classes are callable, as are instances with a __call__() method.
bin(number) -> string
Return the binary representation of an integer or long integer.
apply(object[, args[, kwargs]]) -> value
Call a callable object with positional arguments taken from the tuple args,
and keyword arguments taken from the optional dictionary kwargs.
Note that classes are callable, as are instances with a __call__() method.
Deprecated since release 2.3. Instead, use the extended call syntax:
    function(*args, **keywords).
any(iterable) -> bool
Return True if bool(x) is True for any x in the iterable.
If the iterable is empty, return False.
all(iterable) -> bool
Return True if bool(x) is True for all values x in the iterable.
If the iterable is empty, return True.
abs(number) -> number
Return the absolute value of the argument.
__import__(name, globals={}, locals={}, fromlist=[], level=-1) -> module
Import a module. Because this function is meant for use by the Python
interpreter and not for general use it is better to use
importlib.import_module() to programmatically import a module.
The globals argument is only used to determine the context;
they are not modified.  The locals argument is unused.  The fromlist
should be a list of names to emulate ``from name import ...'', or an
empty list to emulate ``import name''.
When importing a module from a package, note that __import__('A.B', ...)
returns package A when fromlist is empty, but its submodule B when
fromlist is not empty.  Level is used to determine whether to perform 
absolute or relative imports.  -1 is the original strategy of attempting
both absolute and relative imports, 0 is absolute, a positive number
is the number of parent directories to search relative to the current module.
sys.float_info
A structseq holding information about the float type. It contains low level
information about the precision and internal representation. Please study
your system's :file:`float.h` for more information.
Python's standard exception class hierarchy.
Exceptions found here are defined both in the exceptions module and the
built-in namespace.  It is recommended that user-defined exceptions
inherit from Exception.  See the documentation for the exception
inheritance hierarchy.
lib/python2.7
Copyright (c) 2001-2016 Python Software Foundation.
All Rights Reserved.
Copyright (c) 2000 BeOpen.com.
All Rights Reserved.
Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.
Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved.
This module provides access to some objects used or maintained by the
interpreter and to functions that interact strongly with the interpreter.
Dynamic objects:
argv -- command line arguments; argv[0] is the script pathname if known
path -- module search path; path[0] is the script directory, else ''
modules -- dictionary of loaded modules
displayhook -- called to show results in an interactive session
excepthook -- called to handle any uncaught exception other than SystemExit
  To customize printing in an interactive session or to install a custom
  top-level exception handler, assign other functions to replace these.
exitfunc -- if sys.exitfunc exists, this routine is called when Python exits
  Assigning to sys.exitfunc is deprecated; use the atexit module instead.
stdin -- standard input file object; used by raw_input() and input()
stdout -- standard output file object; used by the print statement
stderr -- standard error object; used for error messages
  By assigning other file objects (or objects that behave like files)
  to these, it is possible to redirect all of the interpreter's I/O.
last_type -- type of last uncaught exception
last_value -- value of last uncaught exception
last_traceback -- traceback of last uncaught exception
  These three are only available in an interactive session after a
  traceback has been printed.
exc_type -- type of exception currently being handled
exc_value -- value of exception currently being handled
exc_traceback -- traceback of exception currently being handled
  The function exc_info() should be used instead of these three,
  because it is thread-safe.
Static objects:
float_info -- a dict with information about the float inplementation.
long_info -- a struct sequence with information about the long implementation.
maxint -- the largest supported integer (the smallest is -maxint-1)
maxsize -- the largest supported length of containers.
maxunicode -- the largest supported character
builtin_module_names -- tuple of module names built into this interpreter
version -- the version of this interpreter as a string
version_info -- version information as a named tuple
hexversion -- version information encoded as a single integer
copyright -- copyright notice pertaining to this interpreter
platform -- platform identifier
executable -- absolute path of the executable binary of the Python interpreter
prefix -- prefix used to find the Python library
exec_prefix -- prefix used to find the machine-specific Python library
float_repr_style -- string indicating the style of repr() output for floats
__stdin__ -- the original stdin; don't touch!
__stdout__ -- the original stdout; don't touch!
__stderr__ -- the original stderr; don't touch!
__displayhook__ -- the original displayhook; don't touch!
__excepthook__ -- the original excepthook; don't touch!
Functions:
displayhook() -- print an object to the screen, and save it in __builtin__._
excepthook() -- print an exception and its traceback to sys.stderr
exc_info() -- return thread-safe information about the current exception
exc_clear() -- clear the exception state for the current thread
exit() -- exit the interpreter by raising SystemExit
getdlopenflags() -- returns flags to be used for dlopen() calls
getprofile() -- get the global profiling function
getrefcount() -- return the reference count for an object (plus one :-)
getrecursionlimit() -- return the max recursion depth for the interpreter
getsizeof() -- return the size of an object in bytes
gettrace() -- get the global debug tracing function
setcheckinterval() -- control how often the interpreter checks for events
setdlopenflags() -- set the flags to be used for dlopen() calls
setprofile() -- set the global profiling function
setrecursionlimit() -- set the max recursion depth for the interpreter
settrace() -- set the global debug tracing function
Python C API version mismatch for module %.100s: This Python has API version %d, module %.100s has version %d.
Built-in functions, exceptions, and other objects.
Noteworthy: None is the `nil' object; Ellipsis represents `...' in slices.
The error setting of the decoder or encoder.
Subclasses should override.
Line endings translated so far.
Only line endings translated during reading are considered.
Subclasses should override.
Encoding of the text stream.
Subclasses should override.
Write string to stream.
Returns the number of characters written (which is always equal to
the length of the string).
Read until newline or EOF.
Returns an empty string if EOF is hit immediately.
Read at most n characters from stream.
Read from underlying buffer until we have n characters or we hit EOF.
If n is negative or omitted, read until EOF.
Separate the underlying buffer from the TextIOBase and return it.
After the underlying buffer has been detached, the TextIO is in an
unusable state.
Write the given buffer to the IO stream.
Returns the number of bytes written, which is always len(b).
Raises BlockingIOError if the buffer is full and the
underlying raw stream cannot accept more data at the moment.
Read and return up to n bytes, with at most one read() call
to the underlying raw stream. A short result does not imply
that EOF is imminent.
Returns an empty bytes object on EOF.
Read and return up to n bytes.
If the argument is omitted, None, or negative, reads and
returns all data until EOF.
If the argument is positive, and the underlying raw stream is
not 'interactive', multiple raw reads may be issued to satisfy
the byte count (unless EOF is reached first).  But for
interactive raw streams (as well as sockets and pipes), at most
one raw read will be issued, and a short result does not imply
that EOF is imminent.
Returns an empty bytes object on EOF.
Returns None if the underlying raw stream was open in non-blocking
mode and no data is available at the moment.
Disconnect this buffer from its underlying raw stream and return it.
After the raw stream has been detached, the buffer is in an unusable
state.
Read until EOF, using multiple read() call.
Base class for text I/O.
This class provides a character and line based interface to stream
I/O. There is no readinto method because Python's character strings
are immutable. There is no public constructor.
Base class for buffered IO objects.
The main difference with RawIOBase is that the read() method
supports omitting the size argument, and does not have a default
implementation that defers to readinto().
In addition, read(), readinto() and write() may raise
BlockingIOError if the underlying raw stream is in non-blocking
mode and not ready; unlike their raw counterparts, they will never
return None.
A typical implementation should not inherit from a RawIOBase
implementation, but wrap one.
Base class for raw binary I/O.
Return a list of lines from the stream.
hint can be specified to control the number of lines read: no more
lines will be read if the total size (in bytes/characters) of all
lines so far exceeds hint.
Read and return a line from the stream.
If limit is specified, at most limit bytes will be read.
The line terminator is always b'\n' for binary files; for text
files, the newlines argument to open can be used to select the line
terminator(s) recognized.
Return whether this is an 'interactive' stream.
Return False if it can't be determined.
Returns underlying file descriptor if one exists.
An IOError is raised if the IO object does not use a file descriptor.
Return whether object was opened for writing.
If False, read() will raise IOError.
Return whether object was opened for reading.
If False, read() will raise IOError.
Return whether object supports random access.
If False, seek(), tell() and truncate() will raise IOError.
This method may need to do a test seek().
Flush and close the IO object.
This method has no effect if the file is already closed.
Flush write buffers, if applicable.
This is not implemented for read-only and non-blocking streams.
Truncate file to size bytes.
File pointer is left unchanged.  Size defaults to the current IO
position as reported by tell().  Returns the new size.
Return current stream position.
Change stream position.
Change the stream position to the given byte offset. The offset is
interpreted relative to the position indicated by whence.  Values
for whence are:
* 0 -- start of stream (the default); offset should be zero or positive
* 1 -- current stream position; offset may be negative
* 2 -- end of stream; offset is usually negative
Return the new absolute position.
Character and line based layer over a BufferedIOBase object, buffer.
encoding gives the name of the encoding that the stream will be
decoded or encoded with. It defaults to locale.getpreferredencoding.
errors determines the strictness of encoding and decoding (see the
codecs.register) and defaults to "strict".
newline controls how line endings are handled. It can be None, '',
'\n', '\r', and '\r\n'.  It works as follows:
* On input, if newline is None, universal newlines mode is
  enabled. Lines in the input can end in '\n', '\r', or '\r\n', and
  these are translated into '\n' before being returned to the
  caller. If it is '', universal newline mode is enabled, but line
  endings are returned to the caller untranslated. If it has any of
  the other legal values, input lines are only terminated by the given
  string, and the line ending is returned to the caller untranslated.
* On output, if newline is None, any '\n' characters written are
  translated to the system default line separator, os.linesep. If
  newline is '', no translation takes place. If newline is any of the
  other legal values, any '\n' characters written are translated to
  the given string.
If line_buffering is True, a call to flush is implied when a call to
write contains a newline character.
Codec used when reading a file in universal newlines mode.  It wraps
another incremental decoder, translating \r\n and \r into \n.  It also
records the types of newlines encountered.  When used with
translate=False, it ensures that the newline sequence is returned in
one piece. When used with decoder=None, it expects unicode strings as
decode input and translates newlines without first invoking an external
decoder.
The abstract base class for all I/O classes, acting on streams of
bytes. There is no public constructor.
This class provides dummy implementations for many methods that
derived classes can override selectively; the default implementations
represent a file that cannot be read, written or seeked.
Even though IOBase does not declare read, readinto, or write because
their signatures will vary, implementations and clients should
consider those methods part of the interface. Also, implementations
may raise a IOError when operations they do not support are called.
The basic type used for binary data read from or written to a file is
the bytes type. Method arguments may also be bytearray or memoryview
of arrays of bytes. In some cases, such as readinto, a writable
object such as bytearray is required. Text I/O classes work with
unicode data.
Note that calling any method (except additional calls to close(),
which are ignored) on a closed stream should raise a ValueError.
IOBase (and its subclasses) support the iterator protocol, meaning
that an IOBase object can be iterated over yielding the lines in a
stream.
IOBase also supports the :keyword:`with` statement. In this example,
fp is closed after the suite of the with statement is complete:
with open('spam.txt', 'r') as fp:
    fp.write('Spam and eggs!')
A buffered reader and writer object together.
A buffered reader object and buffered writer object put together to
form a sequential IO object that can read and write. This is typically
used with a socket or two-way pipe.
reader and writer are RawIOBase objects that are readable and
writeable respectively. If the buffer_size is omitted it defaults to
DEFAULT_BUFFER_SIZE.
A buffered interface to random access streams.
The constructor creates a reader and writer for a seekable stream,
raw, given in the first argument. If the buffer_size is omitted it
defaults to DEFAULT_BUFFER_SIZE. max_buffer_size isn't used anymore.
A buffer for a writeable sequential RawIO object.
The constructor creates a BufferedWriter for the given writeable raw
stream. If the buffer_size is not given, it defaults to
DEFAULT_BUFFER_SIZE. max_buffer_size isn't used anymore.
Create a new buffered reader using the given readable raw IO object.
Hello world...N(
hello.pys
Low-level inferface to warnings functionality.
Issue a warning, or maybe ignore it or raise an exception.
default_int_handler(...)
The default handler for SIGINT installed by Python.
It raises KeyboardInterrupt.
pause()
Wait until a signal arrives.
siginterrupt(sig, flag) -> None
change system call restart behaviour: if flag is False, system calls
will be restarted when interrupted by signal sig, else system calls
will be interrupted.
set_wakeup_fd(fd) -> fd
Sets the fd to be written to (with '\0') when a signal
comes in.  A library can use this to wakeup select or poll.
The previous fd is returned.
The fd must be non-blocking.
getsignal(sig) -> action
Return the current action for the given signal.  The return value can be:
SIG_IGN -- if the signal is being ignored
SIG_DFL -- if the default action for the signal is in effect
None -- if an unknown handler is in effect
anything else -- the callable Python object used as a handler
signal(sig, action) -> action
Set the action for the given signal.  The action can be SIG_DFL,
SIG_IGN, or a callable Python object.  The previous action is
returned.  See getsignal() for possible return values.
*** IMPORTANT NOTICE ***
A signal handler function is called with two arguments:
the first is the signal number, the second is the interrupted stack frame.
getitimer(which)
Returns current value of given itimer.
setitimer(which, seconds[, interval])
Sets given itimer (one of ITIMER_REAL, ITIMER_VIRTUAL
or ITIMER_PROF) to fire after value seconds and after
that every interval seconds.
The itimer can be cleared by setting seconds to zero.
Returns old values as a tuple: (delay, interval).
alarm(seconds)
Arrange for SIGALRM to arrive after the given number of seconds.
is_package(fullname) -> bool.
Return True if the module specified by fullname is a package.
Raise ZipImportError if the module couldn't be found.
get_filename(fullname) -> filename string.
Return the filename for the specified module.
get_source(fullname) -> source string.
Return the source code for the specified module. Raise ZipImportError
if the module couldn't be found, return None if the archive does
contain the module, but has no source for it.
get_code(fullname) -> code object.
Return the code object for the specified module. Raise ZipImportError
if the module couldn't be found.
get_data(pathname) -> string with file data.
Return the data associated with 'pathname'. Raise IOError if
the file wasn't found.
load_module(fullname) -> module.
Load the module specified by 'fullname'. 'fullname' must be the
fully qualified (dotted) module name. It returns the imported
module, or raises ZipImportError if it wasn't found.
find_module(fullname, path=None) -> self or None.
Search for a module specified by 'fullname'. 'fullname' must be the
fully qualified (dotted) module name. It returns the zipimporter
instance itself if the module was found, or None if it wasn't.
The optional 'path' argument is ignored -- it's there for compatibility
with the importer protocol.
zipimporter(archivepath) -> zipimporter object
Create a new zipimporter instance. 'archivepath' must be a path to
a zipfile, or to a specific path inside a zipfile. For example, it can be
'/tmp/myimport.zip', or '/tmp/myimport.zip/mydirectory', if mydirectory is a
valid directory inside the archive.
'ZipImportError is raised if 'archivepath' doesn't point to a valid Zip
archive.
The 'archive' attribute of zipimporter objects contains the name of the
zipfile targeted.
_warnings provides basic warning filtering support.
It is a helper module to speed up interpreter start-up.
This module provides mechanisms to use signal handlers in Python.
Functions:
alarm() -- cause SIGALRM after a specified time [Unix only]
setitimer() -- cause a signal (described below) after a specified
               float time and the timer may restart then [Unix only]
getitimer() -- get current value of timer [Unix only]
signal() -- set the action for a given signal
getsignal() -- get the signal action for a given signal
pause() -- wait until a signal arrives [Unix only]
default_int_handler() -- default SIGINT handler
signal constants:
SIG_DFL -- used to refer to the system default handler
SIG_IGN -- used to ignore the signal
NSIG -- number of defined signals
SIGINT, SIGTERM, etc. -- signal numbers
itimer constants:
ITIMER_REAL -- decrements in real time, and delivers SIGALRM upon
               expiration
ITIMER_VIRTUAL -- decrements only when the process is executing,
               and delivers SIGVTALRM upon expiration
ITIMER_PROF -- decrements both when the process is executing and
               when the system is executing on behalf of the process.
               Coupled with ITIMER_VIRTUAL, this timer is usually
               used to profile the time spent by the application
               in user and kernel space. SIGPROF is delivered upon
               expiration.
*** IMPORTANT NOTICE ***
A signal handler function is called with two arguments:
the first is the signal number, the second is the interrupted stack frame.
zipimport provides support for importing Python modules from Zip archives.
This module exports three objects:
- zipimporter: a class; its constructor takes a path to a Zip archive.
- ZipImportError: exception raised by zipimporter objects. It's a
  subclass of ImportError, so it can be caught as ImportError, too.
- _zip_directory_cache: a dict, mapping archive paths to zip directory
  info dicts, as used in zipimporter._files.
It is usually not needed to use the zipimport module explicitly; it is
used by the builtin import mechanism for sys.path items that are paths
to Zip archives.
/__init__.pyc
/__init__.pyo
/__init__.py
.pyc
.pyo
ascii
statvfs_result: Result from statvfs or fstatvfs.
This object may be accessed either as a tuple of
  (bsize, frsize, blocks, bfree, bavail, files, ffree, favail, flag, namemax),
or via the attributes f_bsize, f_frsize, f_blocks, f_bfree, and so on.
See os.statvfs for more information.
stat_result: Result from stat or lstat.
This object may be accessed either as a tuple of
  (mode, ino, dev, nlink, uid, gid, size, atime, mtime, ctime)
or via the attributes st_mode, st_ino, st_dev, st_nlink, st_uid, and so on.
Posix/windows: If your platform supports st_blksize, st_blocks, st_rdev,
or st_flags, they are available as attributes only.
See os.stat for more information.
urandom(n) -> str
Return n random bytes suitable for cryptographic use.
getresgid() -> (rgid, egid, sgid)
Get tuple of the current process's real, effective, and saved group ids.
getresuid() -> (ruid, euid, suid)
Get tuple of the current process's real, effective, and saved user ids.
setresgid(rgid, egid, sgid)
Set the current process's real, effective, and saved group ids.
setresuid(ruid, euid, suid)
Set the current process's real, effective, and saved user ids.
getloadavg() -> (float, float, float)
Return the number of processes in the system run queue averaged over
the last 1, 5, and 15 minutes or raises OSError if the load average
was unobtainable
abort() -> does not return!
Abort the interpreter immediately.  This 'dumps core' or otherwise fails
in the hardest way possible on the hosting operating system.
pathconf(path, name) -> integer
Return the configuration limit name for the file or directory path.
If there is no limit, return -1.
fpathconf(fd, name) -> integer
Return the configuration limit name for the file descriptor fd.
If there is no limit, return -1.
sysconf(name) -> integer
Return an integer-valued system configuration variable.
confstr(name) -> string
Return a string-valued system configuration variable.
tmpnam() -> string
Return a unique name for a temporary file.
tempnam([dir[, prefix]]) -> string
Return a unique name for a temporary file.
The directory and a prefix may be specified as strings; they may be omitted
or None if not needed.
tmpfile() -> file object
Create a temporary file with no directory entries.
statvfs(path) -> statvfs result
Perform a statvfs system call on the given path.
fstatvfs(fd) -> statvfs result
Perform an fstatvfs system call on the given fd.
WSTOPSIG(status) -> integer
Return the signal that stopped the process that provided
the 'status' value.
WTERMSIG(status) -> integer
Return the signal that terminated the process that provided the 'status'
value.
WEXITSTATUS(status) -> integer
Return the process return code from 'status'.
WIFEXITED(status) -> bool
Return true if the process returning 'status' exited using the exit()
system call.
WIFSIGNALED(status) -> bool
Return True if the process returning 'status' was terminated by a signal.
WIFSTOPPED(status) -> bool
Return True if the process returning 'status' was stopped.
WIFCONTINUED(status) -> bool
Return True if the process returning 'status' was continued from a
job control stop.
WCOREDUMP(status) -> bool
Return True if the process returning 'status' was dumped to a core file.
fdatasync(fildes)
force write of file with filedescriptor to disk.
 does not force update of metadata.
fsync(fildes)
force write of file with filedescriptor to disk.
fchdir(fildes)
Change to the directory of the given file descriptor.  fildes must be
opened on a directory, not a file.
strerror(code) -> string
Translate an error code to a message string.
unsetenv(key)
Delete an environment variable.
putenv(key, value)
Change or add an environment variable.
ftruncate(fd, length)
Truncate a file to a specified length.
makedev(major, minor) -> device number
Composes a raw device number from the major and minor device numbers.
minor(device) -> minor number
Extracts a device minor number from a raw device number.
major(device) -> major number
Extracts a device major number from a raw device number.
mknod(filename [, mode=0600, device])
Create a filesystem node (file, device special file or named pipe)
named filename. mode specifies both the permissions to use and the
type of node to be created, being combined (bitwise OR) with one of
S_IFREG, S_IFCHR, S_IFBLK, and S_IFIFO. For S_IFCHR and S_IFBLK,
device defines the newly created device special file (probably using
os.makedev()), otherwise it is ignored.
mkfifo(filename [, mode=0666])
Create a FIFO (a POSIX named pipe).
pipe() -> (read_end, write_end)
Create a pipe.
isatty(fd) -> bool
Return True if the file descriptor 'fd' is an open file descriptor
connected to the slave end of a terminal.
fdopen(fd [, mode='r' [, bufsize]]) -> file_object
Return an open file object connected to a file descriptor.
fstat(fd) -> stat result
Like stat(), but for an open file descriptor.
write(fd, string) -> byteswritten
Write a string to a file descriptor.
read(fd, buffersize) -> string
Read a file descriptor.
lseek(fd, pos, how) -> newpos
Set the current position of a file descriptor.
Return the new cursor position in bytes, starting from the beginning.
dup2(old_fd, new_fd)
Duplicate file descriptor.
dup(fd) -> fd2
Return a duplicate of a file descriptor.
closerange(fd_low, fd_high)
Closes all file descriptors in [fd_low, fd_high), ignoring errors.
close(fd)
Close a file descriptor (for low level IO).
open(filename, flag [, mode=0777]) -> fd
Open a file (for low level IO).
tcsetpgrp(fd, pgid)
Set the process group associated with the terminal given by a fd.
tcgetpgrp(fd) -> pgid
Return the process group associated with the terminal given by a fd.
setpgid(pid, pgrp)
Call the system call setpgid().
setsid()
Call the system call setsid().
getsid(pid) -> sid
Call the system call getsid().
waitpid(pid, options) -> (pid, status)
Wait for completion of a given child process.
wait4(pid, options) -> (pid, status, rusage)
Wait for completion of a given child process.
wait3(options) -> (pid, status, rusage)
Wait for completion of a child process.
wait() -> (pid, status)
Wait for completion of a child process.
setpgrp()
Make this process the process group leader.
getpgid(pid) -> pgid
Call the system call getpgid().
initgroups(username, gid) -> None
Call the system initgroups() to initialize the group access list with all of
the groups of which the specified username is a member, plus the specified
group id.
setgroups(list)
Set the groups of the current process to list.
setgid(gid)
Set the current process's group id.
setregid(rgid, egid)
Set the current process's real and effective group ids.
setreuid(ruid, euid)
Set the current process's real and effective user ids.
setegid(gid)
Set the current process's effective group id.
seteuid(uid)
Set the current process's effective user id.
setuid(uid)
Set the current process's user id.
popen(command [, mode='r' [, bufsize]]) -> pipe
Open a pipe to/from a command returning a file object.
killpg(pgid, sig)
Kill a process group with a signal.
kill(pid, sig)
Kill a process with a signal.
getlogin() -> string
Return the actual login name.
getuid() -> uid
Return the current process's user id.
getppid() -> ppid
Return the parent's process id.
getpgrp() -> pgrp
Return the current process group id.
getpid() -> pid
Return the current process id
getgroups() -> list of group IDs
Return list of supplemental group IDs for the process.
getgid() -> gid
Return the current process's group id.
geteuid() -> euid
Return the current process's effective user id.
getegid() -> egid
Return the current process's effective group id.
forkpty() -> (pid, master_fd)
Fork a new process with a new pseudo-terminal as controlling tty.
Like fork(), return 0 as pid to child process, and PID of child to parent.
To both, return fd of newly opened pseudo-terminal.
openpty() -> (master_fd, slave_fd)
Open a pseudo-terminal, returning open fd's for both master and slave end.
fork() -> pid
Fork a child process.
Return 0 to child process and PID of child to parent process.
execve(path, args, env)
Execute a path with arguments and environment, replacing current process.
    path: path of executable file
    args: tuple or list of arguments
    env: dictionary of strings mapping to strings
execv(path, args)
Execute an executable path with arguments, replacing current process.
    path: path of executable file
    args: tuple or list of strings
_exit(status)
Exit to the system with specified status, without normal exit processing.
times() -> (utime, stime, cutime, cstime, elapsed_time)
Return a tuple of floating point numbers indicating process times.
utime(path, (atime, mtime))
utime(path, None)
Set the access and modified time of the file to the given values.  If the
second form is used, set the access and modified times to the current time.
remove(path)
Remove a file (same as unlink(path)).
unlink(path)
Remove a file (same as remove(path)).
uname() -> (sysname, nodename, release, version, machine)
Return a tuple identifying the current operating system.
umask(new_mask) -> old_mask
Set the current numeric umask and return the previous umask.
system(command) -> exit_status
Execute the command (a string) in a subshell.
symlink(src, dst)
Create a symbolic link pointing to src named dst.
stat_float_times([newval]) -> oldval
Determine whether os.[lf]stat represents time stamps as float objects.
If newval is True, future calls to stat() return floats, if it is False,
future calls return ints. 
If newval is omitted, return the current setting.
stat(path) -> stat result
Perform a stat system call on the given path.
rmdir(path)
Remove a directory.
rename(old, new)
Rename a file or directory.
readlink(path) -> path
Return a string representing the path to which the symbolic link points.
nice(inc) -> new_priority
Decrease the priority of process by inc and return the new priority.
mkdir(path [, mode=0777])
Create a directory.
lstat(path) -> stat result
Like stat(path), but do not follow symbolic links.
listdir(path) -> list_of_strings
Return a list containing the names of the entries in the directory.
    path: path of directory to list
The list is in arbitrary order.  It does not include the special
entries '.' and '..' even if they are present in the directory.
link(src, dst)
Create a hard link to a file.
getcwdu() -> path
Return a unicode string representing the current working directory.
getcwd() -> path
Return a string representing the current working directory.
ctermid() -> string
Return the name of the controlling terminal for this process.
chroot(path)
Change root directory to path.
lchown(path, uid, gid)
Change the owner and group id of path to the numeric uid and gid.
This function will not follow symbolic links.
fchown(fd, uid, gid)
Change the owner and group id of the file given by file descriptor
fd to the numeric uid and gid.
chown(path, uid, gid)
Change the owner and group id of path to the numeric uid and gid.
fchmod(fd, mode)
Change the access permissions of the file given by file
descriptor fd.
chmod(path, mode)
Change the access permissions of a file.
chdir(path)
Change the current working directory to the specified path.
ttyname(fd) -> string
Return the name of the terminal device connected to 'fd'.
access(path, mode) -> True if granted, False otherwise
Use the real uid/gid to test for access to a path.  Note that most
operations will use the effective uid/gid, therefore this routine can
be used in a suid/sgid environment to test if the invoking user has the
specified access to the path.  The mode argument can be F_OK to test
existence, or the inclusive-OR of R_OK, W_OK, and X_OK.
This module provides access to operating system functionality that is
standardized by the C Standard and the POSIX standard (a thinly
disguised Unix interface).  Refer to the library manual and
corresponding Unix manual entries for more information on calls.
This module makes available standard errno system symbols.
The value of each symbol is the corresponding integer value,
e.g., on most systems, errno.ENOENT equals the integer 2.
The dictionary errno.errorcode maps numeric codes to symbol names,
e.g., errno.errorcode[2] could be the string 'ENOENT'.
Symbols that are not relevant to the underlying system are not defined.
To map error codes to error messages, use the function os.strerror(),
e.g. os.strerror(2) could return 'No such file or directory'.
lookup_error(errors) -> handler
Return the error handler for the specified error handling name
or raise a LookupError, if no handler exists under this name.
register_error(errors, handler)
Register the specified error handler under the name
errors. handler must be a callable object, that
will be called with an exception instance containing
information about the location of the encoding/decoding
error and must return a (replacement, new position) tuple.
decode(obj, [encoding[,errors]]) -> object
Decodes obj using the codec registered for encoding. encoding defaults
to the default encoding. errors may be given to set a different error
handling scheme. Default is 'strict' meaning that encoding errors raise
a ValueError. Other possible values are 'ignore' and 'replace'
as well as any other name registered with codecs.register_error that is
able to handle ValueErrors.
encode(obj, [encoding[,errors]]) -> object
Encodes obj using the codec registered for encoding. encoding defaults
to the default encoding. errors may be given to set a different error
handling scheme. Default is 'strict' meaning that encoding errors raise
a ValueError. Other possible values are 'ignore', 'replace' and
'xmlcharrefreplace' as well as any other name registered with
codecs.register_error that can handle ValueErrors.
lookup(encoding) -> CodecInfo
Looks up a codec tuple in the Python codec registry and returns
a CodecInfo object.
register(search_function)
Register a codec search function. Search functions are expected to take
one argument, the encoding name in all lower case letters, and return
a tuple of functions (encoder, decoder, stream_reader, stream_writer)
(or a CodecInfo object).
truncate([size]) -> int.  Truncate the file to at most size bytes.
Size defaults to the current file position, as returned by tell().
The current file position is unchanged.  Returns the new size.
seek(pos[, whence]) -> int.  Change stream position.
Seek to byte offset pos relative to position indicated by whence:
     0  Start of stream (the default).  pos should be >= 0;
     1  Current position - pos may be negative;
     2  End of stream - pos usually negative.
Returns the new absolute position.
getvalue() -> bytes.
Retrieve the entire contents of the BytesIO object.
read([size]) -> read at most size bytes, returned as a string.
If the size argument is negative, read until EOF is reached.
Return an empty string at EOF.
readlines([size]) -> list of strings, each a line from the file.
Call readline() repeatedly and return a list of the lines so read.
The optional size argument, if given, is an approximate bound on the
total number of bytes in the lines returned.
readline([size]) -> next line from the file, as a string.
Retain newline.  A non-negative size argument limits the maximum
number of bytes to return (an incomplete line may be returned then).
Return an empty string at EOF.
readinto(b) -> int.  Read up to len(b) bytes into b.
Returns number of bytes read (0 for EOF), or None if the object
is set not to block and has no data to read.
read1(size) -> read at most size bytes, returned as a string.
If the size argument is negative or omitted, read until EOF is reached.
Return an empty string at EOF.
writelines(sequence_of_strings) -> None.  Write strings to the file.
Note that newlines are not added.  The sequence can be any iterable
object producing strings. This is equivalent to calling write() for
each string.
write(bytes) -> int.  Write bytes to file.
Return the number of bytes written.
tell() -> current file position, an integer
isatty() -> False.
Always returns False since BytesIO objects are not connected
to a tty-like device.
flush() -> None.  Does nothing.
close() -> None.  Disable all I/O operations.
writable() -> bool. Returns True if the IO object can be written.
seekable() -> bool. Returns True if the IO object can be seeked.
readable() -> bool. Returns True if the IO object can be read.
BytesIO([buffer]) -> object
Create a buffered I/O implementation using an in-memory bytes
buffer, ready for reading and writing.
proxy(object[, callback]) -- create a proxy object that weakly
references 'object'.  'callback', if given, is called with a
reference to the proxy when 'object' is about to be finalized.
getweakrefs(object) -- return a list of all weak reference objects
that point to 'object'.
getweakrefcount(object) -- return the number of weak references
to 'object'.
Private method returning an estimate of len(list(it)).
Data container common to multiple tee objects.
bind_textdomain_codeset(domain, codeset) -> string
Bind the C library's domain to codeset.
bindtextdomain(domain, dir) -> string
Bind the C library's domain to dir.
textdomain(domain) -> string
Set the C library's textdmain to domain, returning the new domain.
dcgettext(domain, msg, category) -> string
Return translation of msg in domain and category.
dgettext(domain, msg) -> string
Return translation of msg in domain.
gettext(msg) -> string
Return translation of msg.
nl_langinfo(key) -> string
Return the value for the locale information associated with key.
string -> string. Returns a string that behaves for cmp locale-aware.
string,string -> int. Compares two strings according to the locale.
() -> dict. Returns numeric and monetary locale-specific parameters.
(integer,string=None) -> string. Activates/queries locale processing.
expand(template) -> str.
    Return the string obtained by doing backslash substitution
    on the string template, as done by the sub() method.
groupdict([default=None]) -> dict.
    Return a dictionary containing all the named subgroups of the match,
    keyed by the subgroup name. The default argument is used for groups
    that did not participate in the match
groups([default=None]) -> tuple.
    Return a tuple containing all the subgroups of the match, from 1.
    The default argument is used for groups
    that did not participate in the match
span([group]) -> tuple.
    For MatchObject m, return the 2-tuple (m.start(group), m.end(group)).
end([group=0]) -> int.
    Return index of the end of the substring matched by group.
start([group=0]) -> int.
    Return index of the start of the substring matched by group.
group([group1, ...]) -> str or tuple.
    Return subgroup(s) of the match by indices or names.
    For 0 returns the entire match.
finditer(string[, pos[, endpos]]) --> iterator.
    Return an iterator over all non-overlapping matches for the 
    RE pattern in string. For each match, the iterator returns a
    match object.
findall(string[, pos[, endpos]]) --> list.
   Return a list of all non-overlapping matches of pattern in string.
split(string[, maxsplit = 0])  --> list.
    Split string by the occurrences of pattern.
subn(repl, string[, count = 0]) --> (newstring, number of subs)
    Return the tuple (new_string, number_of_subs_made) found by replacing
    the leftmost non-overlapping occurrences of pattern with the
    replacement repl.
sub(repl, string[, count = 0]) --> newstring
    Return the string obtained by replacing the leftmost non-overlapping
    occurrences of pattern in string by the replacement repl.
search(string[, pos[, endpos]]) --> match object or None.
    Scan through string looking for a match, and return a corresponding
    match object instance. Return None if no position in the string matches.
match(string[, pos[, endpos]]) --> match object or None.
    Matches zero or more characters at the beginning of the string
The result of re.match() and re.search().
Match objects always have a boolean value of True.
Compiled regular expression objects
Support for POSIX locales.
 SRE 2.2.2 Copyright (c) 1997-2002 by Secret Labs AB 
loads(string)
Convert the string to a value. If no valid value is found, raise
EOFError, ValueError or TypeError. Extra characters in the string are
ignored.
dumps(value[, version])
Return the string that would be written to a file by dump(value, file).
The value must be a supported type. Raise a ValueError exception if
value has (or contains an object that has) an unsupported type.
New in version 2.4: The version argument indicates the data format that
dumps should use.
load(file)
Read one value from the open file and return it. If no valid value is
read (e.g. because the data has a different Python version
incompatible marshal format), raise EOFError, ValueError or TypeError.
The file must be an open file object opened in binary mode ('rb' or
'r+b').
Note: If an object containing an unsupported type was marshalled with
dump(), load() will substitute None for the unmarshallable type.
dump(value, file[, version])
Write the value on the open file. The value must be a supported type.
The file must be an open file object such as sys.stdout or returned by
open() or os.popen(). It must be opened in binary mode ('wb' or 'w+b').
If the value has (or contains an object that has) an unsupported type, a
ValueError exception is raised 
 but garbage data will also be written
to the file. The object will not be properly read back by load()
New in version 2.4: The version argument indicates the data format that
dump should use.
S.__sizeof__() -> size of S in memory, in bytes
S.unpack_from(buffer[, offset]) -> (v1, v2, ...)
Return tuple containing values unpacked according to this Struct's format.
Unlike unpack, unpack_from can unpack values from any object supporting
the buffer API, not just str. Requires len(buffer[offset:]) >= self.size.
See struct.__doc__ for more on format strings.
S.unpack(str) -> (v1, v2, ...)
Return tuple containing values unpacked according to this Struct's format.
Requires len(str) == self.size. See struct.__doc__ for more on format
strings.
S.pack_into(buffer, offset, v1, v2, ...)
Pack the values v1, v2, ... according to this Struct's format, write 
the packed bytes into the writable buffer buf starting at offset.  Note
that the offset is not an optional argument.  See struct.__doc__ for 
more on format strings.
S.pack(v1, v2, ...) -> string
Return a string containing values v1, v2, ... packed according to this
Struct's format. See struct.__doc__ for more on format strings.
Compiled struct object
Unpack the buffer, containing packed C structure data, according to
fmt, starting at offset. Requires len(buffer[offset:]) >= calcsize(fmt).
Unpack the string containing packed C structure data, according to fmt.
Requires len(string) == calcsize(fmt).
Pack the values v1, v2, ... according to fmt.
Write the packed bytes into the writable buffer buf starting at offset.
Return string containing values v1, v2, ... packed according to fmt.
Return size of C struct described by format string fmt.
Clear the internal cache.
release_lock() -> None
Release the interpreter's import lock.
On platforms without threads, this function does nothing.
acquire_lock() -> None
Acquires the interpreter's import lock for the current thread.
This lock should be used by import hooks to ensure thread-safety
when importing modules.
On platforms without threads, this function does nothing.
lock_held() -> boolean
Return True if the import lock is currently held, else False.
On platforms without threads, return False.
new_module(name) -> module
Create a new module.  Do not enter it in sys.modules.
The module name must include the full package name, if any.
load_module(name, file, filename, (suffix, mode, type)) -> module
Load a module, given information returned by find_module().
The module name must include the full package name, if any.
get_suffixes() -> [(suffix, mode, type), ...]
Return a list of (suffix, mode, type) tuples describing the files
that find_module() looks for.
get_magic() -> string
Return the magic number for .pyc or .pyo files.
find_module(name, [path]) -> (file, filename, (suffix, mode, type))
Search for a module.  If path is omitted or None, search for a
built-in, frozen or special module and continue search in sys.path.
The module name cannot contain '.'; to search for a submodule of a
package, pass the submodule name and the package's __path__.
reload(module) -> module
Reload the module.  The module must have been successfully imported before.
This module contains functions that can read and write Python values in
a binary format. The format is specific to Python, but independent of
machine architecture issues.
Not all Python object types are supported; in general, only objects
whose value is independent from a particular invocation of Python can be
written and read by this module. The following types are supported:
None, integers, long integers, floating point numbers, strings, Unicode
objects, tuples, lists, sets, dictionaries, and code objects, where it
should be understood that tuples, lists and dictionaries are only
supported as long as the values contained therein are themselves
supported; and recursive lists and dictionaries should not be written
(they will cause infinite loops).
Variables:
version -- indicates the format that the module uses. Version 0 is the
    historical format, version 1 (added in Python 2.4) shares interned
    strings and version 2 (added in Python 2.5) uses a binary format for
    floating point numbers. (New in version 2.4)
Functions:
dump() -- write value to a file
load() -- read value from a file
dumps() -- write value to a string
loads() -- read value from a string
Functions to convert between Python values and C structs represented
as Python strings. It uses format strings (explained below) as compact
descriptions of the lay-out of the C structs and the intended conversion
to/from Python values.
The optional first format char indicates byte order, size and alignment:
  @: native order, size & alignment (default)
  =: native order, std. size & alignment
  <: little-endian, std. size & alignment
  >: big-endian, std. size & alignment
  !: same as >
The remaining chars indicate types of args and must match exactly;
these can be preceded by a decimal repeat count:
  x: pad byte (no data); c:char; b:signed byte; B:unsigned byte;
  ?: _Bool (requires C99; if not available, char is used instead)
  h:short; H:unsigned short; i:int; I:unsigned int;
  l:long; L:unsigned long; f:float; d:double.
Special cases (preceding decimal count indicates length):
  s:string (array of char); p: pascal string (with count byte).
Special case (only available in native format):
  P:an integer type that is wide enough to hold a pointer.
Special case (not in native mode unless 'long long' in platform C):
  q:long long; Q:unsigned long long
Whitespace between formats is ignored.
The variable struct.error is an exception raised on errors.
This module provides the components needed to build your own
__import__ function.  Undocumented functions are obsolete.
Abstract base class for time zone info objects.
time([hour[, minute[, second[, microsecond[, tzinfo]]]]]) --> a time object
All arguments are optional. tzinfo may be None, or an instance of
a tzinfo subclass. The remaining arguments may be ints or longs.
Difference between two datetime values.
datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])
The year, month and day arguments are required. tzinfo may be None, or an
instance of a tzinfo subclass. The remaining arguments may be ints or longs.
date(year, month, day) --> date object
writable() -> bool. Returns True if the IO object can be written.
readable() -> bool. Returns True if the IO object can be read.
seekable() -> bool. Returns True if the IO object can be seeked.
Write string to file.
Returns the number of characters written, which is always equal to
the length of the string.
Change stream position.
Seek to character offset pos relative to position indicated by whence:
    0  Start of stream (the default).  pos should be >= 0;
    1  Current position - pos must be 0;
    2  End of stream - pos must be 0.
Returns the new absolute position.
Truncate size to pos.
The pos argument defaults to the current file position, as
returned by tell().  The current file position is unchanged.
Returns the new absolute position.
Tell the current file position.
Read until newline or EOF.
Returns an empty string if EOF is hit immediately.
Read at most n characters, returned as a string.
If the argument is negative or omitted, read until EOF
is reached. Return an empty string at EOF.
Retrieve the entire contents of the object.
Close the IO object. Attempting any further operation after the
object is closed will raise a ValueError.
This method has no effect if the file is already closed.
Text I/O implementation using an in-memory buffer.
The initial_value argument sets the value of object.  The newline
argument is like the one of TextIOWrapper's constructor.
Open file and return a stream.  Raise IOError upon failure.
file is either a text or byte string giving the name (and the path
if the file isn't in the current working directory) of the file to
be opened or an integer file descriptor of the file to be
wrapped. (If a file descriptor is given, it is closed when the
returned I/O object is closed, unless closefd is set to False.)
mode is an optional string that specifies the mode in which the file
is opened. It defaults to 'r' which means open for reading in text
mode.  Other common values are 'w' for writing (truncating the file if
it already exists), and 'a' for appending (which on some Unix systems,
means that all writes append to the end of the file regardless of the
current seek position). In text mode, if encoding is not specified the
encoding used is platform dependent. (For reading and writing raw
bytes use binary mode and leave encoding unspecified.) The available
modes are:
========= ===============================================================
Character Meaning
--------- ---------------------------------------------------------------
'r'       open for reading (default)
'w'       open for writing, truncating the file first
'a'       open for writing, appending to the end of the file if it exists
'b'       binary mode
't'       text mode (default)
'+'       open a disk file for updating (reading and writing)
'U'       universal newline mode (for backwards compatibility; unneeded
          for new code)
========= ===============================================================
The default mode is 'rt' (open for reading text). For binary random
access, the mode 'w+b' opens and truncates the file to 0 bytes, while
'r+b' opens the file without truncation.
Python distinguishes between files opened in binary and text modes,
even when the underlying operating system doesn't. Files opened in
binary mode (appending 'b' to the mode argument) return contents as
bytes objects without any decoding. In text mode (the default, or when
't' is appended to the mode argument), the contents of the file are
returned as strings, the bytes having been first decoded using a
platform-dependent encoding or using the specified encoding if given.
buffering is an optional integer used to set the buffering policy.
Pass 0 to switch buffering off (only allowed in binary mode), 1 to select
line buffering (only usable in text mode), and an integer > 1 to indicate
the size of a fixed-size chunk buffer.  When no buffering argument is
given, the default buffering policy works as follows:
* Binary files are buffered in fixed-size chunks; the size of the buffer
  is chosen using a heuristic trying to determine the underlying device's
  "block size" and falling back on `io.DEFAULT_BUFFER_SIZE`.
  On many systems, the buffer will typically be 4096 or 8192 bytes long.
* "Interactive" text files (files for which isatty() returns True)
  use line buffering.  Other text files use the policy described above
  for binary files.
encoding is the name of the encoding used to decode or encode the
file. This should only be used in text mode. The default encoding is
platform dependent, but any encoding supported by Python can be
passed.  See the codecs module for the list of supported encodings.
errors is an optional string that specifies how encoding errors are to
be handled---this argument should not be used in binary mode. Pass
'strict' to raise a ValueError exception if there is an encoding error
(the default of None has the same effect), or pass 'ignore' to ignore
errors. (Note that ignoring encoding errors can lead to data loss.)
See the documentation for codecs.register for a list of the permitted
encoding error strings.
newline controls how universal newlines works (it only applies to text
mode). It can be None, '', '\n', '\r', and '\r\n'.  It works as
follows:
* On input, if newline is None, universal newlines mode is
  enabled. Lines in the input can end in '\n', '\r', or '\r\n', and
  these are translated into '\n' before being returned to the
  caller. If it is '', universal newline mode is enabled, but line
  endings are returned to the caller untranslated. If it has any of
  the other legal values, input lines are only terminated by the given
  string, and the line ending is returned to the caller untranslated.
* On output, if newline is None, any '\n' characters written are
  translated to the system default line separator, os.linesep. If
  newline is '', no translation takes place. If newline is any of the
  other legal values, any '\n' characters written are translated to
  the given string.
If closefd is False, the underlying file descriptor will be kept open
when the file is closed. This does not work when a file name is given
and must be True in that case.
open() returns a file object whose type depends on the mode, and
through which the standard file operations such as reading and writing
are performed. When open() is used to open a file in a text mode ('w',
'r', 'wt', 'rt', etc.), it returns a TextIOWrapper. When used to open
a file in a binary mode, the returned class varies: in read binary
mode, it returns a BufferedReader; in write binary and append binary
modes, it returns a BufferedWriter, and in read/write mode, it returns
a BufferedRandom.
It is also possible to use a string or bytearray as a file for both
reading and writing. For strings StringIO can be used like a file
opened in a text mode, and for bytes a BytesIO can be used like a file
opened in a binary mode.
The io module provides the Python interfaces to stream handling. The
builtin open function is defined in this module.
At the top of the I/O hierarchy is the abstract base class IOBase. It
defines the basic interface to a stream. Note, however, that there is no
separation between reading and writing to streams; implementations are
allowed to raise an IOError if they do not support a given operation.
Extending IOBase is RawIOBase which deals simply with the reading and
writing of raw bytes to a stream. FileIO subclasses RawIOBase to provide
an interface to OS files.
BufferedIOBase deals with buffering on a raw byte stream (RawIOBase). Its
subclasses, BufferedWriter, BufferedReader, and BufferedRWPair buffer
streams that are readable, writable, and both respectively.
BufferedRandom provides a buffered interface to random access
streams. BytesIO is a simple stream of in-memory bytes.
Another IOBase subclass, TextIOBase, deals with the encoding and decoding
of streams into text. TextIOWrapper, which extends it, is a buffered text
interface to a buffered raw stream (`BufferedIOBase`). Finally, StringIO
is a in-memory stream for text.
Argument names are not part of the specification, and only the arguments
of open() are intended to be used as keyword arguments.
data:
DEFAULT_BUFFER_SIZE
   An int containing the default buffer size used by the module's buffered
   I/O classes. open() uses the file's blksize (as obtained by os.stat) if
   possible.
locked() -> bool
(locked_lock() is an obsolete synonym)
Return whether the lock is in the locked state.
release()
(release_lock() is an obsolete synonym)
Release the lock, allowing another thread that is blocked waiting for
the lock to acquire the lock.  The lock must be in the locked state,
but it needn't be locked by the same thread that unlocks it.
acquire([wait]) -> bool
(acquire_lock() is an obsolete synonym)
Lock the lock.  Without argument, this blocks if the lock is already
locked (even by the same thread), waiting for another thread to release
the lock, and return True once the lock is acquired.
With an argument, this will only block if the argument is true,
and the return value reflects whether the lock is acquired.
The blocking operation is not interruptible.
stack_size([size]) -> size
Return the thread stack size used when creating new threads.  The
optional size argument specifies the stack size (in bytes) to be used
for subsequently created threads, and must be 0 (use platform or
configured default) or a positive integer value of at least 32,768 (32k).
If changing the thread stack size is unsupported, a ThreadError
exception is raised.  If the specified size is invalid, a ValueError
exception is raised, and the stack size is unmodified.  32k bytes
 currently the minimum supported stack size value to guarantee
sufficient stack space for the interpreter itself.
Note that some platforms may have particular restrictions on values for
the stack size, such as requiring a minimum stack size larger than 32kB or
requiring allocation in multiples of the system memory page size
- platform documentation should be referred to for more information
(4kB pages are common; using multiples of 4096 for the stack size is
the suggested approach in the absence of more specific information).
_count() -> integer
Return the number of currently running Python threads, excluding 
the main thread. The returned number comprises all threads created
through `start_new_thread()` as well as `threading.Thread`, and not
yet finished.
This function is meant for internal and specialized purposes only.
In most applications `threading.enumerate()` should be used instead.
get_ident() -> integer
Return a non-zero integer that uniquely identifies the current thread
amongst other threads that exist simultaneously.
This may be used to identify per-thread resources.
Even though on some platforms threads identities may appear to be
allocated consecutive numbers starting at 1, this behavior should not
be relied upon, and the number should be seen purely as a magic cookie.
A thread's identity may be reused for another thread after it exits.
interrupt_main()
Raise a KeyboardInterrupt in the main thread.
A subthread can use this function to interrupt the main thread.
exit()
(exit_thread() is an obsolete synonym)
This is synonymous to ``raise SystemExit''.  It will cause the current
thread to exit silently unless the exception is caught.
allocate_lock() -> lock object
(allocate() is an obsolete synonym)
Create a new lock object.  See help(LockType) for information about locks.
start_new_thread(function, args[, kwargs])
(start_new() is an obsolete synonym)
Start a new thread and return its identifier.  The thread will call the
function with positional arguments from the tuple args and keyword arguments
taken from the optional dictionary kwargs.  The thread exits when the
function returns; the return value is ignored.  The thread will also exit
when the function raises an unhandled exception; a stack trace will be
printed unless the exception is SystemExit.
Find the n smallest elements in a dataset.
Equivalent to:  sorted(iterable)[:n]
Find the n largest elements in a dataset.
Equivalent to:  sorted(iterable, reverse=True)[:n]
Transform list into a heap, in-place, in O(len(heap)) time.
heapreplace(heap, item) -> value. Pop and return the current smallest value, and add the new item.
This is more efficient than heappop() followed by heappush(), and can be
more appropriate when using a fixed-size heap.  Note that the value
returned may be larger than item!  That constrains reasonable uses of
this routine unless written as part of a conditional replacement:
    if item > heap[0]:
        item = heapreplace(heap, item)
Pop the smallest item off the heap, maintaining the heap invariant.
heappushpop(heap, item) -> value. Push item on the heap, then pop and return the smallest item
from the heap. The combined action runs more efficiently than
heappush() followed by a separate call to heappop().
heappush(heap, item) -> None. Push item onto heap, maintaining the heap invariant.
Private method returning an estimate of len(list(it)).
Return state information for pickling.
chain.from_iterable(iterable) --> chain object
Alternate chain() contructor taking a single iterable argument
that evaluates lazily.
Returns an independent iterator.
groupby(iterable[, keyfunc]) -> create an iterator which returns
(key, sub-iterator) grouped by each value of key(value).
repeat(object [,times]) -> create an iterator which returns the object
for the specified number of times.  If not specified, returns the object
endlessly.
product(*iterables) --> product object
Cartesian product of input iterables.  Equivalent to nested for-loops.
For example, product(A, B) returns the same as:  ((x,y) for x in A for y in B).
The leftmost iterators are in the outermost for-loop, so the output tuples
cycle in a manner similar to an odometer (with the rightmost element changing
on every iteration).
To compute the product of an iterable with itself, specify the number
of repetitions with the optional repeat keyword argument. For example,
product(A, repeat=4) means the same as product(A, A, A, A).
product('ab', range(3)) --> ('a',0) ('a',1) ('a',2) ('b',0) ('b',1) ('b',2)
product((0,1), (0,1), (0,1)) --> (0,0,0) (0,0,1) (0,1,0) (0,1,1) (1,0,0) ...
permutations(iterable[, r]) --> permutations object
Return successive r-length permutations of elements in the iterable.
permutations(range(3), 2) --> (0,1), (0,2), (1,0), (1,2), (2,0), (2,1)
izip_longest(iter1 [,iter2 [...]], [fillvalue=None]) --> izip_longest object
Return an izip_longest object whose .next() method returns a tuple where
the i-th element comes from the i-th iterable argument.  The .next()
method continues until the longest iterable in the argument sequence
is exhausted and then it raises StopIteration.  When the shorter iterables
are exhausted, the fillvalue is substituted in their place.  The fillvalue
defaults to None or can be specified by a keyword argument.
izip(iter1 [,iter2 [...]]) --> izip object
Return a izip object whose .next() method returns a tuple where
the i-th element comes from the i-th iterable argument.  The .next()
method continues until the shortest iterable in the argument sequence
is exhausted and then it raises StopIteration.  Works like the zip()
function but consumes less memory by returning an iterator instead of
a list.
count(start=0, step=1) --> count object
Return a count object whose .next() method returns consecutive values.
Equivalent to:
    def count(firstval=0, step=1):
        x = firstval
        while 1:
            yield x
            x += step
ifilterfalse(function or None, sequence) --> ifilterfalse object
Return those items of sequence for which function(item) is false.
If function is None, return the items that are false.
ifilter(function or None, sequence) --> ifilter object
Return those items of sequence for which function(item) is true.
If function is None, return the items that are true.
compress(data, selectors) --> iterator over selected data
Return data elements corresponding to true selector elements.
Forms a shorter iterator from selected data elements using the
selectors to choose the data elements.
chain(*iterables) --> chain object
Return a chain object whose .next() method returns elements from the
first iterable until it is exhausted, then elements from the next
iterable, until all of the iterables are exhausted.
imap(func, *iterables) --> imap object
Make an iterator that computes the function using arguments from
each of the iterables.  Like map() except that it returns
an iterator instead of a list and that it stops when the shortest
iterable is exhausted instead of filling in None for shorter
iterables.
starmap(function, sequence) --> starmap object
Return an iterator whose values are returned from the function evaluated
with an argument tuple taken from the given sequence.
islice(iterable, [start,] stop [, step]) --> islice object
Return an iterator whose next() method returns selected values from an
iterable.  If start is specified, will skip all preceding elements;
otherwise, start defaults to zero.  Step defaults to one.  If
specified as another value, step determines how many values are 
skipped between successive calls.  Works like a slice() on a list
but returns an iterator.
takewhile(predicate, iterable) --> takewhile object
Return successive entries from an iterable as long as the 
predicate evaluates to true for each entry.
dropwhile(predicate, iterable) --> dropwhile object
Drop items from the iterable while predicate(item) is true.
Afterwards, return every element until the iterable is exhausted.
cycle(iterable) --> cycle object
Return elements from the iterable until it is exhausted.
Then repeat the sequence indefinitely.
combinations_with_replacement(iterable, r) --> combinations_with_replacement object
Return successive r-length combinations of elements in the iterable
allowing individual elements to have successive repeats.
combinations_with_replacement('ABC', 2) --> AA AB AC BB BC CC
combinations(iterable, r) --> combinations object
Return successive r-length combinations of elements in the iterable.
combinations(range(4), 3) --> (0,1,2), (0,1,3), (0,2,3), (1,2,3)
Iterator wrapped to make it copyable
tee(iterable, n=2) --> tuple of n independent iterators.
Private method returning an estimate of len(list(it)).
D.copy() -> a shallow copy of D.
__missing__(key) # Called by __getitem__ for missing key; pseudo-code:
  if self.default_factory is None: raise KeyError((key,))
  self[key] = value = self.default_factory()
  return value
D.__sizeof__() -- size of D in memory, in bytes
Rotate the deque n steps to the right (default n=1).  If n is negative, rotates left.
D.reverse() -- reverse *IN PLACE*
D.__reversed__() -- return a reverse iterator over the deque
D.remove(value) -- remove first occurrence of value.
Return state information for pickling.
Remove and return the leftmost element.
Remove and return the rightmost element.
Extend the left side of the deque with elements from the iterable
Extend the right side of the deque with elements from the iterable
D.count(value) -> integer -- return number of occurrences of value
Return a shallow copy of a deque.
Remove all elements from the deque.
Add an element to the left side of the deque.
Add an element to the right side of the deque.
defaultdict(default_factory[, ...]) --> dict with default factory
The default factory is called without arguments to produce
a new value when a key is not present, in __getitem__ only.
A defaultdict compares equal to a dict with the same items.
All remaining arguments are treated the same as if they were
passed to the dict constructor, including keyword arguments.
deque([iterable[, maxlen]]) --> deque object
Build an ordered collection with optimized access from its endpoints.
methodcaller(name, ...) --> methodcaller object
Return a callable object that calls the given method on its operand.
After f = methodcaller('name'), the call f(r) returns r.name().
After g = methodcaller('name', 'date', foo=1), the call g(r) returns
r.name('date', foo=1).
attrgetter(attr, ...) --> attrgetter object
Return a callable object that fetches the given attribute(s) from its operand.
After f = attrgetter('name'), the call f(r) returns r.name.
After g = attrgetter('name', 'date'), the call g(r) returns (r.name, r.date).
After h = attrgetter('name.first', 'name.last'), the call h(r) returns
(r.name.first, r.name.last).
itemgetter(item, ...) --> itemgetter object
Return a callable object that fetches the given item(s) from its operand.
After f = itemgetter(2), the call f(r) returns r[2].
After g = itemgetter(2, 5, 3), the call g(r) returns (r[2], r[5], r[3])
compare_digest(a, b) -> bool
Return 'a == b'.  This function uses an approach designed to prevent
timing analysis, making it appropriate for cryptography.
a and b must both be of the same type: either str (ASCII only),
or any type that supports the buffer protocol (e.g. bytes).
Note: If a and b are of different lengths, or if an error occurs,
a timing attack could theoretically reveal information about the
types and lengths of a and b--but not their values.
Private method returning an estimate of len(list(it)).
A lock object is a synchronization primitive.  To create a lock,
call the PyThread_allocate_lock() function.  Methods are:
acquire() -- lock the lock, possibly blocking until it can be obtained
release() -- unlock of the lock
locked() -- test whether the lock is currently locked
A lock is not owned by the thread that locked it; another thread may
unlock it.  A thread attempting to lock a lock that it has already locked
will block until another thread unlocks it.  Deadlocks may ensue.
This module provides primitive operations to write multi-threaded programs.
The 'threading' module provides a more convenient interface.
Heap queues
[explanation by Fran
ois Pinard]
Heaps are arrays for which a[k] <= a[2*k+1] and a[k] <= a[2*k+2] for
all k, counting elements from 0.  For the sake of comparison,
non-existing elements are considered to be infinite.  The interesting
property of a heap is that a[0] is always its smallest element.
The strange invariant above is meant to be an efficient memory
representation for a tournament.  The numbers below are `k', not a[k]:
                                   0
                  1                                 2
          3               4                5               6
      7       8       9       10      11      12      13      14
    15 16   17 18   19 20   21 22   23 24   25 26   27 28   29 30
In the tree above, each cell `k' is topping `2*k+1' and `2*k+2'.  In
a usual binary tournament we see in sports, each cell is the winner
over the two cells it tops, and we can trace the winner down the tree
to see all opponents s/he had.  However, in many computer applications
of such tournaments, we do not need to trace the history of a winner.
To be more memory efficient, when a winner is promoted, we try to
replace it by something else at a lower level, and the rule becomes
that a cell and the two cells it tops contain three different items,
but the top cell "wins" over the two topped cells.
If this heap invariant is protected at all time, index 0 is clearly
the overall winner.  The simplest algorithmic way to remove it and
find the "next" winner is to move some loser (let's say cell 30 in the
diagram above) into the 0 position, and then percolate this new 0 down
the tree, exchanging values, until the invariant is re-established.
This is clearly logarithmic on the total number of items in the tree.
By iterating over all items, you get an O(n ln n) sort.
A nice feature of this sort is that you can efficiently insert new
items while the sort is going on, provided that the inserted items are
not "better" than the last 0'th element you extracted.  This is
especially useful in simulation contexts, where the tree holds all
incoming events, and the "win" condition means the smallest scheduled
time.  When an event schedule other events for execution, they are
scheduled into the future, so they can easily go into the heap.  So, a
heap is a good structure for implementing schedulers (this is what I
used for my MIDI sequencer :-).
Various structures for implementing schedulers have been extensively
studied, and heaps are good for this, as they are reasonably speedy,
the speed is almost constant, and the worst case is not much different
than the average case.  However, there are other representations which
are more efficient overall, yet the worst cases might be terrible.
Heaps are also very useful in big disk sorts.  You most probably all
know that a big sort implies producing "runs" (which are pre-sorted
sequences, which size is usually related to the amount of CPU memory),
followed by a merging passes for these runs, which merging is often
very cleverly organised[1].  It is very important that the initial
sort produces the longest runs possible.  Tournaments are a good way
to that.  If, using all the memory available to hold a tournament, you
replace and percolate items that happen to fit the current run, you'll
produce runs which are twice the size of the memory for random input,
and much better for input fuzzily ordered.
Moreover, if you output the 0'th item on disk and get an input which
may not fit in the current tournament (because the value "wins" over
the last output value), it cannot fit in the heap, so the size of the
heap decreases.  The freed memory could be cleverly reused immediately
for progressively building a second heap, which grows at exactly the
same rate the first heap is melting.  When the first heap completely
vanishes, you switch heaps and start a new run.  Clever and quite
effective!
In a word, heaps are useful memory structures to know.  I use them in
a few applications, and I think it is good to keep a `heap' module
around. :-)
--------------------
[1] The disk balancing algorithms which are current, nowadays, are
more annoying than clever, and this is a consequence of the seeking
capabilities of the disks.  On devices which cannot seek, like big
tape drives, the story was quite different, and one had to be very
clever to ensure (far in advance) that each tape movement will be the
most effective possible (that is, will best participate at
"progressing" the merge).  Some tapes were even able to read
backwards, and this was also used to avoid the rewinding time.
Believe me, real good tape sorts were quite spectacular to watch!
From all times, sorting has always been a Great Art! :-)
Heap queue algorithm (a.k.a. priority queue).
Heaps are arrays for which a[k] <= a[2*k+1] and a[k] <= a[2*k+2] for
all k, counting elements from 0.  For the sake of comparison,
non-existing elements are considered to be infinite.  The interesting
property of a heap is that a[0] is always its smallest element.
Usage:
heap = []            # creates an empty heap
heappush(heap, item) # pushes a new item on the heap
item = heappop(heap) # pops the smallest item from the heap
item = heap[0]       # smallest item on the heap without popping it
heapify(x)           # transforms list into a heap, in-place, in linear time
item = heapreplace(heap, item) # pops and returns smallest item, and adds
                               # new item; the heap size is unchanged
Our API differs from textbook heap algorithms as follows:
- We use 0-based indexing.  This makes the relationship between the
  index for a node and the indexes for its children slightly less
  obvious, but is more suitable since Python uses 0-based indexing.
- Our heappop() method returns the smallest item, not the largest.
These two make it possible to view the heap as a regular Python list
without surprises: heap[0] is the smallest item, and heap.sort()
maintains the heap invariant!
Functional tools for creating and using iterators.
Infinite iterators:
count([n]) --> n, n+1, n+2, ...
cycle(p) --> p0, p1, ... plast, p0, p1, ...
repeat(elem [,n]) --> elem, elem, elem, ... endlessly or up to n times
Iterators terminating on the shortest input sequence:
chain(p, q, ...) --> p0, p1, ... plast, q0, q1, ... 
compress(data, selectors) --> (d[0] if s[0]), (d[1] if s[1]), ...
dropwhile(pred, seq) --> seq[n], seq[n+1], starting when pred fails
groupby(iterable[, keyfunc]) --> sub-iterators grouped by value of keyfunc(v)
ifilter(pred, seq) --> elements of seq where pred(elem) is True
ifilterfalse(pred, seq) --> elements of seq where pred(elem) is False
islice(seq, [start,] stop [, step]) --> elements from
       seq[start:stop:step]
imap(fun, p, q, ...) --> fun(p0, q0), fun(p1, q1), ...
starmap(fun, seq) --> fun(*seq[0]), fun(*seq[1]), ...
tee(it, n=2) --> (it1, it2 , ... itn) splits one iterator into n
takewhile(pred, seq) --> seq[0], seq[1], until pred fails
izip(p, q, ...) --> (p[0], q[0]), (p[1], q[1]), ... 
izip_longest(p, q, ...) --> (p[0], q[0]), (p[1], q[1]), ... 
Combinatoric generators:
product(p, q, ... [repeat=1]) --> cartesian product
permutations(p[, r])
combinations(p, r)
combinations_with_replacement(p, r)
High performance data structures.
- deque:        ordered collection accessible from endpoints only
- defaultdict:  dict subclass with a default value factory
Operator interface.
This module exports a set of functions implemented in C corresponding
to the intrinsic operators of Python.  For example, operator.add(x, y)
is equivalent to the expression x+y.  The function names are those
used for special methods; variants without leading and trailing
'__' are also provided for convenience.
argument %d to map() must support iteration
tzset()
Initialize, or reinitialize, the local timezone to the value stored in
os.environ['TZ']. The TZ environment variable should be specified in
standard Unix timezone format as documented in the tzset man page
(eg. 'US/Eastern', 'Europe/Amsterdam'). Unknown timezones will silently
fall back to UTC. If the TZ environment variable is not set, the local
timezone is set to the systems best guess of wallclock time.
Changing the TZ environment variable without calling tzset *may* change
the local timezone used by methods such as localtime, but this behaviour
should not be relied on.
strptime(string, format) -> struct_time
Parse a string to a time tuple according to a format specification.
See the library reference manual for formatting codes (same as strftime()).
strftime(format[, tuple]) -> string
Convert a time tuple to a string according to a format specification.
See the library reference manual for formatting codes. When the time tuple
is not present, current time as returned by localtime() is used.
mktime(tuple) -> floating point number
Convert a time tuple in local time to seconds since the Epoch.
ctime(seconds) -> string
Convert a time in seconds since the Epoch to a string in local time.
This is equivalent to asctime(localtime(seconds)). When the time tuple is
not present, current time as returned by localtime() is used.
asctime([tuple]) -> string
Convert a time tuple to a string, e.g. 'Sat Jun 06 16:26:11 1998'.
When the time tuple is not present, current time as returned by localtime()
is used.
localtime([seconds]) -> (tm_year,tm_mon,tm_mday,tm_hour,tm_min,
                          tm_sec,tm_wday,tm_yday,tm_isdst)
Convert seconds since the Epoch to a time tuple expressing local time.
When 'seconds' is not passed in, convert the current time instead.
gmtime([seconds]) -> (tm_year, tm_mon, tm_mday, tm_hour, tm_min,
                       tm_sec, tm_wday, tm_yday, tm_isdst)
Convert seconds since the Epoch to a time tuple expressing UTC (a.k.a.
GMT).  When 'seconds' is not passed in, convert the current time instead.
sleep(seconds)
Delay execution for a given number of seconds.  The argument may be
a floating point number for subsecond precision.
clock() -> floating point number
Return the CPU time or real time since the start of the process or since
the first call to clock().  This has as much precision as the system
records.
time() -> floating point number
Return the current time in seconds since the Epoch.
Fractions of a second may be present if the system clock provides them.
get_referents(*objs) -> list
Return the list of objects that are directly referred to by objs.
get_referrers(*objs) -> list
Return the list of objects that directly refer to any of objs.
is_tracked(obj) -> bool
Returns true if the object is tracked by the garbage collector.
Simple atomic objects will return false.
get_objects() -> [...]
Return a list of objects tracked by the collector (excluding the list
returned).
collect([generation]) -> n
With no arguments, run a full collection.  The optional argument
may be an integer specifying which generation to collect.  A ValueError
is raised if the generation number is invalid.
The number of unreachable objects is returned.
get_threshold() -> (threshold0, threshold1, threshold2)
Return the current collection thresholds
set_threshold(threshold0, [threshold1, threshold2]) -> None
Sets the collection thresholds.  Setting threshold0 to zero disables
collection.
get_count() -> (count0, count1, count2)
Return the current collection counts
get_debug() -> flags
Get the garbage collection debugging flags.
set_debug(flags) -> None
Set the garbage collection debugging flags. Debugging information is
written to sys.stderr.
flags is an integer and can have the following bits turned on:
  DEBUG_STATS - Print statistics during collection.
  DEBUG_COLLECTABLE - Print collectable objects found.
  DEBUG_UNCOLLECTABLE - Print unreachable but uncollectable objects found.
  DEBUG_INSTANCES - Print instance objects.
  DEBUG_OBJECTS - Print objects other than instances.
  DEBUG_SAVEALL - Save objects to gc.garbage rather than freeing them.
  DEBUG_LEAK - Debug leaking programs (everything but STATS).
isenabled() -> status
Returns true if automatic garbage collection is enabled.
disable() -> None
Disable automatic garbage collection.
enable() -> None
Enable automatic garbage collection.
b2a_qp(data, quotetabs=0, istext=1, header=0) -> s; 
 Encode a string using quoted-printable encoding. 
On encoding, when istext is set, newlines are not encoded, and white 
space at end of lines is.  When istext is not set, \r and \n (CR/LF) are 
both encoded.  When quotetabs is set, space and tabs are encoded.
Decode a string of qp-encoded data
(data, oldcrc = 0) -> newcrc. Compute CRC-32 incrementally
(data, oldcrc) -> newcrc. Compute hqx CRC incrementally
Decode hexbin RLE-coded string
Binhex RLE-code binary data
a2b_hex(hexstr) -> s; Binary data of hexadecimal representation.
hexstr must contain an even number of hex digits (upper or lower case).
This function is also available as "unhexlify()"
b2a_hex(data) -> s; Hexadecimal representation of binary data.
This function is also available as "hexlify()".
Encode .hqx data
ascii -> bin, done. Decode .hqx coding
(bin) -> ascii. Base64-code line of data
(ascii) -> bin. Decode a line of base64 data
(bin) -> ascii. Uuencode line of data
(ascii) -> bin. Decode a line of uuencoded data
shutdown(flag)
Shut down the reading side of the socket (flag == SHUT_RD), the writing side
of the socket (flag == SHUT_WR), or both ends (flag == SHUT_RDWR).
setsockopt(level, option, value)
Set a socket option.  See the Unix manual for level and option.
The value argument can either be an integer or a string.
gettimeout() -> timeout
Returns the timeout in seconds (float) associated with socket 
operations. A timeout of None indicates that timeouts on socket 
operations are disabled.
settimeout(timeout)
Set a timeout on socket operations.  'timeout' can be a float,
giving in seconds, or None.  Setting a timeout of None disables
the timeout feature and is equivalent to setblocking(1).
Setting a timeout of zero is the same as setblocking(0).
setblocking(flag)
Set the socket to blocking (flag is true) or non-blocking (false).
setblocking(True) is equivalent to settimeout(None);
setblocking(False) is equivalent to settimeout(0.0).
sendto(data[, flags], address) -> count
Like send(data, flags) but allows specifying the destination address.
For IP sockets, the address is a pair (hostaddr, port).
sendall(data[, flags])
Send a data string to the socket.  For the optional flags
argument, see the Unix manual.  This calls send() repeatedly
until all data is sent.  If an error occurs, it's impossible
to tell how much data has been sent.
send(data[, flags]) -> count
Send a data string to the socket.  For the optional flags
argument, see the Unix manual.  Return the number of bytes
sent; this may be less than len(data) if the network is busy.
recvfrom_into(buffer[, nbytes[, flags]]) -> (nbytes, address info)
Like recv_into(buffer[, nbytes[, flags]]) but also return the sender's address info.
recvfrom(buffersize[, flags]) -> (data, address info)
Like recv(buffersize, flags) but also return the sender's address info.
recv_into(buffer, [nbytes[, flags]]) -> nbytes_read
A version of recv() that stores its data into a buffer rather than creating 
a new string.  Receive up to buffersize bytes from the socket.  If buffersize 
is not specified (or 0), receive up to the size available in the given buffer.
See recv() for documentation about the flags.
recv(buffersize[, flags]) -> data
Receive up to buffersize bytes from the socket.  For the optional flags
argument, see the Unix manual.  When no data is available, block until
at least one byte is available or until the remote end is closed.  When
the remote end is closed and all data is read, return the empty string.
makefile([mode[, buffersize]]) -> file object
Return a regular file object corresponding to the socket.
The mode and buffersize arguments are as for the built-in open() function.
listen(backlog)
Enable a server to accept connections.  The backlog argument must be at
least 0 (if it is lower, it is set to 0); it specifies the number of
unaccepted connections that the system will allow before refusing new
connections.
getsockopt(level, option[, buffersize]) -> value
Get a socket option.  See the Unix manual for level and option.
If a nonzero buffersize argument is given, the return value is a
string of that length; otherwise it is an integer.
getsockname() -> address info
Return the address of the local endpoint.  For IP sockets, the address
info is a pair (hostaddr, port).
getpeername() -> address info
Return the address of the remote endpoint.  For IP sockets, the address
info is a pair (hostaddr, port).
fileno() -> integer
Return the integer file descriptor of the socket.
dup() -> socket object
Return a new socket object connected to the same system resource.
connect_ex(address) -> errno
This is like connect(address), but returns an error code (the errno value)
instead of raising an exception when an error occurs.
connect(address)
Connect the socket to a remote address.  For IP sockets, the address
is a pair (host, port).
close()
Close the socket.  It cannot be used after this call.
bind(address)
Bind the socket to a local address.  For IP sockets, the address is a
pair (host, port); the host must refer to the local host. For raw packet
sockets the address is a tuple (ifname, proto [,pkttype [,hatype]])
accept() -> (socket object, address info)
Wait for an incoming connection.  Return a new socket representing the
connection, and the address of the client.  For IP sockets, the address
info is a pair (hostaddr, port).
setdefaulttimeout(timeout)
Set the default timeout in seconds (float) for new socket objects.
A value of None indicates that new socket objects have no timeout.
When the socket module is first imported, the default is None.
getdefaulttimeout() -> timeout
Returns the default timeout in seconds (float) for new socket objects.
A value of None indicates that new socket objects have no timeout.
When the socket module is first imported, the default is None.
getnameinfo(sockaddr, flags) --> (host, port)
Get host and port for a sockaddr.
getaddrinfo(host, port [, family, socktype, proto, flags])
    -> list of (family, socktype, proto, canonname, sockaddr)
Resolve host and port into addrinfo struct.
inet_ntop(af, packed_ip) -> string formatted IP address
Convert a packed IP address of the given family to string format.
inet_pton(af, ip) -> packed IP address string
Convert an IP address from string format to a packed string suitable
for use with low-level network functions.
inet_ntoa(packed_ip) -> ip_address_string
Convert an IP address from 32-bit packed binary format to string format
inet_aton(string) -> packed 32-bit IP representation
Convert an IP address in string format (123.45.67.89) to the 32-bit packed
binary format used in low-level network functions.
htonl(integer) -> integer
Convert a 32-bit integer from host to network byte order.
htons(integer) -> integer
Convert a 16-bit integer from host to network byte order.
ntohl(integer) -> integer
Convert a 32-bit integer from network to host byte order.
ntohs(integer) -> integer
Convert a 16-bit integer from network to host byte order.
socketpair([family[, type[, proto]]]) -> (socket object, socket object)
Create a pair of socket objects from the sockets returned by the platform
socketpair() function.
The arguments are the same as for socket() except the default family is
AF_UNIX if defined on the platform; otherwise, the default is AF_INET.
fromfd(fd, family, type[, proto]) -> socket object
Create a socket object from a duplicate of the given
file descriptor.
The remaining arguments are the same as for socket().
getprotobyname(name) -> integer
Return the protocol number for the named protocol.  (Rarely used.)
getservbyport(port[, protocolname]) -> string
Return the service name from a port number and protocol name.
The optional protocol name, if given, should be 'tcp' or 'udp',
otherwise any protocol will match.
getservbyname(servicename[, protocolname]) -> integer
Return a port number from a service name and protocol name.
The optional protocol name, if given, should be 'tcp' or 'udp',
otherwise any protocol will match.
gethostname() -> string
Return the current host name.
gethostbyaddr(host) -> (name, aliaslist, addresslist)
Return the true host name, a list of aliases, and a list of IP addresses,
for a host.  The host argument is a string giving a host name or IP number.
gethostbyname_ex(host) -> (name, aliaslist, addresslist)
Return the true host name, a list of aliases, and a list of IP addresses,
for a host.  The host argument is a string giving a host name or IP number.
gethostbyname(host) -> address
Return the IP address (a string of the form '255.255.255.255') for a host.
socket([family[, type[, proto]]]) -> socket object
Open a socket of the given type.  The family argument specifies the
address family; it defaults to AF_INET.  The type argument specifies
whether this is a stream (SOCK_STREAM, this is the default)
or datagram (SOCK_DGRAM) socket.  The protocol argument defaults to 0,
specifying the default protocol.  Keyword arguments are accepted.
A socket object represents one endpoint of a network connection.
Methods of socket objects (keyword arguments not allowed):
accept() -- accept a connection, returning new socket and client address
bind(addr) -- bind the socket to a local address
close() -- close the socket
connect(addr) -- connect the socket to a remote address
connect_ex(addr) -- connect, return an error code instead of an exception
dup() -- return a new socket object identical to the current one [*]
fileno() -- return underlying file descriptor
getpeername() -- return remote address [*]
getsockname() -- return local address
getsockopt(level, optname[, buflen]) -- get socket options
gettimeout() -- return timeout or None
listen(n) -- start listening for incoming connections
makefile([mode, [bufsize]]) -- return a file object for the socket [*]
recv(buflen[, flags]) -- receive data
recv_into(buffer[, nbytes[, flags]]) -- receive data (into a buffer)
recvfrom(buflen[, flags]) -- receive data and sender's address
recvfrom_into(buffer[, nbytes, [, flags])
  -- receive data and sender's address (into a buffer)
sendall(data[, flags]) -- send all data
send(data[, flags]) -- send data, may not send all of it
sendto(data[, flags], addr) -- send data to a given address
setblocking(0 | 1) -- set or clear the blocking I/O flag
setsockopt(level, optname, value) -- set socket options
settimeout(None | float) -- set or clear the timeout
shutdown(how) -- shut down traffic in one or both directions
 [*] not available on all platforms!
writelines(sequence_of_strings) -> None.  Write the strings to the file.
Note that newlines are not added.  The sequence can be any iterable object
producing strings. This is equivalent to calling write() for each string.
write(s) -- Write a string to the file
Note (hack:) writing None resets the buffer
close(): explicitly release resources held.
truncate(): truncate the file at the current position.
tell() -- get the current position.
seek(position)       -- set the current position
seek(position, mode) -- mode 0: absolute; 1: relative; 2: relative to EOF
reset() -- Reset the file position to the beginning
readlines() -- Read all lines
readline() -- Read one line
read([s]) -- Read s characters, or the rest of the string
isatty(): always returns 0
getvalue([use_pos]) -- Get the string value.
If use_pos is specified and is a true value, then the string returned
will include only the text up to the current file position.
flush(): does nothing.
Simple type for output to strings.
Simple type for treating strings as input file streams
StringIO([s]) -- Return a StringIO-like stream for reading or writing
upper(s) -> string
Return a copy of the string s converted to uppercase.
translate(s,table [,deletechars]) -> string
Return a copy of the string s, where all characters occurring
in the optional argument deletechars are removed, and the
remaining characters have been mapped through the given
translation table, which must be a string of length 256.
swapcase(s) -> string
Return a copy of the string s with upper case characters
converted to lowercase and vice versa.
strip(s) -> string
Return a copy of the string s with leading and trailing
whitespace removed.
split(s [,sep [,maxsplit]]) -> list of strings
splitfields(s [,sep [,maxsplit]]) -> list of strings
Return a list of the words in the string s, using sep as the
delimiter string.  If maxsplit is nonzero, splits into at most
maxsplit words.  If sep is not specified, any whitespace string
is a separator.  Maxsplit defaults to 0.
(split and splitfields are synonymous)
rstrip(s) -> string
Return a copy of the string s with trailing whitespace removed.
rfind(s, sub [,start [,end]]) -> int
Return the highest index in s where substring sub is found,
such that sub is contained within s[start,end].  Optional
arguments start and end are interpreted as in slice notation.
Return -1 on failure.
replace (str, old, new[, maxsplit]) -> string
Return a copy of string str with all occurrences of substring
old replaced by new. If the optional argument maxsplit is
given, only the first maxsplit occurrences are replaced.
maketrans(frm, to) -> string
Return a translation table (a string of 256 bytes long)
suitable for use in string.translate.  The strings frm and to
must be of the same length.
lower(s) -> string
Return a copy of the string s converted to lowercase.
lstrip(s) -> string
Return a copy of the string s with leading whitespace removed.
join(list [,sep]) -> string
joinfields(list [,sep]) -> string
Return a string composed of the words in list, with
intervening occurrences of sep.  Sep defaults to a single
space.
(join and joinfields are synonymous)
find(s, sub [,start [,end]]) -> in
Return the lowest index in s where substring sub is found,
such that sub is contained within s[start,end].  Optional
arguments start and end are interpreted as in slice notation.
Return -1 on failure.
expandtabs(string, [tabsize]) -> string
Expand tabs in a string, i.e. replace them by one or more spaces,
depending on the current column and the given tab size (default 8).
The column number is reset to zero after each newline occurring in the
string.  This doesn't understand other non-printing characters.
count(s, sub[, start[, end]]) -> int
Return the number of occurrences of substring sub in string
s[start:end].  Optional arguments start and end are
interpreted as in slice notation.
capitalize(s) -> string
Return a copy of the string s with only its first character
capitalized.
atol(s [,base]) -> long
Return the long integer represented by the string s in the
given base, which defaults to 10.  The string s must consist
of one or more digits, possibly preceded by a sign.  If base
is 0, it is chosen from the leading characters of s, 0 for
octal, 0x or 0X for hexadecimal.  If base is 16, a preceding
0x or 0X is accepted.  A trailing L or l is not accepted,
unless base is 0.
atoi(s [,base]) -> int
Return the integer represented by the string s in the given
base, which defaults to 10.  The string s must consist of one
or more digits, possibly preceded by a sign.  If base is 0, it
is chosen from the leading characters of s, 0 for octal, 0x or
0X for hexadecimal.  If base is 16, a preceding 0x or 0X is
accepted.
atof(s) -> float
Return the floating point number represented by the string s.
reduce(function, sequence[, initial]) -> value
Apply a function of two arguments cumulatively to the items of a sequence,
from left to right, so as to reduce the sequence to a single value.
For example, reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates
((((1+2)+3)+4)+5).  If initial is present, it is placed before the items
of the sequence in the calculation, and serves as a default when the
sequence is empty.
partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
This module provides various functions to manipulate time values.
There are two standard representations of time.  One is the number
of seconds since the Epoch, in UTC (a.k.a. GMT).  It may be an integer
or a floating point number (to represent fractions of seconds).
The Epoch is system-defined; on Unix, it is generally January 1st, 1970.
The actual value can be retrieved by calling gmtime(0).
The other representation is a tuple of 9 integers giving local time.
The tuple items are:
  year (four digits, e.g. 1998)
  month (1-12)
  day (1-31)
  hours (0-23)
  minutes (0-59)
  seconds (0-59)
  weekday (0-6, Monday is 0)
  Julian day (day in the year, 1-366)
  DST (Daylight Savings Time) flag (-1, 0 or 1)
If the DST flag is 0, the time is given in the regular time zone;
if it is 1, the time is given in the DST time zone;
if it is -1, mktime() should guess based on the date and time.
Variables:
timezone -- difference in seconds between UTC and local standard time
altzone -- difference in  seconds between UTC and local DST time
daylight -- whether local time should reflect DST
tzname -- tuple of (standard time zone name, DST time zone name)
Functions:
time() -- return current time in seconds since the Epoch as a float
clock() -- return CPU time since process start as a float
sleep() -- delay for a number of seconds given as a float
gmtime() -- convert seconds since Epoch to UTC tuple
localtime() -- convert seconds since Epoch to local time tuple
asctime() -- convert time tuple to string
ctime() -- convert time in seconds to string
mktime() -- convert local time tuple to seconds since Epoch
strftime() -- convert time tuple to string according to format specification
strptime() -- parse string to time tuple according to format specification
tzset() -- change the local timezone
This module provides access to the garbage collector for reference cycles.
enable() -- Enable automatic garbage collection.
disable() -- Disable automatic garbage collection.
isenabled() -- Returns true if automatic collection is enabled.
collect() -- Do a full collection right now.
get_count() -- Return the current collection counts.
set_debug() -- Set debugging flags.
get_debug() -- Get debugging flags.
set_threshold() -- Set the collection thresholds.
get_threshold() -- Return the current the collection thresholds.
get_objects() -- Return a list of all objects tracked by the collector.
is_tracked() -- Returns true if a given object is tracked.
get_referrers() -- Return the list of objects that refer to an object.
get_referents() -- Return the list of objects that an object refers to.
Conversion between binary data and ASCII
Implementation module for socket operations.
See the socket module for documentation.
A simple fast partial StringIO replacement.
This module provides a simple useful replacement for
the StringIO module that is written in C.  It does not provide the
full generality of StringIO, but it provides enough for most
applications and is especially useful in conjunction with the
pickle module.
Usage:
  from cStringIO import StringIO
  an_output_stream=StringIO()
  an_output_stream.write(some_stuff)
  ...
  value=an_output_stream.getvalue()
  an_input_stream=StringIO(a_string)
  spam=an_input_stream.readline()
  spam=an_input_stream.read(5)
  an_input_stream.seek(0)           # OK, start over
  spam=an_input_stream.read()       # and read it all
If someone else wants to provide a more complete implementation,
go for it. :-)  
cStringIO.c,v 1.29 1999/06/15 14:10:27 jim Exp
Common string manipulations, optimized for speed.
Always use "import string" rather than referencing
this module directly.
Tools that operate on functions.
lockf (fd, operation, length=0, start=0, whence=0)
This is essentially a wrapper around the fcntl() locking calls.  fd is the
file descriptor of the file to lock or unlock, and operation is one of the
following values:
    LOCK_UN - unlock
    LOCK_SH - acquire a shared lock
    LOCK_EX - acquire an exclusive lock
When operation is LOCK_SH or LOCK_EX, it can also be bitwise ORed with
LOCK_NB to avoid blocking on lock acquisition.  If LOCK_NB is used and the
lock cannot be acquired, an IOError will be raised and the exception will
have an errno attribute set to EACCES or EAGAIN (depending on the operating
system -- for portability, check for either value).
length is the number of bytes to lock, with the default meaning to lock to
EOF.  start is the byte offset, relative to whence, to that the lock
starts.  whence is as with fileobj.seek(), specifically:
    0 - relative to the start of the file (SEEK_SET)
    1 - relative to the current buffer position (SEEK_CUR)
    2 - relative to the end of the file (SEEK_END)
flock(fd, operation)
Perform the lock operation op on file descriptor fd.  See the Unix 
manual page for flock(2) for details.  (On some systems, this function is
emulated using fcntl().)
ioctl(fd, op[, arg[, mutate_flag]])
Perform the operation op on file descriptor fd.  The values used for op
are operating system dependent, and are available as constants in the
fcntl or termios library modules, using the same names as used in the
relevant C header files.
The argument arg is optional, and defaults to 0; it may be an int or a
buffer containing character data (most likely a string or an array). 
If the argument is a mutable buffer (such as an array) and if the
mutate_flag argument (which is only allowed in this case) is true then the
buffer is (in effect) passed to the operating system and changes made by
the OS will be reflected in the contents of the buffer after the call has
returned.  The return value is the integer returned by the ioctl system
call.
If the argument is a mutable buffer and the mutable_flag argument is not
passed or is false, the behavior is as if a string had been passed.  This
behavior will change in future releases of Python.
If the argument is an immutable buffer (most likely a string) then a copy
of the buffer is passed to the operating system and the return value is a
string of the same length containing whatever the operating system put in
the buffer.  The length of the arg buffer in this case is not allowed to
exceed 1024 bytes.
If the arg given is an integer or if none is specified, the result value is
an integer corresponding to the return value of the ioctl call in the C
code.
fcntl(fd, op, [arg])
Perform the operation op on file descriptor fd.  The values used
for op are operating system dependent, and are available
as constants in the fcntl module, using the same names as used in
the relevant C header files.  The argument arg is optional, and
defaults to 0; it may be an int or a string.  If arg is given as a string,
the return value of fcntl is a string of that length, containing the
resulting value put in the arg buffer by the operating system.  The length
of the arg string is not allowed to exceed 1024 bytes.  If the arg given
is an integer or if none is specified, the result value is an integer
corresponding to the return value of the fcntl call in the C code.
Random() -> create a random number generator with its own internal state.
grp.struct_group: Results from getgr*() routines.
This object may be accessed either as a tuple of
  (gr_name,gr_passwd,gr_gid,gr_mem)
or via the object attributes as named in the above tuple.
pwd.struct_passwd: Results from getpw*() routines.
This object may be accessed either as a tuple of
  (pw_name,pw_passwd,pw_uid,pw_gid,pw_gecos,pw_dir,pw_shell)
or via the object attributes as named in the above tuple.
getpwall() -> list_of_entries
Return a list of all available password database entries, in arbitrary order.
See help(pwd) for more on password database entries.
getpwnam(name) -> (pw_name,pw_passwd,pw_uid,
                    pw_gid,pw_gecos,pw_dir,pw_shell)
Return the password database entry for the given user name.
See help(pwd) for more on password database entries.
getpwuid(uid) -> (pw_name,pw_passwd,pw_uid,
                  pw_gid,pw_gecos,pw_dir,pw_shell)
Return the password database entry for the given numeric user ID.
See help(pwd) for more on password database entries.
trunc(x:Real) -> Integral
Truncates x to the nearest Integral toward 0. Uses the __trunc__ magic method.
tanh(x)
Return the hyperbolic tangent of x.
tan(x)
Return the tangent of x (measured in radians).
sqrt(x)
Return the square root of x.
sinh(x)
Return the hyperbolic sine of x.
sin(x)
Return the sine of x (measured in radians).
radians(x)
Convert angle x from degrees to radians.
pow(x, y)
Return x**y (x to the power of y).
modf(x)
Return the fractional and integer parts of x.  Both results carry the sign
of x and are floats.
log10(x)
Return the base 10 logarithm of x.
log1p(x)
Return the natural logarithm of 1+x (base e).
The result is computed in a way which is accurate for x near zero.
log(x[, base])
Return the logarithm of x to the given base.
If the base not specified, returns the natural logarithm (base e) of x.
lgamma(x)
Natural logarithm of absolute value of Gamma function at x.
ldexp(x, i)
Return x * (2**i).
isnan(x) -> bool
Check if float x is not a number (NaN).
isinf(x) -> bool
Check if float x is infinite (positive or negative).
hypot(x, y)
Return the Euclidean distance, sqrt(x*x + y*y).
gamma(x)
Gamma function at x.
fsum(iterable)
Return an accurate floating point sum of values in the iterable.
Assumes IEEE-754 floating point arithmetic.
frexp(x)
Return the mantissa and exponent of x, as pair (m, e).
m is a float and e is an int, such that x = m * 2.**e.
If x is 0, m and e are both 0.  Else 0.5 <= abs(m) < 1.0.
fmod(x, y)
Return fmod(x, y), according to platform C.  x % y may differ.
floor(x)
Return the floor of x as a float.
This is the largest integral value <= x.
factorial(x) -> Integral
Find x!. Raise a ValueError if x is negative or non-integral.
fabs(x)
Return the absolute value of the float x.
expm1(x)
Return exp(x)-1.
This function avoids the loss of precision involved in the direct evaluation of exp(x)-1 for small x.
exp(x)
Return e raised to the power of x.
erfc(x)
Complementary error function at x.
erf(x)
Error function at x.
degrees(x)
Convert angle x from radians to degrees.
cosh(x)
Return the hyperbolic cosine of x.
cos(x)
Return the cosine of x (measured in radians).
copysign(x, y)
Return x with the sign of y.
ceil(x)
Return the ceiling of x as a float.
This is the smallest integral value >= x.
atanh(x)
Return the inverse hyperbolic tangent of x.
atan2(y, x)
Return the arc tangent (measured in radians) of y/x.
Unlike atan(y/x), the signs of both x and y are considered.
atan(x)
Return the arc tangent (measured in radians) of x.
asinh(x)
Return the inverse hyperbolic sine of x.
asin(x)
Return the arc sine (measured in radians) of x.
acosh(x)
Return the inverse hyperbolic cosine of x.
acos(x)
Return the arc cosine (measured in radians) of x.
This module performs file control and I/O control on file 
descriptors.  It is an interface to the fcntl() and ioctl() Unix
routines.  File descriptors can be obtained with the fileno() method of
a file or socket object.
Module implements the Mersenne Twister random number generator.
Access to the Unix group database.
Group entries are reported as 4-tuples containing the following fields
from the group database, in order:
  gr_name   - name of the group
  gr_passwd - group password (encrypted); often empty
  gr_gid    - numeric ID of the group
  gr_mem    - list of members
The gid is an integer, name and password are strings.  (Note that most
users are not explicitly listed as members of the groups they are in
according to the password database.  Check both databases to get
complete membership information.)
This module provides access to the Unix password database.
It is available on all Unix versions.
Password database entries are reported as 7-tuples containing the following
items from the password database (see `<pwd.h>'), in order:
pw_name, pw_passwd, pw_uid, pw_gid, pw_gecos, pw_dir, pw_shell.
The uid and gid items are integers, all others are strings. An
exception is raised if the entry asked for cannot be found.
This module is always available.  It provides access to the
mathematical functions defined by the C standard.
__sizeof__() -> int
Size of the array in memory, in bytes.
tounicode() -> unicode
Convert the array to a unicode string.  The array must be
a type 'u' array; otherwise a ValueError is raised.  Use
array.tostring().decode() to obtain a unicode string from
an array of some other type.
tostring() -> string
Convert the array to an array of machine values and return the string
representation.
tolist() -> list
Convert array to an ordinary list with the same items.
tofile(f)
Write all items (as machine values) to the file object f.  Also called as
write.
reverse()
Reverse the order of the items in the array.
remove(x)
Remove the first occurrence of x in the array.
Return state information for pickling.
pop([i])
Return the i-th element and delete it from the array. i defaults to -1.
insert(i,x)
Insert a new item x into the array before position i.
index(x)
Return index of first occurrence of x in the array.
fromunicode(ustr)
Extends this array with data from the unicode string ustr.
The array must be a type 'u' array; otherwise a ValueError
is raised.  Use array.fromstring(ustr.decode(...)) to
append Unicode data to an array of some other type.
fromstring(string)
Appends items from the string, interpreting it as an array of machine
values,as if it had been read from a file using the fromfile() method).
fromlist(list)
Append items to array from list.
fromfile(f, n)
Read n objects from the file object f and append them to the end of the
array.  Also called as read.
extend(array or iterable)
 Append items to the end of the array.
count(x)
Return number of occurrences of x in the array.
copy(array)
 Return a copy of the array.
byteswap()
Byteswap all items of the array.  If the items in the array are not 1, 2,
4, or 8 bytes in size, RuntimeError is raised.
buffer_info() -> (address, length)
Return a tuple (address, length) giving the current memory address and
the length in items of the buffer used to hold array's contents
The length should be multiplied by the itemsize attribute to calculate
the buffer length in bytes.
append(x)
Append new value x to the end of the array.
array(typecode [, initializer]) -> array
Return a new array whose items are restricted by typecode, and
initialized from the optional initializer value, which must be a list,
string or iterable over elements of the appropriate type.
Arrays represent basic values and behave very much like lists, except
the type of objects stored in them is constrained.
Methods:
append() -- append a new item to the end of the array
buffer_info() -- return information giving the current memory info
byteswap() -- byteswap all the items of the array
count() -- return number of occurrences of an object
extend() -- extend array by appending multiple elements from an iterable
fromfile() -- read items from a file object
fromlist() -- append items from the list
fromstring() -- append items from the string
index() -- return index of first occurrence of an object
insert() -- insert a new item into the array at a provided position
pop() -- remove and return item (default last)
read() -- DEPRECATED, use fromfile()
remove() -- remove first occurrence of an object
reverse() -- reverse the order of the items in the array
tofile() -- write all items to a file object
tolist() -- return the array converted to an ordinary list
tostring() -- return the array converted to a string
write() -- DEPRECATED, use tofile()
Attributes:
typecode -- the typecode character used to create the array
itemsize -- the length in bytes of one array item
Objects that know how to unpickle
Objects that know how to pickle objects
This module defines an object type which can efficiently represent
an array of basic values: characters, integers, floating point
numbers.  Arrays are sequence types and behave very much like lists,
except that the type of objects stored in them is constrained.  The
type is specified at object creation time by using a type code, which
is a single character.  The following type codes are defined:
    Type code   C Type             Minimum size in bytes 
    'c'         character          1 
    'b'         signed integer     1 
    'B'         unsigned integer   1 
    'u'         Unicode character  2 
    'h'         signed integer     2 
    'H'         unsigned integer   2 
    'i'         signed integer     2 
    'I'         unsigned integer   2 
    'l'         signed integer     4 
    'L'         unsigned integer   4 
    'f'         floating point     4 
    'd'         floating point     8 
The constructor is:
array(typecode [, initializer]) -- create a new array
usVS
0cQPLusboi(bR
C implementation and optimization of the Python pickle module.
decompressobj([wbits]) -- Return a decompressor object.
Optional arg wbits indicates the window buffer size and container format.
decompress(string[, wbits[, bufsize]]) -- Return decompressed string.
Optional arg wbits indicates the window buffer size and container format.
Optional arg bufsize is the initial output buffer size.
crc32(string[, start]) -- Compute a CRC-32 checksum of string.
An optional starting value can be specified.  The returned checksum is
a signed integer.
compressobj([level]) -- Return a compressor object.
Optional arg level is the compression level, in 0-9 or -1.
compress(string[, level]) -- Returned compressed string.
Optional arg level is the compression level, in 0-9.
adler32(string[, start]) -- Compute an Adler-32 checksum of string.
An optional starting value can be specified.  The returned checksum is
a signed integer.
normalize(form, unistr)
Return the normal form 'form' for the Unicode string unistr.  Valid
values for form are 'NFC', 'NFKC', 'NFD', and 'NFKD'.
lookup(name)
Look up character by name.  If a character with the
given name is found, return the corresponding Unicode
character.  If not found, KeyError is raised.
name(unichr[, default])
Returns the name assigned to the Unicode character unichr as a
string. If no name is defined, default is returned, or, if not
given, ValueError is raised.
decomposition(unichr)
Returns the character decomposition mapping assigned to the Unicode
character unichr as string. An empty string is returned in case no
such mapping is defined.
east_asian_width(unichr)
Returns the east asian width assigned to the Unicode character
unichr as string.
mirrored(unichr)
Returns the mirrored property assigned to the Unicode character
unichr as integer. Returns 1 if the character has been identified as
a "mirrored" character in bidirectional text, 0 otherwise.
combining(unichr)
Returns the canonical combining class assigned to the Unicode
character unichr as integer. Returns 0 if no combining class is
defined.
bidirectional(unichr)
Returns the bidirectional class assigned to the Unicode character
unichr as string. If no such value is defined, an empty string is
returned.
category(unichr)
Returns the general category assigned to the Unicode character
unichr as string.
numeric(unichr[, default])
Returns the numeric value assigned to the Unicode character unichr
as float. If no such value is defined, default is returned, or, if
not given, ValueError is raised.
digit(unichr[, default])
Returns the digit value assigned to the Unicode character unichr as
integer. If no such value is defined, default is returned, or, if
not given, ValueError is raised.
decimal(unichr[, default])
Returns the decimal value assigned to the Unicode character unichr
as integer. If no such value is defined, default is returned, or, if
not given, ValueError is raised.
insort_left(a, x[, lo[, hi]])
Insert item x in list a, and keep it sorted assuming a is sorted.
If x is already in a, insert it to the left of the leftmost x.
Optional args lo (default 0) and hi (default len(a)) bound the
slice of a to be searched.
bisect_left(a, x[, lo[, hi]]) -> index
Return the index where to insert item x in list a, assuming a is sorted.
The return value i is such that all e in a[:i] have e < x, and all e in
a[i:] have e >= x.  So if x already appears in the list, i points just
before the leftmost x already there.
Optional args lo (default 0) and hi (default len(a)) bound the
slice of a to be searched.
insort(a, x[, lo[, hi]])
insort_right(a, x[, lo[, hi]])
Insert item x in list a, and keep it sorted assuming a is sorted.
If x is already in a, insert it to the right of the rightmost x.
Optional args lo (default 0) and hi (default len(a)) bound the
slice of a to be searched.
bisect(a, x[, lo[, hi]]) -> index
bisect_right(a, x[, lo[, hi]]) -> index
Return the index where to insert item x in list a, assuming a is sorted.
The return value i is such that all e in a[:i] have e <= x, and all e in
a[i:] have e > x.  So if x already appears in the list, i points just
beyond the rightmost x already there
Optional args lo (default 0) and hi (default len(a)) bound the
slice of a to be searched.
poll([timeout=-1[, maxevents=-1]]) -> [(fd, events), (...)]
Wait for events on the epoll file descriptor for a maximum time of timeout
in seconds (as float). -1 makes poll wait indefinitely.
Up to maxevents are returned to the caller.
unregister(fd) -> None
fd is the target file descriptor of the operation.
register(fd[, eventmask]) -> None
Registers a new fd or raises an IOError if the fd is already registered.
fd is the target file descriptor of the operation.
events is a bit set composed of the various EPOLL constants; the default
is EPOLL_IN | EPOLL_OUT | EPOLL_PRI.
The epoll interface supports all file descriptors that support poll.
modify(fd, eventmask) -> None
fd is the target file descriptor of the operation
events is a bit set composed of the various EPOLL constants
fileno() -> int
Return the epoll control file descriptor.
close() -> None
Close the epoll control file descriptor. Further operations on the epoll
object will raise an exception.
fromfd(fd) -> epoll
Create an epoll object from a given control fd.
select.epoll([sizehint=-1])
Returns an epolling object
sizehint must be a positive integer or -1 for the default size. The
sizehint is used to optimize internal data structures. It doesn't limit
the maximum number of monitored events.
Returns a polling object, which supports registering and
unregistering file descriptors, and then polling them for I/O events.
select(rlist, wlist, xlist[, timeout]) -> (rlist, wlist, xlist)
Wait until one or more file descriptors are ready for some kind of I/O.
The first three arguments are sequences of file descriptors to be waited for:
rlist -- wait until ready for reading
wlist -- wait until ready for writing
xlist -- wait for an ``exceptional condition''
If only one kind of condition is required, pass [] for the other lists.
A file descriptor is either a socket or file object, or a small integer
gotten from a fileno() method call on one of those.
The optional 4th argument specifies a timeout in seconds; it may be
a floating point number to specify fractions of seconds.  If it is absent
or None, the call will never time out.
The return value is a tuple of three lists corresponding to the first three
arguments; each contains the subset of the corresponding file descriptors
that are ready.
*** IMPORTANT NOTICE ***
On Windows and OpenVMS, only sockets are supported; on Unix, all file
descriptors can be used.
The functions in this module allow compression and decompression using the
zlib library, which is based on GNU zip.
adler32(string[, start]) -- Compute an Adler-32 checksum.
compress(string[, level]) -- Compress string, with compression level in 0-9.
compressobj([level]) -- Return a compressor object.
crc32(string[, start]) -- Compute a CRC-32 checksum.
decompress(string,[wbits],[bufsize]) -- Decompresses a compressed string.
decompressobj([wbits]) -- Return a decompressor object.
'wbits' is window buffer size and container format.
Compressor objects support compress() and flush() methods; decompressor
objects support decompress() and flush().
This module provides access to the Unicode Character Database which
defines character properties for all Unicode characters. The data in
this database is based on the UnicodeData.txt file version
5.2.0 which is publically available from ftp://ftp.unicode.org/.
The module uses the same names and symbols as defined by the
UnicodeData File Format 5.2.0 (see
http://www.unicode.org/reports/tr44/tr44-4.html).
Bisection algorithms.
This module provides support for maintaining a list in sorted order without
having to sort the list after each insertion. For long lists of items with
expensive comparison operations, this can be an improvement over the more
common approach.
This module supports asynchronous I/O on multiple file descriptors.
*** IMPORTANT NOTICE ***
On Windows and OpenVMS, only sockets are supported; on Unix, all file descriptors.
poll( [timeout] ) -> list of (fd, event) 2-tuples
Polls the set of registered file descriptors, returning a list containing 
any descriptors that have events or errors to report.
unregister(fd) -> None
Remove a file descriptor being tracked by the polling object.
modify(fd, eventmask) -> None
Modify an already registered file descriptor.
fd -- either an integer, or an object with a fileno() method returning an
      int.
events -- an optional bitmask describing the type of events to check for
register(fd [, eventmask] ) -> None
Register a file descriptor with the polling object.
fd -- either an integer, or an object with a fileno() method returning an
      int.
events -- an optional bitmask describing the type of events to check for
tanh(x)
Return the hyperbolic tangent of x.
tan(x)
Return the tangent of x.
sqrt(x)
Return the square root of x.
sinh(x)
Return the hyperbolic sine of x.
sin(x)
Return the sine of x.
rect(r, phi) -> z: complex
Convert from polar coordinates to rectangular coordinates.
polar(z) -> r: float, phi: float
Convert a complex from rectangular coordinates to polar coordinates. r is
the distance from 0 and phi the phase angle.
phase(z) -> float
Return argument, also known as the phase angle, of a complex.
log10(x)
Return the base-10 logarithm of x.
log(x[, base]) -> the logarithm of x to the given base.
If the base not specified, returns the natural logarithm (base e) of x.
isnan(z) -> bool
Checks if the real or imaginary part of z not a number (NaN)
isinf(z) -> bool
Checks if the real or imaginary part of z is infinite.
exp(x)
Return the exponential value e**x.
cosh(x)
Return the hyperbolic cosine of x.
cos(x)
Return the cosine of x.
atanh(x)
Return the inverse hyperbolic tangent of x.
atan(x)
Return the arc tangent of x.
asinh(x)
Return the inverse hyperbolic sine of x.
asin(x)
Return the arc sine of x.
acosh(x)
Return the inverse hyperbolic cosine of x.
acos(x)
Return the arc cosine of x.
This module is always available. It provides access to mathematical
functions for complex numbers.
copy() -- Return a copy of the decompression object.
flush( [length] ) -- Return a string containing any remaining
decompressed data. length, if given, is the initial size of the
output buffer.
The decompressor object can no longer be used after this call.
decompress(data, max_length) -- Return a string containing the decompressed
version of the data.
After calling this function, some of the input data may still be stored in
internal buffers for later processing.
Call the flush() method to clear these buffers.
If the max_length parameter is specified then the return value will be
no longer than max_length.  Unconsumed input data will be stored in
the unconsumed_tail attribute.
copy() -- Return a copy of the compression object.
flush( [mode] ) -- Return a string containing any remaining compressed data.
mode can be one of the constants Z_SYNC_FLUSH, Z_FULL_FLUSH, Z_FINISH; the
default value used when mode is not specified is Z_FINISH.
If mode == Z_FINISH, the compressor object can no longer be used after
calling the flush() method.  Otherwise, more data can still be compressed.
compress(data) -- Return a string containing data compressed.
After calling this function, some of the input data may still
be stored in internal buffers for later processing.
Call the flush() method to clear these buffers.
LETTE
SMAL
SYLLABL
CAPITA
LATI
EGYPTIA
HIEROGLYP
ARABI
COMPATIBILIT
MATHEMATICA
CUNEIFOR
SYMBO
FORM
CANADIA
SYLLABIC
DIGI
HANGU
GREE
LIGATUR
MUSICA
TIME
ETHIOPI
VOWE
ITALI
CYRILLI
RADICA
SANS-SERI
CIRCLE
COMBININ
FINA
SQUAR
VARIATIO
BRAILL
PATTER
RIGH
BYZANTIN
ISOLATE
ABOVE
DOUBL
KATAKAN
KANGX
NUMBE
SIGN
BELOW
LINEA
MODIFIE
TIBETA
MYANMA
CARRIE
ARROW
INITIA
WHIT
VERTICA
ABOV
COPTI
ARRO
MONGOLIA
MARK
KHME
DEVANAGAR
PARENTHESIZE
BLAC
JONGSEON
HEBRE
DRAWING
RIGHTWARD
CHOSEON
STROKE
HALFWIDT
BALINES
GEORGIA
HOOK
IDEOGRA
IDEOGRAPHI
SYMBOL
SCRIP
HEAV
FULLWIDT
EQUA
BRACKET
DOMIN
NUMERI
FRAKTU
JUNGSEON
MALAYALA
GLAGOLITI
CHARACTE
LEFTWARD
MEDIA
TELUG
BENGAL
ARMENIA
JAVANES
HIRAGAN
WEST-CRE
IDEOGRAP
BAMU
KANNAD
CHEROKE
ORIY
THRE
GUJARAT
FOUR
RUNI
SAURASHTR
TETRAGRA
THREE
DESERE
SINHAL
GURMUKH
NOTATIO
SYRIA
VOCALI
ACUTE
LEPCH
LIGH
TURKI
DOUBLE-STRUC
FIVE
TAMI
FUNCTIONA
HAMZ
TELEGRAP
EIGHT
HORIZONTA
NINE
SEVEN
DASI
KAITH
LIMB
MAKSUR
BOPOMOF
KHAROSHTH
SQUARE
HEXAGRA
PSIL
REVERSE
MONOSPAC
SAMARITA
STROK
TURNE
ZZYX
ZZYT
ZZYRX
ZZYR
ZZYP
ZZUX
ZZURX
ZZUR
ZZUP
ZZOX
ZZOP
ZZIX
ZZIT
ZZIP
ZZIEX
ZZIET
ZZIEP
ZZIE
ZZEX
ZZEP
ZZEE
ZZAX
ZZAT
ZZAP
ZZAA
ZYGOS
ZWARAKAY
ZUOX
ZUOP
ZUBUR
ZQAPH
ZLAM
ZIZ2
ZIQAA
ZINOR
ZILDE
ZIGZA
ZHYX
ZHYT
ZHYRX
ZHYR
ZHYP
ZHWE
ZHWA
ZHUX
ZHUT
ZHURX
ZHUR
ZHUP
ZHUOX
ZHUOP
ZHUO
ZHOX
ZHOT
ZHOP
ZHOO
ZHIVETE
ZHEX
ZHET
ZHEP
ZHEE
ZHAX
ZHAT
ZHAR
ZHAP
ZHAIN
ZHAA
ZETA
ZERO
ZEMLYA
ZEMLJA
ZAYN
ZAYIN
ZAYI
ZAVIYANI
ZATA
ZARQA
ZAQE
ZAMX
ZAIN
ZAEF
Z016H
Z016G
Z016F
Z016E
Z016D
Z016C
Z016B
Z016A
Z016
Z015I
Z015H
Z015G
Z015F
Z015E
Z015D
Z015C
Z015B
Z015A
Z015
Z014
Z013
Z012
Z011
Z010
Z009
Z008
Z007
Z006
Z005A
Z005
Z004A
Z004
Z003B
Z003A
Z003
Z002D
Z002C
Z002B
Z002A
Z002
Z001
YYRX
YWOO
YWII
YWAA
YUUKALEAPINTU
YURX
YUOX
YUOT
YUOP
YUDH
YUAN
YU-YEO
YU-YE
YU-U
YU-O
YU-I
YU-EO
YU-E
YU-AE
YU-A
YPSILI
YPORROI
YPOKRISIS
YPOKRISI
YPOGEGRAMMENI
YOUTHFULNESS
YOUTHFU
YORI
YOMO
YOGH
YODH
YO-YEO
YO-YAE
YO-YA
YO-O
YO-I
YO-EO
YO-AE
YO-A
YIZET
YIWN
YING
YIEX
YIET
YIEP
YIDDIS
YI-U
YFESIS
YFESI
YETIV
YESTU
YESIEUNG-SIOS
YESIEUNG-PANSIOS
YESIEUNG-MIEUM
YESIEUNG-HIEUH
YESIEUNG
YERU
YERI
YERA
YEORINHIEUH
YEO-YA
YEO-U
YEO-O
YENISE
YENAP
YELLOW
YAZZ
YAZH
YAYANNA
YATT
YATI
YATH
YASS
YASH
YARR
YANG
YAMOK
YAMAKKAN
YAKHH
YAKH
YAKASH
YAJURVEDI
YAHH
YAGN
YAGHH
YAGH
YADH
YADDH
YADD
YACH
YABH
YAARU
YAAI
YAADO
YA-YO
YA-U
YA-O
Y008
Y007
Y006
Y005
Y004
Y003
Y002
Y001A
Y001
Y-CRE
XYRX
XYEE
XYAA
XWEE
XWAA
XUOX
XSHAAYATHIYA
XIRO
XIEX
XIET
XIEP
XESTE
X008A
X008
X007
X006A
X006
X005
X004B
X004A
X004
X003
X002
X001
WYNN
WUOX
WUOP
WUNJ
WULU
WRONG
WRITIN
WREAT
WRAP
WORK
WORDSPACE
WOON
WOOL
WOODS-CRE
WOOD
WOMAN
WOLOSO
WITHOU
WINTER
WINJA
WINE
WINDU
WIND
WIGNYAN
WIGGL
WIDE-HEADE
WIANGWAAK
WIANG
WHOL
WHITE-FEATHERE
WHITE
WHEELE
WHEELCHAI
WHEEL
WHEE
WHEAT
WESTER
WEST
WELL
WEIGH
WEEN
WEDGE-TAILE
WEAPON
WAW-AYIN-RESH
WAVE
WATTO
WATER
WATE
WATCH
WASTING
WASSALLAM
WASLA
WASL
WASALLAM
WASALLA
WARNIN
WANDERER
WALL
WALK
WAITING
WAEN
WAAVU
W025
W024A
W024
W023
W022
W021
W020
W019
W018A
W018
W017A
W017
W016
W015
W014A
W014
W013
W012
W011
W010A
W010
W009A
W009
W008
W007
W006
W005
W004
W003A
W003
W002
W001
VZMET
VYRX
VURX
VULGA
VRACHY
VOWEL-CARRIE
VOLUM
VOLTAG
VOICING
VOICELES
VOICE
VOCA
VISIGOTHI
VISARGAYA
VISARGA
VISARG
VIRIAM
VIRGO
VIRGA
VIRAMA
VINE
VILLAGE
VIEX
VIEWDAT
VIET
VIEP
VIDA
VICTOR
VESTA
VESSE
VERTICALLY
VERTICALL
VERTICAL-06-06
VERTICAL-06-05
VERTICAL-06-04
VERTICAL-06-03
VERTICAL-06-02
VERTICAL-06-01
VERTICAL-06-00
VERTICAL-05-06
VERTICAL-05-05
VERTICAL-05-04
VERTICAL-05-03
VERTICAL-05-02
VERTICAL-05-01
VERTICAL-05-00
VERTICAL-04-06
VERTICAL-04-05
VERTICAL-04-04
VERTICAL-04-03
VERTICAL-04-02
VERTICAL-04-01
VERTICAL-04-00
VERTICAL-03-06
VERTICAL-03-05
VERTICAL-03-04
VERTICAL-03-03
VERTICAL-03-02
VERTICAL-03-01
VERTICAL-03-00
VERTICAL-02-06
VERTICAL-02-05
VERTICAL-02-04
VERTICAL-02-03
VERTICAL-02-02
VERTICAL-02-01
VERTICAL-02-00
VERTICAL-01-06
VERTICAL-01-05
VERTICAL-01-04
VERTICAL-01-03
VERTICAL-01-02
VERTICAL-01-01
VERTICAL-01-00
VERTICAL-00-06
VERTICAL-00-05
VERTICAL-00-04
VERTICAL-00-03
VERTICAL-00-02
VERTICAL-00-01
VERTICAL-00-00
VERTICAL
VERSICLE
VERS
VERGE
VEND
VEDE
VECTO
VAYANNA
VATHY
VASTNES
VASIS
VARY
VARIKA
VARIAN
VARIA
VARI
VAREIA
VAREI
VANE
VAMAGOMUKHA
VAMAGOMUKH
VALLEY
VAAVU
V040A
V040
V039
V038
V037A
V037
V036
V035
V034
V033A
V033
V032
V031A
V031
V030A
V030
V029A
V029
V028A
V028
V027
V026
V025
V024
V023A
V023
V022
V021
V020L
V020K
V020J
V020I
V020H
V020G
V020F
V020E
V020D
V020C
V020B
V020A
V020
V019
V018
V017
V016
V015
V014
V013
V012B
V012A
V012
V011C
V011B
V011A
V011
V010
V009
V008
V007B
V007A
V007
V006
V005
V004
V003
V002A
V002
V001I
V001H
V001G
V001F
V001E
V001D
V001C
V001B
V001A
V001
UYANNA
UUYANNA
UUUU
UUU3
UUU2
UTUKI
USSU3
USSU
USHX
USHUMX
USH2
URUS
URUDA
URUD
URI3
URANUS
UPWARDS
UPWARD
UPWARD
UPWAR
UPTURN
UPSILON
UPSILO
UPRIGH
UPPE
UPADHMANIYA
UP-POINTIN
UNMARRIE
UNIVERSA
UNITY
UNIT
UNION
UNIO
UNIFIE
UNDERTIE
UNDERLIN
UNDERDOT
UNDERBAR
UNDE
UNCI
UNASPIRATED
UNAP
UMUM
UMBRELLA
UMBRELL
UMBIN
UKRAINIA
UKARA
UKAR
UILLEANN
UIGHU
UGARITI
UDUG
UDATTA
UDATT
UDAAT
UBUFILI
UBHAYAT
UBADAMA
UATH
U042
U041
U040
U039
U038
U037
U036
U035
U034
U033
U032A
U032
U031
U030
U029A
U029
U028
U027
U026
U025
U024
U023A
U023
U022
U021
U020
U019
U018
U017
U016
U015
U014
U013
U012
U011
U010
U009
U008
U007
U006B
U006A
U006
U005
U004
U003
U002
U001
U-I-I
U-EO-EU
TZOA
TZEE
TZAA
TYPE-
TYPE-
TYPE-
TYPE-
TYPE-
TYPE-
TYPE-
TWOO
TWO-WA
TWO-LIN
TWO-HEADE
TWII
TWENTY-TWO
TWENTY-THREE
TWENTY-SIX
TWENTY-SEVEN
TWENTY-ONE
TWENTY-NINE
TWENTY-FOUR
TWENTY-FIVE
TWENTY-EIGHT
TWENTY-EIGHT
TWENTY
TWENT
TWELVE
TWELV
TWAA
TVRIDO
TVIMADU
TUUMU
TUTEYASAT
TURX
TURU
TURTLE
TURO2
TURNSTILE
TURBAN
TUOX
TUOT
TUOP
TUNNY
TUMETES
TUKWENTIS
TUGRI
TUG2
TUARE
TTUDDAG
TTUDDAAG
TTTHA
TTSU
TTSO
TTSI
TTSEE
TTSE
TTSA
TTHWE
TTHOO
TTHO
TTHI
TTHE
TTHAA
TTEHEH
TTEHE
TTEH
TTEE
TTAYANNA
TTAA
TSWE
TSWA
TSSE
TSHUGS
TSHOOK
TSHOO
TSHES
TSHEG
TSHE
TSHE
TSHA
TSERE
TSADI
TSAD
TSAADIY
TSAA
TRYBLIO
TRUTH
TRUNK
TRUNCATE
TRUE
TRUCK
TROMIKOSYNAGMA
TROMIKOPSIFISTON
TROMIKOPARAKALESMA
TROMIKON
TROMIKO
TROMIKOLYGISMA
TROKUTAST
TROEZENIA
TRITO
TRITIMORION
TRISIMOU
TRISEME
TRIPOD
TRIPLI
TRIPL
TRIO
TRIISAP
TRIGRAMMO
TRIGRA
TRIGORGON
TRIFONIAS
TRIFOLIAT
TRICOLON
TRIANGULA
TRIANGLE-ROUN
TRIANGLE-HEADE
TRIANGLE
TRIANGL
TRIA
TRESILLO
TREMOLO-3
TREMOLO-2
TREMOLO-1
TREE
TREADING
TRAPEZIUM
TRANSVERSA
TRANSPOSITIO
TRANSMISSION
TRANSMISSIO
TRAFFIC
TRAD
TRACK
TOURNOI
TOTA
TORTOIS
TORCULUS
TORCULU
TOPBAR
TOP-LIGHTE
TOOTH
TONOS
TONGUE
TONG
TONE-6
TONE-5
TONE-4
TONE-3
TONE-2
TONE-1
TONE
TONA
TOLONG
TOGETHER
TOANDAKHIAT
TLHWE
TLHU
TLHOO
TLHO
TLHI
TLHEE
TLHE
TLHA
TLEE
TIWN
TIWA
TITLO
TIRYAK
TIRT
TIRONIA
TIPPI
TIPEHA
TINY
TINNE
TINAGMA
TIMES
TIME
TILDE
TILD
TIKEUT-THIEUTH
TIKEUT-SIOS-KIYEOK
TIKEUT-SIOS
TIKEUT-RIEUL
TIKEUT-PIEUP
TIKEUT-MIEUM
TIKEUT-KIYEOK
TIKEUT-CIEUC
TIKEUT-CHIEUCH
TIKEUT
TIKEU
TIGH
TIGER
TIFINAG
TIEX
TIEP
TICK
TIARA
THYOO
THWOO
THWO
THWII
THWI
THWEE
THWAA
THWA
THUR
THURISA
THUNG
THUNDERSTORM
THUNDER
THUNDE
THROUGH
THROUG
THREE-PER-E
THREE-LIN
THREE-
THREAD
THOUSAND
THOUSAND
THOUSAN
THOU
THORN
THOR
THONG
THOA
THIUTH
THITA
THIRTY-SECON
THIRTY-ONE
THIRTY
THIRT
THIRTEEN
THIRTEE
THIRDS
THIRD
THIRD
THIR
THII
THIGH
THIEUT
THEY
THETHE
THETH
THETA
THET
THESPIA
THESEOS
THESEO
THERMODYNAMIC
THEREFORE
THER
THEMATISMO
THEMA
THEM
THEH
THEE
THAW
THANTHAKHAT
THANNA
THAN
THAL
THAHAN
THAAN
THAALU
TH-CRE
TEXT
TEVIR
TETRASIMOU
TETRASEME
TETRAPLI
TETRAFONIAS
TETH
TETARTO
TETARTIMORION
TESSERA
TESSER
TESSARO
TERMINATOR
TENUTO
TENU
TENTH
TENT
TENG
TEMPU
TELU
TELOU
TELISH
TELEPHONE
TELEPHON
TELEIA
TEIWS
TEGEH
TEDUNG
TEARDROP-SPOKE
TEARDROP-SHANKE
TEARDROP-BARBE
TE-U
TCHEHEH
TCHEHE
TCHEH
TCHE
TCHE
TAWELLEME
TAWA
TAVIYANI
TAURUS
TATWEEL
TATWEE
TATTOOE
TARUNG
TAPER
TANNE
TAMING
TALL
TALING
TALIN
TALENTS
TALEN
TAKHALLUS
TAKE
TAK4
TAISYOU
TAILLES
TAIL
TAGBANW
TAGALO
TACK
TABULATION
TABLE
TAALUJ
TAAI
TAAF
TA-ROL
T036
T035
T034
T033A
T033
T032A
T032
T031
T030
T029
T028
T027
T026
T025
T024
T023
T022
T021
T020
T019
T018
T017
T016A
T016
T015
T014
T013
T012
T011A
T011
T010
T009A
T009
T008A
T008
T007A
T007
T006
T005
T004
T003A
T003
T002
T001
SZWG
SZWA
SZEE
SZAA
SYRX
SYRMATIKI
SYRMA
SYOUWA
SYNEVMA
SYNDESMO
SYNCHRONOU
SYNAGM
SYNAFI
SYMMETRY
SYMMETRI
SYMBOL-9
SYMBOL-8
SYMBOL-7
SYMBOL-6
SYMBOL-54
SYMBOL-53
SYMBOL-52
SYMBOL-51
SYMBOL-50
SYMBOL-5
SYMBOL-49
SYMBOL-48
SYMBOL-47
SYMBOL-45
SYMBOL-43
SYMBOL-42
SYMBOL-40
SYMBOL-4
SYMBOL-39
SYMBOL-38
SYMBOL-37
SYMBOL-36
SYMBOL-32
SYMBOL-30
SYMBOL-3
SYMBOL-29
SYMBOL-27
SYMBOL-26
SYMBOL-25
SYMBOL-24
SYMBOL-23
SYMBOL-22
SYMBOL-21
SYMBOL-20
SYMBOL-2
SYMBOL-19
SYMBOL-18
SYMBOL-17
SYMBOL-16
SYMBOL-15
SYMBOL-14
SYMBOL-13
SYMBOL-12
SYMBOL-11
SYMBOL-10
SYMBOL-1
SYLOT
SWUN
SWORDS
SWORD
SWOO
SWII
SWEET
SWAS
SWAPPING
SWAA
SVAST
SVARITA
SVARIT
SUSPENSIO
SURX
SURROUND
SURROUN
SURFAC
SURE
SURANG
SUR9
SUPRALINEA
SUPERVISE
SUPERSET
SUPERSE
SUPERSCRIP
SUPERIMPOSE
SUPERFIXE
SUOX
SUOP
SUNG
SUNDANES
SUMMER
SUMMATION
SUMMATIO
SUMASH
SUKUN
SUKU
SUKU
SUITABLE
SUIT
SUHUR
SUD2
SUCCEEDS
SUCCEED
SUCCEED
SUCCEE
SUBUNIT
SUBSTITUTIO
SUBSTITUTE
SUBSTITUT
SUBSET
SUBSE
SUBSCRIP
SUBPUNCTIS
SUBLINEA
SUBJOINE
SUBJECT
SUBITO
SUBGROUP
SUBGROU
STWA
STUDY
STROKES
STROKE
STROKE-9
STROKE-8
STROKE-7
STROKE-6
STROKE-5
STROKE-4
STROKE-3
STROKE-2
STROKE-11
STROKE-10
STROKE-1
STRIPE
STRIKETHROUGH
STRIDE
STRICTL
STRETCHE
STRES
STRENGTH
STRATIA
STRAINER
STRAIGHTNESS
STRAIGH
STRAIF
STRAGGISMATA
STOVE
STOPPING
STOPPAGE
STOP
STONE
STOCK
STIMME
STIL
STIL
STIGMA
STEP
STEM
STEAM
STAVROU
STAVROS
STAVRO
STAUROS
STATERS
STAR
STARK
STAR
STANDSTILL
STANDAR
STAND
STAN
STALLION
STAFF
STAF
STACCATO
STACCATISSIMO
SSYX
SSYT
SSYRX
SSYR
SSYP
SSUX
SSUT
SSUP
SSOX
SSOT
SSOP
SSIX
SSIT
SSIP
SSIEX
SSIEP
SSIE
SSHE
SSEX
SSEP
SSEE
SSAX
SSAT
SSAP
SSANGYEORINHIEUH
SSANGTIKEUT-PIEUP
SSANGTIKEUT
SSANGTHIEUTH
SSANGSIOS-TIKEUT
SSANGSIOS-PIEUP
SSANGSIOS-KIYEOK
SSANGSIOS
SSANGRIEUL-KHIEUKH
SSANGRIEUL
SSANGPIEUP
SSANGNIEUN
SSANGMIEUM
SSANGKIYEOK
SSANGIEUNG
SSANGHIEUH
SSANGCIEUC-HIEUH
SSANGCIEUC
SSANGARAEA
SSAA
SQUIS
SQUIRRE
SQUIGGL
SQUA
SQUARES
SQUARED
SQUARE
SPWA
SPUNG
SPROUT
SPRINGS
SPRING
SPRECHGESAN
SPOT
SPOON
SPLITTIN
SPIRITU
SPIRIT
SPIRI
SPIRANT
SPIRAL
SPIDER
SPICE
SPHERICA
SPESMIL
SPEECH
SPECIAL
SPEAR
SPATHI
SPARKLE
SPAD
SPACIN
SOWIL
SOUTH-SLAVE
SOUT
SOURCE
SOUND
SOUN
SOUNAP
SONG
SOLIDUS
SOLIDU
SOGDIA
SOFTWARE-FUNCTIO
SOCIETY
SOCCE
SNOWMAN
SNOWMA
SNOWFLAKE
SNOW
SNOUT
SNOU
SNAKE
SNAK
SMILIN
SMILE
SMEAR
SMAS
SMALLE
SMALL
SLUR
SLOWLY
SLOVO
SLOPIN
SLOPE
SLING
SLIDING
SLICE
SLAVONI
SLAVE
SLASH
SLAS
SLANTE
SKWA
SKUL
SKLIRO
SKIN
SKIER
SKEWE
SKATE
SIXTY-FOURT
SIXTY
SIXT
SIXTHS
SIXTH
SIXTH
SIXTEENTHS
SIXTEENTH
SIXTEENT
SIXTEEN
SIXTEE
SIX-STRIN
SIX-PER-E
SIX-LIN
SITE
SIRINGU
SIOS-THIEUTH
SIOS-SSANGSIOS
SIOS-RIEUL
SIOS-PIEUP-KIYEOK
SIOS-PHIEUPH
SIOS-PANSIOS
SIOS-NIEUN
SIOS-MIEUM
SIOS-KHIEUKH
SIOS-KAPYEOUNPIEUP
SIOS-IEUNG
SIOS-HIEUH
SIOS-CIEUC
SIOS-CHIEUCH
SINKING
SINGLE-LIN
SINGLE
SINGL
SINGAAT
SINDH
SIMPLIFIE
SIMILAR
SIMILA
SIMANSI
SIMA
SILK
SILIQU
SILA3
SIKI
SIK2
SIGNS
SIGMA
SIGM
SIGE
SIG4
SIDEWAY
SICKNESS
SICKLE
SHYX
SHYT
SHYRX
SHYR
SHYP
SHYE
SHYA
SHWOY
SHWOO
SHWO
SHWII
SHWI
SHWE
SHWAA
SHWA
SHUX
SHUT
SHURX
SHUR
SHUP
SHUOX
SHUOP
SHUO
SHUFFL
SHUBUR
SHU2
SHTAPIC
SHTA
SHRINE
SHOY
SHOX
SHOULDERE
SHOT
SHORTS
SHORT
SHORTENER
SHORT-TWIG-YR
SHORT-TWIG-TY
SHORT-TWIG-SO
SHORT-TWIG-OS
SHORT-TWIG-NAU
SHORT-TWIG-MAD
SHORT-TWIG-HAGAL
SHORT-TWIG-BJARKA
SHORT-TWIG-A
SHORT
SHOR
SHOP
SHOOT
SHOO
SHOG
SHOA
SHIYYAALAA
SHITA
SHIT
SHIR
SHIP
SHINT
SHINIG
SHIN
SHIMA
SHIM
SHIM
SHIIN
SHII
SHIF
SHIELD
SHID
SHHA
SHEX
SHEVA
SHEUX
SHET
SHESHLAM
SHESHIG
SHESHI
SHESH2
SHESH
SHEQE
SHEP
SHEN
SHELL
SHEL
SHELF
SHEI
SHEG9
SHEEP
SHEENU
SHEEN
SHEE
SHEE
SHE-GOAT
SHCHA
SHAY
SHAX
SHAVIYANI
SHAVIA
SHAT
SHARU
SHAR
SHARP
SHAR
SHARA
SHAR2
SHAR
SHAPING
SHAPES
SHAP
SHANG
SHAN
SHAMROCK
SHALSHELET
SHAKTI
SHADOWE
SHADE
SHADDA
SHADD
SHAD
SHAB6
SHAA
SHA6
SHA3
SEXTUL
SEXTILE
SEXTAN
SEVERANCE
SEVENTY
SEVENT
SEVENTH
SEVENTEEN
SEVENTEE
SEVE
SEUX
SESTERTIU
SESQUIQUADRATE
SESAM
SERVIC
SERIFS
SERIF
SEPTEMBER
SEPARATOR
SEPARATO
SENTO
SENTI
SEMUNCI
SEMKATH
SEMK
SEMIVOWE
SEMISOF
SEMISEXTILE
SEMIMINIM
SEMIDIREC
SEMICOLON
SEMICOLO
SEMICIRCULA
SEMICIRCL
SEMIBREVI
SEMI-VOICE
SELF
SELECTOR-99
SELECTOR-98
SELECTOR-97
SELECTOR-96
SELECTOR-95
SELECTOR-94
SELECTOR-93
SELECTOR-92
SELECTOR-91
SELECTOR-90
SELECTOR-9
SELECTOR-89
SELECTOR-88
SELECTOR-87
SELECTOR-86
SELECTOR-85
SELECTOR-84
SELECTOR-83
SELECTOR-82
SELECTOR-81
SELECTOR-80
SELECTOR-8
SELECTOR-79
SELECTOR-78
SELECTOR-77
SELECTOR-76
SELECTOR-75
SELECTOR-74
SELECTOR-73
SELECTOR-72
SELECTOR-71
SELECTOR-70
SELECTOR-7
SELECTOR-69
SELECTOR-68
SELECTOR-67
SELECTOR-66
SELECTOR-65
SELECTOR-64
SELECTOR-63
SELECTOR-62
SELECTOR-61
SELECTOR-60
SELECTOR-6
SELECTOR-59
SELECTOR-58
SELECTOR-57
SELECTOR-56
SELECTOR-55
SELECTOR-54
SELECTOR-53
SELECTOR-52
SELECTOR-51
SELECTOR-50
SELECTOR-5
SELECTOR-49
SELECTOR-48
SELECTOR-47
SELECTOR-46
SELECTOR-45
SELECTOR-44
SELECTOR-43
SELECTOR-42
SELECTOR-41
SELECTOR-40
SELECTOR-4
SELECTOR-39
SELECTOR-38
SELECTOR-37
SELECTOR-36
SELECTOR-35
SELECTOR-34
SELECTOR-33
SELECTOR-32
SELECTOR-31
SELECTOR-30
SELECTOR-3
SELECTOR-29
SELECTOR-28
SELECTOR-27
SELECTOR-26
SELECTOR-256
SELECTOR-255
SELECTOR-254
SELECTOR-253
SELECTOR-252
SELECTOR-251
SELECTOR-250
SELECTOR-25
SELECTOR-249
SELECTOR-248
SELECTOR-247
SELECTOR-246
SELECTOR-245
SELECTOR-244
SELECTOR-243
SELECTOR-242
SELECTOR-241
SELECTOR-240
SELECTOR-24
SELECTOR-239
SELECTOR-238
SELECTOR-237
SELECTOR-236
SELECTOR-235
SELECTOR-234
SELECTOR-233
SELECTOR-232
SELECTOR-231
SELECTOR-230
SELECTOR-23
SELECTOR-229
SELECTOR-228
SELECTOR-227
SELECTOR-226
SELECTOR-225
SELECTOR-224
SELECTOR-223
SELECTOR-222
SELECTOR-221
SELECTOR-220
SELECTOR-22
SELECTOR-219
SELECTOR-218
SELECTOR-217
SELECTOR-216
SELECTOR-215
SELECTOR-214
SELECTOR-213
SELECTOR-212
SELECTOR-211
SELECTOR-210
SELECTOR-21
SELECTOR-209
SELECTOR-208
SELECTOR-207
SELECTOR-206
SELECTOR-205
SELECTOR-204
SELECTOR-203
SELECTOR-202
SELECTOR-201
SELECTOR-200
SELECTOR-20
SELECTOR-2
SELECTOR-199
SELECTOR-198
SELECTOR-197
SELECTOR-196
SELECTOR-195
SELECTOR-194
SELECTOR-193
SELECTOR-192
SELECTOR-191
SELECTOR-190
SELECTOR-19
SELECTOR-189
SELECTOR-188
SELECTOR-187
SELECTOR-186
SELECTOR-185
SELECTOR-184
SELECTOR-183
SELECTOR-182
SELECTOR-181
SELECTOR-180
SELECTOR-18
SELECTOR-179
SELECTOR-178
SELECTOR-177
SELECTOR-176
SELECTOR-175
SELECTOR-174
SELECTOR-173
SELECTOR-172
SELECTOR-171
SELECTOR-170
SELECTOR-17
SELECTOR-169
SELECTOR-168
SELECTOR-167
SELECTOR-166
SELECTOR-165
SELECTOR-164
SELECTOR-163
SELECTOR-162
SELECTOR-161
SELECTOR-160
SELECTOR-16
SELECTOR-159
SELECTOR-158
SELECTOR-157
SELECTOR-156
SELECTOR-155
SELECTOR-154
SELECTOR-153
SELECTOR-152
SELECTOR-151
SELECTOR-150
SELECTOR-15
SELECTOR-149
SELECTOR-148
SELECTOR-147
SELECTOR-146
SELECTOR-145
SELECTOR-144
SELECTOR-143
SELECTOR-142
SELECTOR-141
SELECTOR-140
SELECTOR-14
SELECTOR-139
SELECTOR-138
SELECTOR-137
SELECTOR-136
SELECTOR-135
SELECTOR-134
SELECTOR-133
SELECTOR-132
SELECTOR-131
SELECTOR-130
SELECTOR-13
SELECTOR-129
SELECTOR-128
SELECTOR-127
SELECTOR-126
SELECTOR-125
SELECTOR-124
SELECTOR-123
SELECTOR-122
SELECTOR-121
SELECTOR-120
SELECTOR-12
SELECTOR-119
SELECTOR-118
SELECTOR-117
SELECTOR-116
SELECTOR-115
SELECTOR-114
SELECTOR-113
SELECTOR-112
SELECTOR-111
SELECTOR-110
SELECTOR-11
SELECTOR-109
SELECTOR-108
SELECTOR-107
SELECTOR-106
SELECTOR-105
SELECTOR-104
SELECTOR-103
SELECTOR-102
SELECTOR-101
SELECTOR-100
SELECTOR-10
SELECTOR-1
SELECTO
SEISMA
SEISM
SEGOL
SEGNO
SEGMENT
SEENU
SEEN
SECTOR
SECTION
SECTIO
SECRET
SECOND
SEBATBEI
SEAL
SEAGUL
SDON
SCWA
SCRUPLE
SCRIPT
SCREEN
SCREE
SCORPIUS
SCISSORS
SCHWA
SCHW
SCHROEDER
SCHOOL
SCHOLAR
SCHEM
SCANDICUS
SCANDICU
SCALES
SBRU
SAYIS
SAYANNA
SAXIMATA
SAWAN
SAUIL
SATURN
SATKAANKUU
SATKAAN
SASAK
SARI
SAPA
SANYOOG
SANYAK
SANTIIMU
SANNYA
SANGA2
SANAH
SAMYO
SAMPI
SAMPHAO
SAMKA
SAMEKH
SAMEK
SAMBA
SALTIRE
SALTILLO
SALT
SALLALLAHO
SALL
SALA
SALA
SAKOT
SAJDAH
SAILBOAT
SAIL
SAIKURU
SAGITTARIUS
SAGA
SAFHA
SADHE
SADE
SACRIFICIA
SAAI
SAADHU
SA-I
S046
S045
S044
S043
S042
S041
S040
S039
S038
S037
S036
S035A
S035
S034
S033
S032
S031
S030
S029
S028
S027
S026B
S026A
S026
S025
S024
S023
S022
S021
S020
S019
S018
S017A
S017
S016
S015
S014B
S014A
S014
S013
S012
S011
S010
S009
S008
S007
S006A
S006
S005
S004
S003
S002A
S002
S001
S-SHAPE
RYRX
RWOO
RWII
RWEE
RWAHA
RWAA
RUUBURU
RUSI
RURX
RUPII
RUPE
RUOX
RUOP
RUNOUT
RUMA
RULE-DELAYED
RULE
RUKKAKHA
RUIS
RTHAN
RTAGS
RTAG
RRYX
RRYT
RRYRX
RRYR
RRYP
RRUX
RRUT
RRURX
RRUR
RRUP
RRUOX
RRUO
RROX
RROT
RROP
RREX
RRET
RREP
RREH
RRAX
ROUNDE
ROUND-TIPPE
ROTUNDA
ROTATE
ROSH
ROSETTE
ROOT
ROOK
ROOF
ROMA
ROBAT
ROAR
RNYIN
RNOON
RNOO
RIVER
RITUAL
RITTORU
RITSI
RISIN
RISH
RIRA
RING
RINFORZANDO
RIKRIK
RIGVEDI
RIGHTWARDS
RIGHTHAN
RIGHT-TO-LEF
RIGHT-SID
RIGHT-SHADOWE
RIGHT-SHADE
RIGHT-POINTIN
RIGHT-HAN
RIGHT-FACIN
RIGHT
RIEUL-YESIEUNG
RIEUL-YEORINHIEUH-HIEUH
RIEUL-YEORINHIEUH
RIEUL-TIKEUT-HIEUH
RIEUL-TIKEUT
RIEUL-THIEUTH
RIEUL-SSANGTIKEUT
RIEUL-SSANGSIOS
RIEUL-SSANGPIEUP
RIEUL-SSANGKIYEOK
RIEUL-SIOS
RIEUL-PIEUP-TIKEUT
RIEUL-PIEUP-SIOS
RIEUL-PIEUP-PHIEUPH
RIEUL-PIEUP-HIEUH
RIEUL-PIEUP
RIEUL-PHIEUPH
RIEUL-PANSIOS
RIEUL-NIEUN
RIEUL-MIEUM-SIOS
RIEUL-MIEUM-KIYEOK
RIEUL-MIEUM-HIEUH
RIEUL-MIEUM
RIEUL-KIYEOK-SIOS
RIEUL-KIYEOK-HIEUH
RIEUL-KIYEOK
RIEUL-KAPYEOUNPIEUP
RIEUL-HIEUH
RIEUL-CIEUC
RIEU
RIEL
RIEE
RICEM
RICE
RHOTI
RGYINGS
RGYAN
REVOLUTION
REVMA
REVIA
REVERSED
REVERS
REUX
RETURN
RETUR
RETROFLE
RETREAT
RESUPINUS
RESTRICTE
REST
RESPONSE
RESOURCE
RESOLUTION
RESISTANCE
RESIDENCE
RERENGGAN
REREKAN
REPRESENT
REPLACEMEN
REPEATE
REPEAT
REPEA
REPA
RENTOGEN
REMU
RELIGION
RELEASE
RELATIONA
RELATION
RELAA
REJAN
REGISTERE
REFERENC
REDUPLICATION
RECYCLIN
RECYCLE
RECTILINEA
RECTANGULA
RECTANGLE
RECTANGL
RECORDIN
RECORDER
RECOR
RECEPTIV
REAHMUK
REACH
RBAS
RAYS
RAYANNA
RATIO
RATHA
RATH
RATA
RASWADI
RASOU
RASHA
RAPISMA
RANG
RANA
RAMBAT
RAKHANG
RAISE
RAIN
RAID
RAIDA
RAHMATULLA
RAFE
RADIOACTIV
RAAI
R029
R028
R027
R026
R025
R024
R023
R022
R021
R020
R019
R018
R017
R016A
R016
R015
R014
R013
R012
R011
R010A
R010
R009
R008
R007
R006
R005
R004
R003B
R003A
R003
R002A
R002
R001
R-CRE
QYRX
QYEE
QYAA
QWEE
QWAA
QUUV
QUSHSHAYA
QURX
QUOX
QUOT
QUOTATIO
QUOT
QUOP
QUINDICESIM
QUINCUNX
QUINARIU
QUILL
QUESTIONE
QUESTION
QUESTIO
QUEEN
QUBUTS
QUATERNIO
QUARTERS
QUARTER
QUARTER
QUARTE
QUANTIT
QUADRUPL
QUADRANT
QUADRAN
QUAD
QOPH
QOPA
QITSA
QIEX
QIET
QIEP
QHWI
QHWEE
QHWE
QHWAA
QHWA
QHEE
QHAA
QETANA
QATAN
QARNE
QAPH
QAMATS
QAMAT
QAIRTHRA
QADMA
QAAI
QAAFU
QAAF
Q007
Q006
Q005
Q004
Q003
Q002
Q001
PYRX
PWOY
PWOO
PWII
PWEE
PWAA
PUSHPIKA
PUSHIN
PURX
PURITY
PUOX
PUOP
PUNG
PUNCTUATION
PUNCTUATIO
PUMP
PUAE
PTHAH
PSIFISTOSYNAGMA
PSIFISTOPARAKALESMA
PSIFISTO
PSIFISTOLYGISMA
PROVE
PROTOVARY
PROTO
PROSGEGRAMMENI
PROPORTIONA
PROPORTION
PROPERT
PROPELLE
PROOF
PROLONGE
PROLATION
PROJECTIVE
PROJECTION
PROGRESS
PROFOUND
PRODUCT
PRODUC
PRIVATE
PRISHTHAMATR
PRINT
PRIN
PRIME
PRIM
PREVIOU
PRESENTATIO
PRESCRIPTIO
PREPONDERANCE
PRENKHA
PREFAC
PRECEDIN
PRECEDES
PRECEDE
PRECEDE
PRECEDE
PRECED
PRAM-PII
PRAM-PI
PRAM-MUOY
PRAM-MUO
PRAM-BUON
PRAM-BUO
PRAM-BEI
PRAM-BE
PRAM
POWER
POWER
POUN
POSTPOSITIO
POSTA
POSSESSION
PORRECTUS
PORRECTU
PONDO
POLE
POKRYTIE
POKOJI
POINTO
POINTER
POINTE
POINT
POIN
POETR
POETI
PODATUS
PNEUMATA
PLUTO
PLUS-MINU
PLUS
PLUME
PLUM
PLUK
PLOW
PLOPHU
PLETHRON
PLASTICS
PLANE
PLAN
PLANC
PLAK
PLAGIO
PLACEHOLDE
PLAC
PIZZICATO
PIWR
PITCHFORK
PITCHFOR
PISELEH
PISCES
PIRIG
PIRI
PIPING
PINWHEE
PILCRO
PIKURU
PIKO
PIEX
PIEUP-THIEUTH
PIEUP-SSANGSIOS
PIEUP-SIOS-TIKEUT
PIEUP-SIOS-THIEUTH
PIEUP-SIOS-PIEUP
PIEUP-SIOS-KIYEOK
PIEUP-SIOS-CIEUC
PIEUP-RIEUL-PHIEUPH
PIEUP-RIEUL
PIEUP-NIEUN
PIEUP-MIEUM
PIEUP-KHIEUKH
PIEUP-CIEUC
PIEUP-CHIEUCH
PIEU
PIEP
PIECE
PICK
PIASUTORU
PIASM
PIANO
PHWA
PHUTHAO
PHUNG
PHRASE
PHOENICIA
PHOA
PHNAE
PHINTHU
PHILIPPIN
PHIEUPH-THIEUTH
PHIEUPH-SIOS
PHIEUPH-PIEUP
PHIEUPH-HIEUH
PHIEUP
PHEE
PHARYNGEA
PHAR
PHAN
PHAM
PHAISTO
PHAGS-P
PHAARKAA
PHAA
PEUX
PETASTOKOUFISMA
PETASTI
PETASMA
PETALLE
PESO
PESH2
PESET
PERTH
PERSPECTIVE
PERSON
PERSO
PERSIA
PERPENDICULAR
PERPENDICULA
PERMANEN
PERISPOMENI
PERISPOMEN
PERFECTU
PERFECTA
PERFECT
PERCUSSIVE
PERCEN
PEPET
PEPE
PEORT
PENTASEME
PENTAGON
PENSU
PENN
PENIHI
PENGKAL
PENETRATION
PENCIL
PELASTON
PELASTO
PEITH
PEHEH
PEHE
PEEZI
PEEP
PEDESTRIAN
PEDESTAL
PEDESTA
PEDA
PEACE
PEAC
PAZER
PAYEROK
PAYANNA
PAWN
PAVIYANI
PATTERN
PATHAMASAT
PATAK
PATAH
PASUQ
PASSIVE-PULL-UP-OUTPU
PASSIVE-PULL-DOWN-OUTPU
PASHTA
PASEQ
PARTNERSHI
PARTIALLY-RECYCLE
PARTIA
PARTHIA
PARICHON
PARESTIGMENO
PAREREN
PARENTHESIS
PARENTHESI
PARAPHRAS
PARALLELOGRAM
PARALLEL
PARALLE
PARAKLITIKI
PARAKLITIK
PARAKALESM
PARAGRAPHOS
PARAGRAPH
PARAGRAP
PARA
PAPYRUS
PAPE
PANYUKU
PANYIKU
PANYECEK
PANYANGGA
PANYAKRA
PANTI
PANSIOS-PIEUP
PANSIOS-KAPYEOUNPIEUP
PANOLONG
PANGWISAD
PANGRANGKEP
PANGLAYAR
PANGKON
PANGKAT
PANGHULU
PANG
PANEULEUNG
PANAELAENG
PAMUNGKAH
PAMUDPOD
PAMPHYLIA
PAMINGKAL
PAMEPET
PAMENENG
PAMADA
PAMAAEH
PALUTA
PALOCHKA
PALLAWA
PALLAS
PALAUN
PALATALIZE
PALATALIZATION
PALATA
PAIYANNOI
PAIRTHRA
PAIRE
PAHLAV
PADM
PACKING
PAATU
PAASENTO
PAAI
PAA-PILLA
P011
P010
P009
P008
P007
P006
P005
P004
P003A
P003
P002
P001A
P001
OYRANISM
OYANNA
OXIA
OXEIA
OXEI
OVERRIDE
OVERLON
OVERLINE
OVERLAY
OVERLAPPIN
OVERLAID
OVERBAR
OUTLINE
OUTLINE
OUTE
OUNKI
OUNC
OTTAV
OTHALA
OTHAL
OSMANY
ORTHOGONA
ORTHODO
ORNAT
ORNAMENT
ORNAMEN
ORKHO
ORIGINA
ORIGIN
ORDINA
ORCHID
OPTIO
OPPRESSION
OPPOSITION
OPPOSIN
OPPOSE
OPERATOR
OPERATO
OPENIN
OPEN-P
OPEN-OUTLINE
OPEN-HEADE
OPEN-CIRCUIT-OUTPU
OOZE
OOYANNA
OOMU
OOBOOFILI
ONSU
ONKAR
ONESELF
ONE-WA
ONE-LIN
ONAP
OMISSIO
OMICRON
OMICRO
OMEGA
OMEG
OMALON
OLIVE
OLIGO
OKARA
OKAR
OJIBWA
OJEON
OGONEK
OGONE
OGHA
OCTOBER
OCCLUSION
OBSTRUCTION
OBOL
OBOFILI
OBLIQU
OBJEC
OBELUS
OBELOS
OABOAFILI
O051
O050B
O050A
O050
O049
O048
O047
O046
O045
O044
O043
O042
O041
O040
O039
O038
O037
O036D
O036C
O036B
O036A
O036
O035
O034
O033A
O033
O032
O031
O030A
O030
O029A
O029
O028
O027
O026
O025A
O025
O024A
O024
O023
O022
O021
O020A
O020
O019A
O019
O018
O017
O016
O015
O014
O013
O012
O011
O010C
O010B
O010A
O010
O009
O008
O007
O006F
O006E
O006D
O006C
O006B
O006A
O006
O005A
O005
O004
O003
O002
O001A
O001
O-YE
O-O-I
NZYX
NZYT
NZYRX
NZYR
NZYP
NZUX
NZURX
NZUR
NZUP
NZUOX
NZUO
NZOX
NZOP
NZIX
NZIT
NZIP
NZIEX
NZIEP
NZIE
NZEX
NZAX
NZAT
NZAP
NYWA
NYUX
NYUT
NYUP
NYUOX
NYUOP
NYUO
NYOX
NYOT
NYOP
NYOO
NYOA
NYJA
NYIX
NYIT
NYIP
NYIN-DO
NYIEX
NYIET
NYIEP
NYIE
NYEH
NYEE
NYCA
NYAA
NWOO
NWII
NWAA
NUUN
NUTILLU
NURX
NUOX
NUOP
NUNUZ
NUNU
NUNG
NUNAVU
NUNAVI
NUMER
NUMERATO
NUMERA
NUMBER
NULL
NUKTA
NUENG
NUBIA
NUAE
NU11
NU022A
NU022
NU021
NU020
NU019
NU018A
NU018
NU017
NU016
NU015
NU014
NU013
NU012
NU011A
NU011
NU010A
NU010
NU009
NU008
NU007
NU006
NU005
NU004
NU003
NU002
NU001
NTUU
NTEE
NSHA
NRYX
NRYT
NRYRX
NRYR
NRYP
NRUX
NRUT
NRURX
NRUR
NRUP
NROX
NROP
NREX
NRET
NREP
NRAX
NRAT
NRAP
NOVEMBER
NOTTO
NOTES
NOTEHEAD
NOTEHEA
NOTE
NOTCHE
NOTCH
NOSE
NORTHWES
NORT
NORMA
NOONU
NONFORKING
NON-JOINER
NON-BREAKIN
NOMINA
NOKHUK
NODE
NO-BREA
NNNA
NNGOO
NNGO
NNGII
NNGI
NNGAA
NNGA
NL020
NL019
NL018
NL017A
NL017
NL016
NL015
NL014
NL013
NL012
NL011
NL010
NL009
NL008
NL007
NL006
NL005A
NL005
NL004
NL003
NL002
NL001
NJYX
NJYT
NJYRX
NJYR
NJYP
NJUX
NJURX
NJUR
NJUP
NJUOX
NJUO
NJUAE
NJOX
NJOT
NJOP
NJOO
NJIX
NJIT
NJIP
NJIEX
NJIET
NJIEP
NJIE
NJEE
NJAEMLI
NJAEM
NISAG
NIRUGU
NINTH
NINETY
NINET
NINETEEN
NINETEE
NINDA2
NINDA
NIKHAHIT
NIKAHIT
NIHSHVASA
NIGIDAMIN
NIGIDAESH
NIGHT
NIGGAHITA
NIEX
NIEUN-TIKEUT
NIEUN-THIEUTH
NIEUN-SIOS
NIEUN-RIEUL
NIEUN-PIEUP
NIEUN-PANSIOS
NIEUN-KIYEOK
NIEUN-HIEUH
NIEUN-CIEUC
NIEUN-CHIEUCH
NIEU
NIEP
NHUE
NHJA
NGYE
NGVE
NGUOX
NGUOT
NGUO
NGOX
NGOU
NGOT
NGOP
NGON
NGOEH
NGOE
NGKWAEN
NGKA
NGIEX
NGIEP
NGIE
NGGU
NGGOO
NGGO
NGGI
NGGEN
NGGEE
NGGE
NGEX
NGEP
NGEN
NGEADAL
NGAX
NGAT
NGAP
NGAN
NGAI
NGAAI
NEWLINE
NEUTRA
NEUTER
NESTE
NEQUDAA
NEPTUNE
NENANO
NEITHE
NEGATIV
NEGATIO
NEGATE
NEBENSTIMME
NDUX
NDUT
NDURX
NDUR
NDUP
NDOX
NDOT
NDOP
NDOO
NDOL
NDIX
NDIT
NDIP
NDIEX
NDIE
NDEX
NDEP
NDEE
NDAX
NDAT
NDAP
NDAA
NBYX
NBYT
NBYRX
NBYR
NBYP
NBUX
NBUT
NBURX
NBUR
NBUP
NBOX
NBOT
NBOP
NBIX
NBIT
NBIP
NBIEX
NBIEP
NBIE
NBAX
NBAT
NBAP
NAYANNA
NAXIA
NAUTHS
NAUDI
NATURA
NATIONA
NASKAP
NASHI
NASALIZATIO
NARRO
NANGMONTHO
NAND
NANA
NAME
NAM2
NAIR
NAGR
NAGAR
NAGA
NABLA
NAASIKYAYA
NAAKSIKYAYA
NAAI
N042
N041
N040
N039
N038
N037A
N037
N036
N035A
N035
N034A
N034
N033A
N033
N032
N031
N030
N029
N028
N027
N026
N025A
N025
N024
N023
N022
N021
N020
N019
N018B
N018A
N018
N017
N016
N015
N014
N013
N012
N011
N010
N009
N008
N007
N006
N005
N004
N003
N002
N001
N-CRE
N-AR
MYSLITE
MWOO
MWII
MWEE
MWAA
MUUSIKATOAN
MUURDHAJ
MUSIC
MUSI
MUSH3
MUSH
MUSH
MURX
MURGU2
MURE
MURDA
MURD
MUQDAM
MUOX
MUOT
MUOP
MUNSUB
MUNAH
MULTISET
MULTISE
MULTIPLICATION
MULTIPLICATIO
MULTIPL
MULTIOCULA
MULTIMAP
MULT
MUKPHRENG
MUIN
MUCAAD
MUAN
MU-GAAHLA
MOVE
MOUTH
MOUT
MOUNTAIN
MOUND
MOUN
MOTHER
MORTAR
MORPHOLOGICA
MORNING
MOOSE-CRE
MOON
MONTH
MONT
MONOSTABL
MONOGRAP
MONOGRAMMO
MONOGRA
MONOFONIAS
MONOCULA
MOHAMMA
MODUL
MODESTY
MODELS
MODEL
MNYA
MNAS
MISRA
MIRIBAARU
MIRI
MIRED
MINY
MINUS-OR-PLU
MINUS
MINISTER
MINIMA
MIME
MILLION
MILLET
MILL
MIKURON
MIKRO
MIKRI
MIIN
MIEX
MIEUM-TIKEUT
MIEUM-SSANGSIOS
MIEUM-SSANGNIEUN
MIEUM-RIEUL
MIEUM-PIEUP-SIOS
MIEUM-PIEUP
MIEUM-PANSIOS
MIEUM-NIEUN
MIEUM-CIEUC
MIEUM-CHIEUCH
MIEU
MIEP
MIDLIN
MIDDLE-WELS
MIDDL
MICR
MGUX
MGUT
MGURX
MGUR
MGUP
MGUOX
MGUOP
MGUO
MGOX
MGOT
MGOP
MGIEX
MGIE
MGEX
MGEP
MGBU
MGBOO
MGBO
MGBI
MGBEE
MGBE
MGBA
MGAX
MGAT
MGAP
MEZZO
METRICA
METRIA
METRETE
METOBELUS
METEG
METAL
MESSENIA
MESO
MESI
MESH
MERKHA
MERKH
MERI
MERGE
MERCURY
MENDUT
MEMBERSHIP
MEMBER
MEMBE
MEM-QOPH
MELON
MELODI
MELIK
MEIZI
MEGATON
MEGALI
MEETORU
MEETE
MEET
MEEMU
MEEM
MEEEE
MEDIUM
MEDIU
MEDICINE
MEAT
MEASURE
MEASURE
MEASUR
MBOO
MBEN
MBEE
MBAA
MAYE
MAYANNA
MAXIMA
MATTOCK
MATRIX
MATERIALS
MASSING
MASOR
MASHFAAT
MASH2
MASCULIN
MARUKU
MARTYRI
MARRYIN
MARRIAG
MARKER
MARK-4
MARK-3
MARK-2
MARK-1
MARE
MARCH
MARCATO-STACCATO
MARCATO
MARBUTA
MARBUT
MAQAF
MAPIQ
MANSYON
MANNA
MANNA
MANGALAM
MANCH
MANACLES
MALTES
MALE
MALAKO
MAKSURA
MAIYAMOK
MAITAIKHU
MAIRU
MAIMUAN
MAIMALAI
MAIKURO
MAIDEN
MAHJON
MAHHA
MAHAPRANA
MAHAPAKH
MAHAAPRAAN
MADYA
MADU
MADDA
MADDA
MADD
MACRON-GRAVE
MACRON-BREVE
MACRON-ACUTE
MACRON
MACRO
MAAI
M044
M043
M042
M041
M040A
M040
M039
M038
M037
M036
M035
M034
M033B
M033A
M033
M032
M031A
M031
M030
M029
M028A
M028
M027
M026
M025
M024A
M024
M023
M022A
M022
M021
M020
M019
M018
M017A
M017
M016A
M016
M015A
M015
M014
M013
M012H
M012G
M012F
M012E
M012D
M012C
M012B
M012A
M012
M011
M010A
M010
M009
M008
M007
M006
M005
M004
M003A
M003
M002
M001B
M001A
M001
LYRX
LYDIA
LYCIA
LWOO
LWII
LWAA
LURX
LUOX
LUOT
LUOP
LUNGSI
LUNAT
LUIS
LUHUR
LUGAL
LUGA
LOZENGE
LOZENG
LOWE
LOW-
LOURE
LOTUS
LORRAINE
LOOT
LOOP
LONSUM
LONGA
LONG
LONG-BRANCH-YR
LONG-BRANCH-SO
LONG-BRANCH-OS
LONG-BRANCH-MAD
LONG-BRANCH-HAGAL
LONG-BRANCH-A
LOLL
LOGOTYP
LOGOGRA
LOCATIVE
LOCATIO
LLLA
LJUDIJE
LIWN
LIVR
LITTL
LITR
LISH
LIQUI
LINKIN
LINGSA
LINES
LINE
LINE-9
LINE-7
LINE-3
LINE-1
LIMMU4
LIMMU2
LIMMU
LIMM
LIMITE
LIMITATION
LIMIT
LILY
LILITH
LIGHTNING
LIGHTHOUSE
LIGHT
LIFE
LIEX
LIET
LIEP
LIBRA
LIABILIT
LHII
LHAVIYANI
LHAA
LEZH
LEVE
LETTER
LESSE
LESS-THAN
LESS-THA
LENTICULA
LENIS
LENGTHENER
LENGT
LENGA
LENG
LEMOI
LELET
LELE
LEIMMA
LEIMM
LEGS
LEGION
LEGETO
LEFTWARDS
LEFT-TO-RIGH
LEFT-STE
LEFT-SID
LEFT-SHADE
LEFT-POINTIN
LEFT-HAN
LEFT-FACIN
LEFT
LEEK
LEEEE
LEATHER
LEAF
LEADER
LDAN
LAYANNA
LAULA
LAUKA
LATINAT
LATIK
LATERA
LARYNGEA
LARGE
LARG
LANGUAG
LANES
LAMEDH
LAMED
LAME
LAME
LAMDA
LAMD
LAMBD
LAMADH
LAKKHANGYAO
LAJANYALAN
LAHSHU
LAGUS
LAGAR
LAGA
LAGAB
LAGA
LAEV
LACK
LACA
LABOURING
LABOR
LABIALIZATIO
LABAT
LAAN
LAAMU
LAAI
L006A
L002A
L-TYP
L-SHAPE
KYURII
KYLISMA
KYEE
KYATHO
KYAA
KXWI
KXWEE
KXWE
KXWAA
KXWA
KXEE
KXAA
KWU318
KWOO
KWII
KWEE
KWAY
KWAA
KUUH
KUSMA
KUSHU2
KURX
KURUZEIRO
KURT
KUROONE
KUOX
KUOP
KUNG
KUNDDALIYA
KSSA
KREMASTI
KRATIMOYPORROON
KRATIMOKOUFISMA
KRATIMATA
KRATIM
KPOO
KPEN
KPEE
KPAN
KOVUU
KOTO
KORUNA
KORONIS
KOREA
KORANI
KOQNDON
KOPPA
KOOPO
KOOMUUT
KONTEVMA
KONTEVM
KOMBUVA
KOMBUV
KOMB
KOGHOM
KOET
KNIGHT
KNIFE
KNIF
KLITON
KLASMA
KLASM
KKEE
KIYEOK-TIKEUT
KIYEOK-SIOS-KIYEOK
KIYEOK-RIEUL
KIYEOK-PIEUP
KIYEOK-NIEUN
KIYEOK-KHIEUKH
KIYEOK-CHIEUCH
KIYEO
KISIM5
KISIM
KISH
KISAL
KIROWATTO
KIROMEETORU
KIROGURAMU
KIRO
KIRGHI
KINSHIP
KINDERGARTEN
KIEX
KIEP
KICK
KHWAI
KHUEN-LU
KHUE
KHUAT
KHOU
KHON
KHOMUT
KHIT
KHIEUK
KHHO
KHHA
KHETH
KHEI
KHEE
KHAR
KHAPH
KHAN
KHAND
KHAN
KHAMT
KHAKASSIA
KHAI
KHAH
KHAA
KEYCAP
KEYBOARD
KEUX
KETT
KESH2
KERET
KEOW
KENTIMATA
KENTIMAT
KENTIM
KENAT
KEMPUL
KEMPU
KEMPLI
KEMPL
KEMPHRENG
KEMBANG
KELVI
KEHEH
KEHE
KEFULA
KEESU
KEEPIN
KEENG
KCAL
KAZAK
KAYANNA
KAYA
KAWI
KAVYKA
KAUNA
KATO
KATHISTI
KATHAK
KATAVASMA
KATAV
KATAKANA-HIRAGAN
KASRATAN
KASRATA
KASRA
KASR
KASKAL
KASKA
KASHMIR
KARSHANA
KARORII
KARE
KARATTO
KARAN
KAPYEOUNSSANGPIEUP
KAPYEOUNRIEUL
KAPYEOUNPHIEUPH
KAPYEOUNMIEUM
KAPPA
KAPP
KAPO
KAPH
KAPAL
KAPA
KANTAJ
KANG
KANAKO
KAM4
KAM2
KAKO
KAKABAT
KAIRI
KAD5
KAD4
KAD3
KAD2
KAAI
KAAFU
KAAF
K008
K007
K006
K005
K004
K003
K002
K001
JUPITER
JUOT
JUOP
JUNO
JUNE
JULY
JUEUI
JUDGE
JUDEO-SPANIS
JOYOU
JONG
JOKER
JOINED
JOIN
JJYX
JJYT
JJYP
JJUX
JJUT
JJURX
JJUR
JJUP
JJUOX
JJUOP
JJUO
JJOX
JJOT
JJOP
JJIX
JJIT
JJIP
JJIEX
JJIET
JJIEP
JJIE
JJEE
JIHVAMULIYA
JHEH
JHAN
JHAM
JERUSALEM
JERA
JERA
JEGOGAN
JEEM
JAYANNA
JAVIYANI
JAPANES
JANUARY
JALLAJALALOUHOU
JADE
J-SIMPLIFIE
IZHITSA
IZHITS
IZHE
IYEK
IYANNA
IUJA
ITERATIO
ITEM
ISSHAR
ISON
ISEN-ISEN
ISAKI
IS-PILLA
IRUYANNA
IRUUYANNA
IOTIFIE
IOTATE
IOTA
IODHADH
INVISIBL
INVERTED
INVERTE
INVERS
INTI
INTERSYLLABI
INTERSECTION
INTERSECTIO
INTERSECTIN
INTERROBANG
INTERPOLATIO
INTERLOCKE
INTERLINEA
INTERIO
INTERES
INTERCALATE
INTEGRATION
INTEGRATIO
INTEGRAL
INTEGRA
INSULA
INSTRUMENTA
INSIDE
INSERTIO
INSECT
INSCRIPTIONA
INNOCENCE
INNN
INNER
INNE
ININGU
INHIBI
INHEREN
INGWAZ
INFORMATIO
INFLUENCE
INFINITY
INFINIT
INDUSTRIA
INDIREC
INDICATOR
INDI
INDEX
INDEPENDEN
INCREMENT
INCREASE
INCREASE
INCOMPLET
INCLUDIN
INCH
INAP
IN-ALAF
IMPERIA
IMPERFECTU
IMPERFECTA
IMPERFECT
IMISEO
IMIN3
IMIN
IMIFTHORON
IMIFTHORA
IMIFONON
IMIDIARGON
IMAG
ILUYANNA
ILUY
ILUUYANNA
ILUT
ILIMMU4
ILIMMU3
ILIMMU
ILIMM
IKARA
IKAR
IIYANNA
IGGWS
IFIN
IEUNG-TIKEUT
IEUNG-THIEUTH
IEUNG-SSANGKIYEOK
IEUNG-RIEUL
IEUNG-PIEUP
IEUNG-PHIEUPH
IEUNG-KIYEOK
IEUNG-KHIEUKH
IEUNG-CIEUC
IEUNG-CHIEUCH
IEUN
IDLE
IDIM
IDEOGRAPH-FAD9
IDEOGRAPH-FAD8
IDEOGRAPH-FAD7
IDEOGRAPH-FAD6
IDEOGRAPH-FAD5
IDEOGRAPH-FAD4
IDEOGRAPH-FAD3
IDEOGRAPH-FAD2
IDEOGRAPH-FAD1
IDEOGRAPH-FAD0
IDEOGRAPH-FACF
IDEOGRAPH-FACE
IDEOGRAPH-FACD
IDEOGRAPH-FACC
IDEOGRAPH-FACB
IDEOGRAPH-FACA
IDEOGRAPH-FAC9
IDEOGRAPH-FAC8
IDEOGRAPH-FAC7
IDEOGRAPH-FAC6
IDEOGRAPH-FAC5
IDEOGRAPH-FAC4
IDEOGRAPH-FAC3
IDEOGRAPH-FAC2
IDEOGRAPH-FAC1
IDEOGRAPH-FAC0
IDEOGRAPH-FABF
IDEOGRAPH-FABE
IDEOGRAPH-FABD
IDEOGRAPH-FABC
IDEOGRAPH-FABB
IDEOGRAPH-FABA
IDEOGRAPH-FAB9
IDEOGRAPH-FAB8
IDEOGRAPH-FAB7
IDEOGRAPH-FAB6
IDEOGRAPH-FAB5
IDEOGRAPH-FAB4
IDEOGRAPH-FAB3
IDEOGRAPH-FAB2
IDEOGRAPH-FAB1
IDEOGRAPH-FAB0
IDEOGRAPH-FAAF
IDEOGRAPH-FAAE
IDEOGRAPH-FAAD
IDEOGRAPH-FAAC
IDEOGRAPH-FAAB
IDEOGRAPH-FAAA
IDEOGRAPH-FAA9
IDEOGRAPH-FAA8
IDEOGRAPH-FAA7
IDEOGRAPH-FAA6
IDEOGRAPH-FAA5
IDEOGRAPH-FAA4
IDEOGRAPH-FAA3
IDEOGRAPH-FAA2
IDEOGRAPH-FAA1
IDEOGRAPH-FAA0
IDEOGRAPH-FA9F
IDEOGRAPH-FA9E
IDEOGRAPH-FA9D
IDEOGRAPH-FA9C
IDEOGRAPH-FA9B
IDEOGRAPH-FA9A
IDEOGRAPH-FA99
IDEOGRAPH-FA98
IDEOGRAPH-FA97
IDEOGRAPH-FA96
IDEOGRAPH-FA95
IDEOGRAPH-FA94
IDEOGRAPH-FA93
IDEOGRAPH-FA92
IDEOGRAPH-FA91
IDEOGRAPH-FA90
IDEOGRAPH-FA8F
IDEOGRAPH-FA8E
IDEOGRAPH-FA8D
IDEOGRAPH-FA8C
IDEOGRAPH-FA8B
IDEOGRAPH-FA8A
IDEOGRAPH-FA89
IDEOGRAPH-FA88
IDEOGRAPH-FA87
IDEOGRAPH-FA86
IDEOGRAPH-FA85
IDEOGRAPH-FA84
IDEOGRAPH-FA83
IDEOGRAPH-FA82
IDEOGRAPH-FA81
IDEOGRAPH-FA80
IDEOGRAPH-FA7F
IDEOGRAPH-FA7E
IDEOGRAPH-FA7D
IDEOGRAPH-FA7C
IDEOGRAPH-FA7B
IDEOGRAPH-FA7A
IDEOGRAPH-FA79
IDEOGRAPH-FA78
IDEOGRAPH-FA77
IDEOGRAPH-FA76
IDEOGRAPH-FA75
IDEOGRAPH-FA74
IDEOGRAPH-FA73
IDEOGRAPH-FA72
IDEOGRAPH-FA71
IDEOGRAPH-FA70
IDEOGRAPH-FA6D
IDEOGRAPH-FA6C
IDEOGRAPH-FA6B
IDEOGRAPH-FA6A
IDEOGRAPH-FA69
IDEOGRAPH-FA68
IDEOGRAPH-FA67
IDEOGRAPH-FA66
IDEOGRAPH-FA65
IDEOGRAPH-FA64
IDEOGRAPH-FA63
IDEOGRAPH-FA62
IDEOGRAPH-FA61
IDEOGRAPH-FA60
IDEOGRAPH-FA5F
IDEOGRAPH-FA5E
IDEOGRAPH-FA5D
IDEOGRAPH-FA5C
IDEOGRAPH-FA5B
IDEOGRAPH-FA5A
IDEOGRAPH-FA59
IDEOGRAPH-FA58
IDEOGRAPH-FA57
IDEOGRAPH-FA56
IDEOGRAPH-FA55
IDEOGRAPH-FA54
IDEOGRAPH-FA53
IDEOGRAPH-FA52
IDEOGRAPH-FA51
IDEOGRAPH-FA50
IDEOGRAPH-FA4F
IDEOGRAPH-FA4E
IDEOGRAPH-FA4D
IDEOGRAPH-FA4C
IDEOGRAPH-FA4B
IDEOGRAPH-FA4A
IDEOGRAPH-FA49
IDEOGRAPH-FA48
IDEOGRAPH-FA47
IDEOGRAPH-FA46
IDEOGRAPH-FA45
IDEOGRAPH-FA44
IDEOGRAPH-FA43
IDEOGRAPH-FA42
IDEOGRAPH-FA41
IDEOGRAPH-FA40
IDEOGRAPH-FA3F
IDEOGRAPH-FA3E
IDEOGRAPH-FA3D
IDEOGRAPH-FA3C
IDEOGRAPH-FA3B
IDEOGRAPH-FA3A
IDEOGRAPH-FA39
IDEOGRAPH-FA38
IDEOGRAPH-FA37
IDEOGRAPH-FA36
IDEOGRAPH-FA35
IDEOGRAPH-FA34
IDEOGRAPH-FA33
IDEOGRAPH-FA32
IDEOGRAPH-FA31
IDEOGRAPH-FA30
IDEOGRAPH-FA2D
IDEOGRAPH-FA2C
IDEOGRAPH-FA2B
IDEOGRAPH-FA2A
IDEOGRAPH-FA29
IDEOGRAPH-FA28
IDEOGRAPH-FA27
IDEOGRAPH-FA26
IDEOGRAPH-FA25
IDEOGRAPH-FA24
IDEOGRAPH-FA23
IDEOGRAPH-FA22
IDEOGRAPH-FA21
IDEOGRAPH-FA20
IDEOGRAPH-FA1F
IDEOGRAPH-FA1E
IDEOGRAPH-FA1D
IDEOGRAPH-FA1C
IDEOGRAPH-FA1B
IDEOGRAPH-FA1A
IDEOGRAPH-FA19
IDEOGRAPH-FA18
IDEOGRAPH-FA17
IDEOGRAPH-FA16
IDEOGRAPH-FA15
IDEOGRAPH-FA14
IDEOGRAPH-FA13
IDEOGRAPH-FA12
IDEOGRAPH-FA11
IDEOGRAPH-FA10
IDEOGRAPH-FA0F
IDEOGRAPH-FA0E
IDEOGRAPH-FA0D
IDEOGRAPH-FA0C
IDEOGRAPH-FA0B
IDEOGRAPH-FA0A
IDEOGRAPH-FA09
IDEOGRAPH-FA08
IDEOGRAPH-FA07
IDEOGRAPH-FA06
IDEOGRAPH-FA05
IDEOGRAPH-FA04
IDEOGRAPH-FA03
IDEOGRAPH-FA02
IDEOGRAPH-FA01
IDEOGRAPH-FA00
IDEOGRAPH-F9FF
IDEOGRAPH-F9FE
IDEOGRAPH-F9FD
IDEOGRAPH-F9FC
IDEOGRAPH-F9FB
IDEOGRAPH-F9FA
IDEOGRAPH-F9F9
IDEOGRAPH-F9F8
IDEOGRAPH-F9F7
IDEOGRAPH-F9F6
IDEOGRAPH-F9F5
IDEOGRAPH-F9F4
IDEOGRAPH-F9F3
IDEOGRAPH-F9F2
IDEOGRAPH-F9F1
IDEOGRAPH-F9F0
IDEOGRAPH-F9EF
IDEOGRAPH-F9EE
IDEOGRAPH-F9ED
IDEOGRAPH-F9EC
IDEOGRAPH-F9EB
IDEOGRAPH-F9EA
IDEOGRAPH-F9E9
IDEOGRAPH-F9E8
IDEOGRAPH-F9E7
IDEOGRAPH-F9E6
IDEOGRAPH-F9E5
IDEOGRAPH-F9E4
IDEOGRAPH-F9E3
IDEOGRAPH-F9E2
IDEOGRAPH-F9E1
IDEOGRAPH-F9E0
IDEOGRAPH-F9DF
IDEOGRAPH-F9DE
IDEOGRAPH-F9DD
IDEOGRAPH-F9DC
IDEOGRAPH-F9DB
IDEOGRAPH-F9DA
IDEOGRAPH-F9D9
IDEOGRAPH-F9D8
IDEOGRAPH-F9D7
IDEOGRAPH-F9D6
IDEOGRAPH-F9D5
IDEOGRAPH-F9D4
IDEOGRAPH-F9D3
IDEOGRAPH-F9D2
IDEOGRAPH-F9D1
IDEOGRAPH-F9D0
IDEOGRAPH-F9CF
IDEOGRAPH-F9CE
IDEOGRAPH-F9CD
IDEOGRAPH-F9CC
IDEOGRAPH-F9CB
IDEOGRAPH-F9CA
IDEOGRAPH-F9C9
IDEOGRAPH-F9C8
IDEOGRAPH-F9C7
IDEOGRAPH-F9C6
IDEOGRAPH-F9C5
IDEOGRAPH-F9C4
IDEOGRAPH-F9C3
IDEOGRAPH-F9C2
IDEOGRAPH-F9C1
IDEOGRAPH-F9C0
IDEOGRAPH-F9BF
IDEOGRAPH-F9BE
IDEOGRAPH-F9BD
IDEOGRAPH-F9BC
IDEOGRAPH-F9BB
IDEOGRAPH-F9BA
IDEOGRAPH-F9B9
IDEOGRAPH-F9B8
IDEOGRAPH-F9B7
IDEOGRAPH-F9B6
IDEOGRAPH-F9B5
IDEOGRAPH-F9B4
IDEOGRAPH-F9B3
IDEOGRAPH-F9B2
IDEOGRAPH-F9B1
IDEOGRAPH-F9B0
IDEOGRAPH-F9AF
IDEOGRAPH-F9AE
IDEOGRAPH-F9AD
IDEOGRAPH-F9AC
IDEOGRAPH-F9AB
IDEOGRAPH-F9AA
IDEOGRAPH-F9A9
IDEOGRAPH-F9A8
IDEOGRAPH-F9A7
IDEOGRAPH-F9A6
IDEOGRAPH-F9A5
IDEOGRAPH-F9A4
IDEOGRAPH-F9A3
IDEOGRAPH-F9A2
IDEOGRAPH-F9A1
IDEOGRAPH-F9A0
IDEOGRAPH-F99F
IDEOGRAPH-F99E
IDEOGRAPH-F99D
IDEOGRAPH-F99C
IDEOGRAPH-F99B
IDEOGRAPH-F99A
IDEOGRAPH-F999
IDEOGRAPH-F998
IDEOGRAPH-F997
IDEOGRAPH-F996
IDEOGRAPH-F995
IDEOGRAPH-F994
IDEOGRAPH-F993
IDEOGRAPH-F992
IDEOGRAPH-F991
IDEOGRAPH-F990
IDEOGRAPH-F98F
IDEOGRAPH-F98E
IDEOGRAPH-F98D
IDEOGRAPH-F98C
IDEOGRAPH-F98B
IDEOGRAPH-F98A
IDEOGRAPH-F989
IDEOGRAPH-F988
IDEOGRAPH-F987
IDEOGRAPH-F986
IDEOGRAPH-F985
IDEOGRAPH-F984
IDEOGRAPH-F983
IDEOGRAPH-F982
IDEOGRAPH-F981
IDEOGRAPH-F980
IDEOGRAPH-F97F
IDEOGRAPH-F97E
IDEOGRAPH-F97D
IDEOGRAPH-F97C
IDEOGRAPH-F97B
IDEOGRAPH-F97A
IDEOGRAPH-F979
IDEOGRAPH-F978
IDEOGRAPH-F977
IDEOGRAPH-F976
IDEOGRAPH-F975
IDEOGRAPH-F974
IDEOGRAPH-F973
IDEOGRAPH-F972
IDEOGRAPH-F971
IDEOGRAPH-F970
IDEOGRAPH-F96F
IDEOGRAPH-F96E
IDEOGRAPH-F96D
IDEOGRAPH-F96C
IDEOGRAPH-F96B
IDEOGRAPH-F96A
IDEOGRAPH-F969
IDEOGRAPH-F968
IDEOGRAPH-F967
IDEOGRAPH-F966
IDEOGRAPH-F965
IDEOGRAPH-F964
IDEOGRAPH-F963
IDEOGRAPH-F962
IDEOGRAPH-F961
IDEOGRAPH-F960
IDEOGRAPH-F95F
IDEOGRAPH-F95E
IDEOGRAPH-F95D
IDEOGRAPH-F95C
IDEOGRAPH-F95B
IDEOGRAPH-F95A
IDEOGRAPH-F959
IDEOGRAPH-F958
IDEOGRAPH-F957
IDEOGRAPH-F956
IDEOGRAPH-F955
IDEOGRAPH-F954
IDEOGRAPH-F953
IDEOGRAPH-F952
IDEOGRAPH-F951
IDEOGRAPH-F950
IDEOGRAPH-F94F
IDEOGRAPH-F94E
IDEOGRAPH-F94D
IDEOGRAPH-F94C
IDEOGRAPH-F94B
IDEOGRAPH-F94A
IDEOGRAPH-F949
IDEOGRAPH-F948
IDEOGRAPH-F947
IDEOGRAPH-F946
IDEOGRAPH-F945
IDEOGRAPH-F944
IDEOGRAPH-F943
IDEOGRAPH-F942
IDEOGRAPH-F941
IDEOGRAPH-F940
IDEOGRAPH-F93F
IDEOGRAPH-F93E
IDEOGRAPH-F93D
IDEOGRAPH-F93C
IDEOGRAPH-F93B
IDEOGRAPH-F93A
IDEOGRAPH-F939
IDEOGRAPH-F938
IDEOGRAPH-F937
IDEOGRAPH-F936
IDEOGRAPH-F935
IDEOGRAPH-F934
IDEOGRAPH-F933
IDEOGRAPH-F932
IDEOGRAPH-F931
IDEOGRAPH-F930
IDEOGRAPH-F92F
IDEOGRAPH-F92E
IDEOGRAPH-F92D
IDEOGRAPH-F92C
IDEOGRAPH-F92B
IDEOGRAPH-F92A
IDEOGRAPH-F929
IDEOGRAPH-F928
IDEOGRAPH-F927
IDEOGRAPH-F926
IDEOGRAPH-F925
IDEOGRAPH-F924
IDEOGRAPH-F923
IDEOGRAPH-F922
IDEOGRAPH-F921
IDEOGRAPH-F920
IDEOGRAPH-F91F
IDEOGRAPH-F91E
IDEOGRAPH-F91D
IDEOGRAPH-F91C
IDEOGRAPH-F91B
IDEOGRAPH-F91A
IDEOGRAPH-F919
IDEOGRAPH-F918
IDEOGRAPH-F917
IDEOGRAPH-F916
IDEOGRAPH-F915
IDEOGRAPH-F914
IDEOGRAPH-F913
IDEOGRAPH-F912
IDEOGRAPH-F911
IDEOGRAPH-F910
IDEOGRAPH-F90F
IDEOGRAPH-F90E
IDEOGRAPH-F90D
IDEOGRAPH-F90C
IDEOGRAPH-F90B
IDEOGRAPH-F90A
IDEOGRAPH-F909
IDEOGRAPH-F908
IDEOGRAPH-F907
IDEOGRAPH-F906
IDEOGRAPH-F905
IDEOGRAPH-F904
IDEOGRAPH-F903
IDEOGRAPH-F902
IDEOGRAPH-F901
IDEOGRAPH-F900
IDEOGRAPH-904A
IDEOGRAPH-8D70
IDEOGRAPH-8CA9
IDEOGRAPH-89E3
IDEOGRAPH-7D42
IDEOGRAPH-76D7
IDEOGRAPH-751F
IDEOGRAPH-7121
IDEOGRAPH-70B9
IDEOGRAPH-6F14
IDEOGRAPH-672C
IDEOGRAPH-6620
IDEOGRAPH-65B0
IDEOGRAPH-6599
IDEOGRAPH-6557
IDEOGRAPH-6355
IDEOGRAPH-6307
IDEOGRAPH-6295
IDEOGRAPH-6253
IDEOGRAPH-624B
IDEOGRAPH-5F8C
IDEOGRAPH-5DE6
IDEOGRAPH-5B89
IDEOGRAPH-5B57
IDEOGRAPH-5929
IDEOGRAPH-591A
IDEOGRAPH-58F0
IDEOGRAPH-5439
IDEOGRAPH-53F3
IDEOGRAPH-53CC
IDEOGRAPH-52DD
IDEOGRAPH-524D
IDEOGRAPH-521D
IDEOGRAPH-518D
IDEOGRAPH-4EA4
IDEOGRAPH-4E8C
IDEOGRAPH-4E2D
IDEOGRAPH-4E09
IDEOGRAPH-4E00
IDEOGRAPH-2FA1D
IDEOGRAPH-2FA1C
IDEOGRAPH-2FA1B
IDEOGRAPH-2FA1A
IDEOGRAPH-2FA19
IDEOGRAPH-2FA18
IDEOGRAPH-2FA17
IDEOGRAPH-2FA16
IDEOGRAPH-2FA15
IDEOGRAPH-2FA14
IDEOGRAPH-2FA13
IDEOGRAPH-2FA12
IDEOGRAPH-2FA11
IDEOGRAPH-2FA10
IDEOGRAPH-2FA0F
IDEOGRAPH-2FA0E
IDEOGRAPH-2FA0D
IDEOGRAPH-2FA0C
IDEOGRAPH-2FA0B
IDEOGRAPH-2FA0A
IDEOGRAPH-2FA09
IDEOGRAPH-2FA08
IDEOGRAPH-2FA07
IDEOGRAPH-2FA06
IDEOGRAPH-2FA05
IDEOGRAPH-2FA04
IDEOGRAPH-2FA03
IDEOGRAPH-2FA02
IDEOGRAPH-2FA01
IDEOGRAPH-2FA00
IDEOGRAPH-2F9FF
IDEOGRAPH-2F9FE
IDEOGRAPH-2F9FD
IDEOGRAPH-2F9FC
IDEOGRAPH-2F9FB
IDEOGRAPH-2F9FA
IDEOGRAPH-2F9F9
IDEOGRAPH-2F9F8
IDEOGRAPH-2F9F7
IDEOGRAPH-2F9F6
IDEOGRAPH-2F9F5
IDEOGRAPH-2F9F4
IDEOGRAPH-2F9F3
IDEOGRAPH-2F9F2
IDEOGRAPH-2F9F1
IDEOGRAPH-2F9F0
IDEOGRAPH-2F9EF
IDEOGRAPH-2F9EE
IDEOGRAPH-2F9ED
IDEOGRAPH-2F9EC
IDEOGRAPH-2F9EB
IDEOGRAPH-2F9EA
IDEOGRAPH-2F9E9
IDEOGRAPH-2F9E8
IDEOGRAPH-2F9E7
IDEOGRAPH-2F9E6
IDEOGRAPH-2F9E5
IDEOGRAPH-2F9E4
IDEOGRAPH-2F9E3
IDEOGRAPH-2F9E2
IDEOGRAPH-2F9E1
IDEOGRAPH-2F9E0
IDEOGRAPH-2F9DF
IDEOGRAPH-2F9DE
IDEOGRAPH-2F9DD
IDEOGRAPH-2F9DC
IDEOGRAPH-2F9DB
IDEOGRAPH-2F9DA
IDEOGRAPH-2F9D9
IDEOGRAPH-2F9D8
IDEOGRAPH-2F9D7
IDEOGRAPH-2F9D6
IDEOGRAPH-2F9D5
IDEOGRAPH-2F9D4
IDEOGRAPH-2F9D3
IDEOGRAPH-2F9D2
IDEOGRAPH-2F9D1
IDEOGRAPH-2F9D0
IDEOGRAPH-2F9CF
IDEOGRAPH-2F9CE
IDEOGRAPH-2F9CD
IDEOGRAPH-2F9CC
IDEOGRAPH-2F9CB
IDEOGRAPH-2F9CA
IDEOGRAPH-2F9C9
IDEOGRAPH-2F9C8
IDEOGRAPH-2F9C7
IDEOGRAPH-2F9C6
IDEOGRAPH-2F9C5
IDEOGRAPH-2F9C4
IDEOGRAPH-2F9C3
IDEOGRAPH-2F9C2
IDEOGRAPH-2F9C1
IDEOGRAPH-2F9C0
IDEOGRAPH-2F9BF
IDEOGRAPH-2F9BE
IDEOGRAPH-2F9BD
IDEOGRAPH-2F9BC
IDEOGRAPH-2F9BB
IDEOGRAPH-2F9BA
IDEOGRAPH-2F9B9
IDEOGRAPH-2F9B8
IDEOGRAPH-2F9B7
IDEOGRAPH-2F9B6
IDEOGRAPH-2F9B5
IDEOGRAPH-2F9B4
IDEOGRAPH-2F9B3
IDEOGRAPH-2F9B2
IDEOGRAPH-2F9B1
IDEOGRAPH-2F9B0
IDEOGRAPH-2F9AF
IDEOGRAPH-2F9AE
IDEOGRAPH-2F9AD
IDEOGRAPH-2F9AC
IDEOGRAPH-2F9AB
IDEOGRAPH-2F9AA
IDEOGRAPH-2F9A9
IDEOGRAPH-2F9A8
IDEOGRAPH-2F9A7
IDEOGRAPH-2F9A6
IDEOGRAPH-2F9A5
IDEOGRAPH-2F9A4
IDEOGRAPH-2F9A3
IDEOGRAPH-2F9A2
IDEOGRAPH-2F9A1
IDEOGRAPH-2F9A0
IDEOGRAPH-2F99F
IDEOGRAPH-2F99E
IDEOGRAPH-2F99D
IDEOGRAPH-2F99C
IDEOGRAPH-2F99B
IDEOGRAPH-2F99A
IDEOGRAPH-2F999
IDEOGRAPH-2F998
IDEOGRAPH-2F997
IDEOGRAPH-2F996
IDEOGRAPH-2F995
IDEOGRAPH-2F994
IDEOGRAPH-2F993
IDEOGRAPH-2F992
IDEOGRAPH-2F991
IDEOGRAPH-2F990
IDEOGRAPH-2F98F
IDEOGRAPH-2F98E
IDEOGRAPH-2F98D
IDEOGRAPH-2F98C
IDEOGRAPH-2F98B
IDEOGRAPH-2F98A
IDEOGRAPH-2F989
IDEOGRAPH-2F988
IDEOGRAPH-2F987
IDEOGRAPH-2F986
IDEOGRAPH-2F985
IDEOGRAPH-2F984
IDEOGRAPH-2F983
IDEOGRAPH-2F982
IDEOGRAPH-2F981
IDEOGRAPH-2F980
IDEOGRAPH-2F97F
IDEOGRAPH-2F97E
IDEOGRAPH-2F97D
IDEOGRAPH-2F97C
IDEOGRAPH-2F97B
IDEOGRAPH-2F97A
IDEOGRAPH-2F979
IDEOGRAPH-2F978
IDEOGRAPH-2F977
IDEOGRAPH-2F976
IDEOGRAPH-2F975
IDEOGRAPH-2F974
IDEOGRAPH-2F973
IDEOGRAPH-2F972
IDEOGRAPH-2F971
IDEOGRAPH-2F970
IDEOGRAPH-2F96F
IDEOGRAPH-2F96E
IDEOGRAPH-2F96D
IDEOGRAPH-2F96C
IDEOGRAPH-2F96B
IDEOGRAPH-2F96A
IDEOGRAPH-2F969
IDEOGRAPH-2F968
IDEOGRAPH-2F967
IDEOGRAPH-2F966
IDEOGRAPH-2F965
IDEOGRAPH-2F964
IDEOGRAPH-2F963
IDEOGRAPH-2F962
IDEOGRAPH-2F961
IDEOGRAPH-2F960
IDEOGRAPH-2F95F
IDEOGRAPH-2F95E
IDEOGRAPH-2F95D
IDEOGRAPH-2F95C
IDEOGRAPH-2F95B
IDEOGRAPH-2F95A
IDEOGRAPH-2F959
IDEOGRAPH-2F958
IDEOGRAPH-2F957
IDEOGRAPH-2F956
IDEOGRAPH-2F955
IDEOGRAPH-2F954
IDEOGRAPH-2F953
IDEOGRAPH-2F952
IDEOGRAPH-2F951
IDEOGRAPH-2F950
IDEOGRAPH-2F94F
IDEOGRAPH-2F94E
IDEOGRAPH-2F94D
IDEOGRAPH-2F94C
IDEOGRAPH-2F94B
IDEOGRAPH-2F94A
IDEOGRAPH-2F949
IDEOGRAPH-2F948
IDEOGRAPH-2F947
IDEOGRAPH-2F946
IDEOGRAPH-2F945
IDEOGRAPH-2F944
IDEOGRAPH-2F943
IDEOGRAPH-2F942
IDEOGRAPH-2F941
IDEOGRAPH-2F940
IDEOGRAPH-2F93F
IDEOGRAPH-2F93E
IDEOGRAPH-2F93D
IDEOGRAPH-2F93C
IDEOGRAPH-2F93B
IDEOGRAPH-2F93A
IDEOGRAPH-2F939
IDEOGRAPH-2F938
IDEOGRAPH-2F937
IDEOGRAPH-2F936
IDEOGRAPH-2F935
IDEOGRAPH-2F934
IDEOGRAPH-2F933
IDEOGRAPH-2F932
IDEOGRAPH-2F931
IDEOGRAPH-2F930
IDEOGRAPH-2F92F
IDEOGRAPH-2F92E
IDEOGRAPH-2F92D
IDEOGRAPH-2F92C
IDEOGRAPH-2F92B
IDEOGRAPH-2F92A
IDEOGRAPH-2F929
IDEOGRAPH-2F928
IDEOGRAPH-2F927
IDEOGRAPH-2F926
IDEOGRAPH-2F925
IDEOGRAPH-2F924
IDEOGRAPH-2F923
IDEOGRAPH-2F922
IDEOGRAPH-2F921
IDEOGRAPH-2F920
IDEOGRAPH-2F91F
IDEOGRAPH-2F91E
IDEOGRAPH-2F91D
IDEOGRAPH-2F91C
IDEOGRAPH-2F91B
IDEOGRAPH-2F91A
IDEOGRAPH-2F919
IDEOGRAPH-2F918
IDEOGRAPH-2F917
IDEOGRAPH-2F916
IDEOGRAPH-2F915
IDEOGRAPH-2F914
IDEOGRAPH-2F913
IDEOGRAPH-2F912
IDEOGRAPH-2F911
IDEOGRAPH-2F910
IDEOGRAPH-2F90F
IDEOGRAPH-2F90E
IDEOGRAPH-2F90D
IDEOGRAPH-2F90C
IDEOGRAPH-2F90B
IDEOGRAPH-2F90A
IDEOGRAPH-2F909
IDEOGRAPH-2F908
IDEOGRAPH-2F907
IDEOGRAPH-2F906
IDEOGRAPH-2F905
IDEOGRAPH-2F904
IDEOGRAPH-2F903
IDEOGRAPH-2F902
IDEOGRAPH-2F901
IDEOGRAPH-2F900
IDEOGRAPH-2F8FF
IDEOGRAPH-2F8FE
IDEOGRAPH-2F8FD
IDEOGRAPH-2F8FC
IDEOGRAPH-2F8FB
IDEOGRAPH-2F8FA
IDEOGRAPH-2F8F9
IDEOGRAPH-2F8F8
IDEOGRAPH-2F8F7
IDEOGRAPH-2F8F6
IDEOGRAPH-2F8F5
IDEOGRAPH-2F8F4
IDEOGRAPH-2F8F3
IDEOGRAPH-2F8F2
IDEOGRAPH-2F8F1
IDEOGRAPH-2F8F0
IDEOGRAPH-2F8EF
IDEOGRAPH-2F8EE
IDEOGRAPH-2F8ED
IDEOGRAPH-2F8EC
IDEOGRAPH-2F8EB
IDEOGRAPH-2F8EA
IDEOGRAPH-2F8E9
IDEOGRAPH-2F8E8
IDEOGRAPH-2F8E7
IDEOGRAPH-2F8E6
IDEOGRAPH-2F8E5
IDEOGRAPH-2F8E4
IDEOGRAPH-2F8E3
IDEOGRAPH-2F8E2
IDEOGRAPH-2F8E1
IDEOGRAPH-2F8E0
IDEOGRAPH-2F8DF
IDEOGRAPH-2F8DE
IDEOGRAPH-2F8DD
IDEOGRAPH-2F8DC
IDEOGRAPH-2F8DB
IDEOGRAPH-2F8DA
IDEOGRAPH-2F8D9
IDEOGRAPH-2F8D8
IDEOGRAPH-2F8D7
IDEOGRAPH-2F8D6
IDEOGRAPH-2F8D5
IDEOGRAPH-2F8D4
IDEOGRAPH-2F8D3
IDEOGRAPH-2F8D2
IDEOGRAPH-2F8D1
IDEOGRAPH-2F8D0
IDEOGRAPH-2F8CF
IDEOGRAPH-2F8CE
IDEOGRAPH-2F8CD
IDEOGRAPH-2F8CC
IDEOGRAPH-2F8CB
IDEOGRAPH-2F8CA
IDEOGRAPH-2F8C9
IDEOGRAPH-2F8C8
IDEOGRAPH-2F8C7
IDEOGRAPH-2F8C6
IDEOGRAPH-2F8C5
IDEOGRAPH-2F8C4
IDEOGRAPH-2F8C3
IDEOGRAPH-2F8C2
IDEOGRAPH-2F8C1
IDEOGRAPH-2F8C0
IDEOGRAPH-2F8BF
IDEOGRAPH-2F8BE
IDEOGRAPH-2F8BD
IDEOGRAPH-2F8BC
IDEOGRAPH-2F8BB
IDEOGRAPH-2F8BA
IDEOGRAPH-2F8B9
IDEOGRAPH-2F8B8
IDEOGRAPH-2F8B7
IDEOGRAPH-2F8B6
IDEOGRAPH-2F8B5
IDEOGRAPH-2F8B4
IDEOGRAPH-2F8B3
IDEOGRAPH-2F8B2
IDEOGRAPH-2F8B1
IDEOGRAPH-2F8B0
IDEOGRAPH-2F8AF
IDEOGRAPH-2F8AE
IDEOGRAPH-2F8AD
IDEOGRAPH-2F8AC
IDEOGRAPH-2F8AB
IDEOGRAPH-2F8AA
IDEOGRAPH-2F8A9
IDEOGRAPH-2F8A8
IDEOGRAPH-2F8A7
IDEOGRAPH-2F8A6
IDEOGRAPH-2F8A5
IDEOGRAPH-2F8A4
IDEOGRAPH-2F8A3
IDEOGRAPH-2F8A2
IDEOGRAPH-2F8A1
IDEOGRAPH-2F8A0
IDEOGRAPH-2F89F
IDEOGRAPH-2F89E
IDEOGRAPH-2F89D
IDEOGRAPH-2F89C
IDEOGRAPH-2F89B
IDEOGRAPH-2F89A
IDEOGRAPH-2F899
IDEOGRAPH-2F898
IDEOGRAPH-2F897
IDEOGRAPH-2F896
IDEOGRAPH-2F895
IDEOGRAPH-2F894
IDEOGRAPH-2F893
IDEOGRAPH-2F892
IDEOGRAPH-2F891
IDEOGRAPH-2F890
IDEOGRAPH-2F88F
IDEOGRAPH-2F88E
IDEOGRAPH-2F88D
IDEOGRAPH-2F88C
IDEOGRAPH-2F88B
IDEOGRAPH-2F88A
IDEOGRAPH-2F889
IDEOGRAPH-2F888
IDEOGRAPH-2F887
IDEOGRAPH-2F886
IDEOGRAPH-2F885
IDEOGRAPH-2F884
IDEOGRAPH-2F883
IDEOGRAPH-2F882
IDEOGRAPH-2F881
IDEOGRAPH-2F880
IDEOGRAPH-2F87F
IDEOGRAPH-2F87E
IDEOGRAPH-2F87D
IDEOGRAPH-2F87C
IDEOGRAPH-2F87B
IDEOGRAPH-2F87A
IDEOGRAPH-2F879
IDEOGRAPH-2F878
IDEOGRAPH-2F877
IDEOGRAPH-2F876
IDEOGRAPH-2F875
IDEOGRAPH-2F874
IDEOGRAPH-2F873
IDEOGRAPH-2F872
IDEOGRAPH-2F871
IDEOGRAPH-2F870
IDEOGRAPH-2F86F
IDEOGRAPH-2F86E
IDEOGRAPH-2F86D
IDEOGRAPH-2F86C
IDEOGRAPH-2F86B
IDEOGRAPH-2F86A
IDEOGRAPH-2F869
IDEOGRAPH-2F868
IDEOGRAPH-2F867
IDEOGRAPH-2F866
IDEOGRAPH-2F865
IDEOGRAPH-2F864
IDEOGRAPH-2F863
IDEOGRAPH-2F862
IDEOGRAPH-2F861
IDEOGRAPH-2F860
IDEOGRAPH-2F85F
IDEOGRAPH-2F85E
IDEOGRAPH-2F85D
IDEOGRAPH-2F85C
IDEOGRAPH-2F85B
IDEOGRAPH-2F85A
IDEOGRAPH-2F859
IDEOGRAPH-2F858
IDEOGRAPH-2F857
IDEOGRAPH-2F856
IDEOGRAPH-2F855
IDEOGRAPH-2F854
IDEOGRAPH-2F853
IDEOGRAPH-2F852
IDEOGRAPH-2F851
IDEOGRAPH-2F850
IDEOGRAPH-2F84F
IDEOGRAPH-2F84E
IDEOGRAPH-2F84D
IDEOGRAPH-2F84C
IDEOGRAPH-2F84B
IDEOGRAPH-2F84A
IDEOGRAPH-2F849
IDEOGRAPH-2F848
IDEOGRAPH-2F847
IDEOGRAPH-2F846
IDEOGRAPH-2F845
IDEOGRAPH-2F844
IDEOGRAPH-2F843
IDEOGRAPH-2F842
IDEOGRAPH-2F841
IDEOGRAPH-2F840
IDEOGRAPH-2F83F
IDEOGRAPH-2F83E
IDEOGRAPH-2F83D
IDEOGRAPH-2F83C
IDEOGRAPH-2F83B
IDEOGRAPH-2F83A
IDEOGRAPH-2F839
IDEOGRAPH-2F838
IDEOGRAPH-2F837
IDEOGRAPH-2F836
IDEOGRAPH-2F835
IDEOGRAPH-2F834
IDEOGRAPH-2F833
IDEOGRAPH-2F832
IDEOGRAPH-2F831
IDEOGRAPH-2F830
IDEOGRAPH-2F82F
IDEOGRAPH-2F82E
IDEOGRAPH-2F82D
IDEOGRAPH-2F82C
IDEOGRAPH-2F82B
IDEOGRAPH-2F82A
IDEOGRAPH-2F829
IDEOGRAPH-2F828
IDEOGRAPH-2F827
IDEOGRAPH-2F826
IDEOGRAPH-2F825
IDEOGRAPH-2F824
IDEOGRAPH-2F823
IDEOGRAPH-2F822
IDEOGRAPH-2F821
IDEOGRAPH-2F820
IDEOGRAPH-2F81F
IDEOGRAPH-2F81E
IDEOGRAPH-2F81D
IDEOGRAPH-2F81C
IDEOGRAPH-2F81B
IDEOGRAPH-2F81A
IDEOGRAPH-2F819
IDEOGRAPH-2F818
IDEOGRAPH-2F817
IDEOGRAPH-2F816
IDEOGRAPH-2F815
IDEOGRAPH-2F814
IDEOGRAPH-2F813
IDEOGRAPH-2F812
IDEOGRAPH-2F811
IDEOGRAPH-2F810
IDEOGRAPH-2F80F
IDEOGRAPH-2F80E
IDEOGRAPH-2F80D
IDEOGRAPH-2F80C
IDEOGRAPH-2F80B
IDEOGRAPH-2F80A
IDEOGRAPH-2F809
IDEOGRAPH-2F808
IDEOGRAPH-2F807
IDEOGRAPH-2F806
IDEOGRAPH-2F805
IDEOGRAPH-2F804
IDEOGRAPH-2F803
IDEOGRAPH-2F802
IDEOGRAPH-2F801
IDEOGRAPH-2F800
IDENTIFICATION
IDENTICA
ICHOU
ICHOS
ICHIMATOS
ICHADIN
ICELANDIC-YR
IBIFILI
IAUDA
I015
I014
I013
I012
I011A
I011
I010A
I010
I009A
I009
I008
I007
I006
I005A
I005
I004
I003
I002
I001
I-YU
I-YO
I-YEO
I-YE
I-YAE
I-YA-O
I-YA
I-O-I
I-EU
I-BEAM
I-ARAEA
HZZZG
HZZZ
HZZP
HZWG
HYSTERESI
HYPODIASTOLE
HYPHENATIO
HYPHEN-MINUS
HYPHEN
HYPHE
HXWG
HXUOX
HXUOT
HXUOP
HXUO
HXOX
HXOT
HXOP
HXIX
HXIT
HXIP
HXIEX
HXIET
HXIEP
HXIE
HXEX
HXEP
HXAX
HXAT
HXAP
HWAIR
HURAN
HUOT
HUNDRED
HUNDRE
HUMAN
HUMA
HUL2
HUIITO
HUB2
HUARADDO
HRYVNI
HPWG
HOURGLASS
HOTA
HORSE
HORIZONTALL
HORIZONTAL-06-06
HORIZONTAL-06-05
HORIZONTAL-06-04
HORIZONTAL-06-03
HORIZONTAL-06-02
HORIZONTAL-06-01
HORIZONTAL-06-00
HORIZONTAL-05-06
HORIZONTAL-05-05
HORIZONTAL-05-04
HORIZONTAL-05-03
HORIZONTAL-05-02
HORIZONTAL-05-01
HORIZONTAL-05-00
HORIZONTAL-04-06
HORIZONTAL-04-05
HORIZONTAL-04-04
HORIZONTAL-04-03
HORIZONTAL-04-02
HORIZONTAL-04-01
HORIZONTAL-04-00
HORIZONTAL-03-06
HORIZONTAL-03-05
HORIZONTAL-03-04
HORIZONTAL-03-03
HORIZONTAL-03-02
HORIZONTAL-03-01
HORIZONTAL-03-00
HORIZONTAL-02-06
HORIZONTAL-02-05
HORIZONTAL-02-04
HORIZONTAL-02-03
HORIZONTAL-02-02
HORIZONTAL-02-01
HORIZONTAL-02-00
HORIZONTAL-01-06
HORIZONTAL-01-05
HORIZONTAL-01-04
HORIZONTAL-01-03
HORIZONTAL-01-02
HORIZONTAL-01-01
HORIZONTAL-01-00
HORIZONTAL-00-06
HORIZONTAL-00-05
HORIZONTAL-00-04
HORIZONTAL-00-03
HORIZONTAL-00-02
HORIZONTAL-00-01
HORIZONTAL-00-00
HORIZONTAL
HORI
HOORU
HOON
HOMOTHETIC
HOMOTHETI
HOLE
HOLDIN
HOLAM
HOLA
HOKA
HNUT
HNUOX
HNUO
HNOX
HNOT
HNOP
HNIX
HNIT
HNIP
HNIEX
HNIET
HNIEP
HNIE
HNEX
HNEP
HNAX
HNAT
HNAP
HMYX
HMYRX
HMYR
HMYP
HMUX
HMUT
HMURX
HMUR
HMUP
HMUOX
HMUOP
HMUO
HMOX
HMOT
HMOP
HMIX
HMIT
HMIP
HMIEX
HMIEP
HMIE
HMAX
HMAT
HMAP
HLYX
HLYT
HLYRX
HLYR
HLYP
HLUX
HLUT
HLURX
HLUR
HLUP
HLUOX
HLUOP
HLUO
HLOX
HLOP
HLIX
HLIT
HLIP
HLIEX
HLIEP
HLIE
HLEX
HLEP
HLAX
HLAT
HLAP
HIZB
HISTORI
HIRIQ
HIGH-REVERSED-
HIEX
HIEUH-SIOS
HIEUH-RIEUL
HIEUH-PIEUP
HIEUH-NIEUN
HIEUH-MIEUM
HIEU
HIDIN
HIDET
HIDE
HHWA
HHEE
HHAA
HEXIFOR
HEXAGON
HERUTU
HERU
HERMITIA
HERMIONIA
HERMES
HERAEU
HENG
HEMP
HELMET
HELME
HEKUTAARU
HEISEI
HEAVY
HEAVENL
HEAVEN
HEAVE
HEART
HEAR
HEADSTROKE
HEADSTON
HEADING
HBASA-ESAS
HBAS
HAYANNA
HAVE
HAUPTSTIMME
HATHI
HATE
HATA
HASE
HASANTA
HARPOON
HARPOO
HARMONIC
HARKLEA
HARDNESS
HANUNO
HANGZHO
HANDS
HANDLES
HAND
HAN-AKAT
HAMZA
HAMME
HALF
HALBERD
HALANTA
HAITU
HAIR
HAGLA
HAGL
HAFUKHA
HAFUKH
HAEG
HAARU
HAAM
HA-HA
H008
H007
H006A
H006
H005
H004
H003
H002
H001
H-TYP
GYON
GYEE
GYAS
GYAA
GWEE
GWAA
GURUSH
GURUN
GURAMUTON
GUR7
GUNU
GUEH
GUARDEDNESS
GUARAN
GSUM
GROUND
GRONTHISMATA
GREGORIA
GREE
GREATNESS
GREATER-THAN
GREATER-THA
GREATE
GREA
GRAVEYAR
GRAVE-MACRON
GRAVE-ACUTE-GRAVE
GRAV
GRATER
GRASS
GRAS
GRAPHEM
GRAMM
GRAIN
GRACE
GRAC
GORTHMIKO
GORT
GORGOTERI
GORGOSYNTHETON
GORGO
GORGI
GORA
GONG
GOLD
GOIN
GOAL
GNYIS
GNAVIYANI
GLOTTA
GLISSAND
GLEIC
GLAGOLI
GISH
GISAL
GIRUDAA
GIR3
GIR2
GINII
GIMEL
GIME
GIGA
GIET
GIDIM
GIBA
GHWA
GHUNNA
GHUNN
GHOU
GHOST
GHHA
GHEE
GHAYN
GHAN
GHAMAL
GHAINU
GHAIN
GHAI
GHAD
GGWI
GGWEE
GGWE
GGWAA
GGWA
GGUX
GGUT
GGURX
GGUR
GGUP
GGUOX
GGUOT
GGUOP
GGUO
GGOX
GGOT
GGOP
GGIX
GGIT
GGIEX
GGIEP
GGIE
GGEX
GGET
GGEP
GGAX
GGAT
GGAP
GGAA
GESHU
GESHTIN
GESHTI
GESH2
GERSHAYIM
GERMA
GERESH
GERES
GEOMETRICALL
GEOMETRI
GENTL
GENITIVE
GENIK
GENERI
GEMINI
GEMINATIO
GEDOLA
GEDE
GEAR
GDAN
GCIG
GBON
GBEN
GBAKURUNEN
GAYANUKITTA
GAYANNA
GAUNTLET
GATHERING
GATHERIN
GATE
GASHAN
GARSHUNI
GARON
GARMENT
GAR3
GAPPE
GANMA
GANGIA
GAND
GAN2
GAMMA
GAMLA
GAML
GAMAN
GAMAL
GAMA
GAETTA-PILLA
GADOL
GABA
GAAFU
G054
G053
G052
G051
G050
G049
G048
G047
G046
G045A
G045
G044
G043A
G043
G042
G041
G040
G039
G038
G037A
G037
G036A
G036
G035
G034
G033
G032
G031
G030
G029
G028
G027
G026A
G026
G025
G024
G023
G022
G021
G020A
G020
G019
G018
G017
G016
G015
G014
G013
G012
G011A
G011
G010
G009
G008
G007B
G007A
G007
G006A
G006
G005
G004
G003
G002
G001
FWEE
FWAA
FUSE
FURX
FUNERA
FUNCTION
FULLNESS
FTHOR
FROWNIN
FROWN
FRONT-TILTE
FROG
FRITU
FRICATIVE
FRETBOARD
FRENC
FRAN
FRAME
FRAGRANT
FRAGMENT
FRACTIO
FOURTEEN
FOURTEE
FOUR-STRIN
FOUR-PER-E
FOUR-LIN
FOUNTAIN
FOSTERING
FORTY
FORT
FORTE
FORM
FORMATTING
FORKE
FORCES
FORCE
FOOTSTOOL
FOOTNOT
FOOT
FONGMAN
FOLLY
FOLLOWING
FLUTE
FLOWER
FLOWE
FLOURISH
FLORETTE
FLORA
FLOOR
FLIP
FLIGHT
FLEXUS
FLEUR-DE-LIS
FLATTENE
FLATNESS
FLAT
FLAG-5
FLAG-4
FLAG-3
FLAG-2
FLAG-1
FLAG
FIXED-FOR
FIVE-LIN
FITA
FISHHOOK
FISHHOO
FISHEYE
FISH
FIRS
FIRE
FINIT
FINGERNAILS
FINGERE
FINANCIAL
FILLER
FILLE
FILL
FIGURE-3
FIGURE-2
FIGURE-1
FIGUR
FIGHT
FIFTY
FIFT
FIFTHS
FIFTH
FIFTEEN
FIFTEE
FIELD
FHTOR
FESTIVAL
FERRY
FERMATA
FERMAT
FENCE
FEMININ
FEMALE
FEMAL
FELLOWSHIP
FEENG
FEED
FEBRUARY
FEATHER
FEATHE
FEARN
FAYANNA
FATHER
FATHATAN
FATHATA
FATHA
FATH
FARS
FANG
FANEROSI
FAMILY
FALLIN
FAILURE
FAIHU
FAHRENHEIT
FACTO
FACSIMIL
FACE-6
FACE-5
FACE-4
FACE-3
FACE-2
FACE-1
FAAMAE
FAAI
FAAFU
F053
F052
F051C
F051B
F051A
F051
F050
F049
F048
F047A
F047
F046A
F046
F045A
F045
F044
F043
F042
F041
F040
F039
F038A
F038
F037A
F037
F036
F035
F034
F033
F032
F031A
F031
F030
F029
F028
F027
F026
F025
F024
F023
F022
F021A
F021
F020
F019
F018
F017
F016
F015
F014
F013A
F013
F012
F011
F010
F009
F008
F007
F006
F005
F004
F003
F002
F001A
F001
EZEN
EYBEYFILI
EYANNA
EXTRA-LO
EXTRA-HIG
EXTENSION
EXTENDE
EXPONEN
EXISTS
EXIST
EXHAUSTION
EXCLAMATION
EXCLAMATIO
EXCESS
EXCELLENT
EVENING
EURO-CURRENC
EULE
EU-U
EU-O
EU-EU
EU-EO
EU-E
EU-A
ETNAHTA
ETHE
ETERO
ETERNITY
ESUKUUDO
ESTIMATES
ESTIMATE
ESHE3
ESH21
ESH16
ESCAPE
ES-TE
ERROR-BARRE
ERIN2
ERAS
EQUIVALEN
EQUID
EQUIANGULA
EQUALS
EQUAL
EQUAL
EPSILON
EPSILO
EPIGRAPHI
EPIDAUREA
EPENTHETI
EPEGERMA
EOLHX
ENVELOPE
ENUMERATIO
ENTRY-2
ENTRY-1
ENTRY
ENTHUSIASM
ENTERPRISE
ENTERIN
ENTER
ENTE
ENQUIRY
ENLARGEMENT
ENDOFONON
ENDIN
ENDEP
ENDEAVOUR
ENCOUNTERS
ENCLOSURE
ENCLOSIN
ENARXI
ENARMONIO
EMPT
EMPHATI
EMPHASI
EMBROIDERY
EMBELLISHMENT
EMBEDDING
ELLIPSIS
ELLIPSE
ELIFI
ELEVEN
ELEVE
ELEMEN
ELECTRICA
ELECTRI
ELAFRON
EKSTREPTON
EKFONITIKON
EKARA
EJEC
EIGHTY
EIGHT
EIGHTHS
EIGHTH
EIGHTH
EIGHTEEN
EIGHTEE
EHWA
EGYPTOLOGICA
EGIR
EEYANNA
EEKAA
EEBEEFILI
EDITORIA
EDIN
EBEFILI
EASTER
EARTHL
EARTH
EART
EARL
EAMHANCHOLL
EAGLE
EADHADH
EABHADH
E038
E037
E036
E034A
E034
E033
E032
E031
E030
E029
E028A
E028
E027
E026
E025
E024
E023
E022
E021
E020A
E020
E019
E018
E017A
E017
E016A
E016
E015
E014
E013
E012
E011
E010
E009A
E009
E008A
E008
E007
E006
E005
E004
E003
E002
E001
DZZE
DZWE
DZJE
DZHE
DZHA
DZELO
DZEE
DYEH
DVISVARA
DUTIES
DURATION
DUR2
DUPONDIU
DUOX
DUN4
DUN3
DUGUD
DUB2
DRUM
DROPS
DROP-SHADOWE
DRIVE
DRIV
DRAUGHT
DRAGON
DRAFTIN
DRACHMAS
DRACHMA
DRACHM
DOWNWARDS
DOWNWARD
DOWN-POINTIN
DOWN
DOVE
DOUBT
DOUBLE
DOUBLE-LIN
DOUBLE-ENDE
DOUBLE
DOTTED-P
DOTTED-N
DOTTED-L
DOTTED
DOTTE
DOTS-8
DOTS-78
DOTS-7
DOTS-68
DOTS-678
DOTS-67
DOTS-6
DOTS-58
DOTS-578
DOTS-57
DOTS-568
DOTS-5678
DOTS-567
DOTS-56
DOTS-5
DOTS-48
DOTS-478
DOTS-47
DOTS-468
DOTS-4678
DOTS-467
DOTS-46
DOTS-458
DOTS-4578
DOTS-457
DOTS-4568
DOTS-45678
DOTS-4567
DOTS-456
DOTS-45
DOTS-4
DOTS-38
DOTS-378
DOTS-37
DOTS-368
DOTS-3678
DOTS-367
DOTS-36
DOTS-358
DOTS-3578
DOTS-357
DOTS-3568
DOTS-35678
DOTS-3567
DOTS-356
DOTS-35
DOTS-348
DOTS-3478
DOTS-347
DOTS-3468
DOTS-34678
DOTS-3467
DOTS-346
DOTS-3458
DOTS-34578
DOTS-3457
DOTS-34568
DOTS-345678
DOTS-34567
DOTS-3456
DOTS-345
DOTS-34
DOTS-3
DOTS-28
DOTS-278
DOTS-27
DOTS-268
DOTS-2678
DOTS-267
DOTS-26
DOTS-258
DOTS-2578
DOTS-257
DOTS-2568
DOTS-25678
DOTS-2567
DOTS-256
DOTS-25
DOTS-248
DOTS-2478
DOTS-247
DOTS-2468
DOTS-24678
DOTS-2467
DOTS-246
DOTS-2458
DOTS-24578
DOTS-2457
DOTS-24568
DOTS-245678
DOTS-24567
DOTS-2456
DOTS-245
DOTS-24
DOTS-238
DOTS-2378
DOTS-237
DOTS-2368
DOTS-23678
DOTS-2367
DOTS-236
DOTS-2358
DOTS-23578
DOTS-2357
DOTS-23568
DOTS-235678
DOTS-23567
DOTS-2356
DOTS-235
DOTS-2348
DOTS-23478
DOTS-2347
DOTS-23468
DOTS-234678
DOTS-23467
DOTS-2346
DOTS-23458
DOTS-234578
DOTS-23457
DOTS-234568
DOTS-2345678
DOTS-234567
DOTS-23456
DOTS-2345
DOTS-234
DOTS-23
DOTS-2
DOTS-18
DOTS-178
DOTS-17
DOTS-168
DOTS-1678
DOTS-167
DOTS-16
DOTS-158
DOTS-1578
DOTS-157
DOTS-1568
DOTS-15678
DOTS-1567
DOTS-156
DOTS-15
DOTS-148
DOTS-1478
DOTS-147
DOTS-1468
DOTS-14678
DOTS-1467
DOTS-146
DOTS-1458
DOTS-14578
DOTS-1457
DOTS-14568
DOTS-145678
DOTS-14567
DOTS-1456
DOTS-145
DOTS-14
DOTS-138
DOTS-1378
DOTS-137
DOTS-1368
DOTS-13678
DOTS-1367
DOTS-136
DOTS-1358
DOTS-13578
DOTS-1357
DOTS-13568
DOTS-135678
DOTS-13567
DOTS-1356
DOTS-135
DOTS-1348
DOTS-13478
DOTS-1347
DOTS-13468
DOTS-134678
DOTS-13467
DOTS-1346
DOTS-13458
DOTS-134578
DOTS-13457
DOTS-134568
DOTS-1345678
DOTS-134567
DOTS-13456
DOTS-1345
DOTS-134
DOTS-13
DOTS-128
DOTS-1278
DOTS-127
DOTS-1268
DOTS-12678
DOTS-1267
DOTS-126
DOTS-1258
DOTS-12578
DOTS-1257
DOTS-12568
DOTS-125678
DOTS-12567
DOTS-1256
DOTS-125
DOTS-1248
DOTS-12478
DOTS-1247
DOTS-12468
DOTS-124678
DOTS-12467
DOTS-1246
DOTS-12458
DOTS-124578
DOTS-12457
DOTS-124568
DOTS-1245678
DOTS-124567
DOTS-12456
DOTS-1245
DOTS-124
DOTS-1238
DOTS-12378
DOTS-1237
DOTS-12368
DOTS-123678
DOTS-12367
DOTS-1236
DOTS-12358
DOTS-123578
DOTS-12357
DOTS-123568
DOTS-1235678
DOTS-123567
DOTS-12356
DOTS-1235
DOTS-12348
DOTS-123478
DOTS-12347
DOTS-123468
DOTS-1234678
DOTS-123467
DOTS-12346
DOTS-123458
DOTS-1234578
DOTS-123457
DOTS-1234568
DOTS-12345678
DOTS-1234567
DOTS-123456
DOTS-12345
DOTS-1234
DOTS-123
DOTS-12
DOTS-1
DOTS
DOTLES
DORU
DOOR
DOONG
DONG
DOMAI
DOLLA
DOLIUM
DOKMAI
DOIT
DODEKATA
DOBRO
DOACHASHMEE
DOACHASHME
DO-O
DLEE
DKAR
DJERVI
DJERV
DIVORC
DIVISION
DIVISIO
DIVINATION
DIVIDES
DIVIDER
DIVIDE
DIVIDE
DIVID
DIVERGENCE
DITT
DISTORTION
DISTINGUISH
DISPERSION
DISIMOU
DISH
DISCONTINUOU
DISABLE
DIRG
DIRECTL
DIRECTIONA
DIPTE
DIPPER
DIPLOUN
DIPLI
DIPL
DINGBA
DIMMING
DIMINUTION-3
DIMINUTION-2
DIMINUTION-1
DIMINISHMENT
DIMIDI
DIMENSIONA
DIMENSIO
DIM2
DIGRAPH
DIGRAP
DIGRAMMO
DIGRAMM
DIGRA
DIGORGON
DIGORGO
DIGAMMA
DIFTOGGO
DIFONIAS
DIFFICULT
DIFFICULTIES
DIFFERENTIAL
DIFFERENC
DIFAT
DIESIS
DIESI
DIEP
DIATONO
DIATONIK
DIASTOL
DIAMOND
DIAMON
DIAMETE
DIALYTIKA
DIALYTIK
DIALECT-
DIAGONAL
DIAGONA
DIAERESIZE
DIAERESIS
DIAERESI
DHOU
DHOO
DHHU
DHHOO
DHHO
DHHI
DHHEE
DHHE
DHHA
DHEE
DHARMA
DHALETH
DHALATH
DHAL
DHADHE
DHAALU
DEYTERO
DEYTERO
DEXIA
DEVIC
DEVELOPMENT
DEUNG
DESI
DESCRIPTIO
DESCENDIN
DESCENDER
DERET-HIDET
DERET
DEPARTURE
DEPARTIN
DENTISTR
DENTA
DENOMINATOR
DENOMINATO
DENNEN
DENG
DENARIU
DELTA
DELT
DELT
DELPHI
DELIVERANCE
DELIMITER
DELIMITE
DELETE
DELET
DEKA
DEHI
DEGRE
DEFINITION
DEFECTIVENES
DEER
DEEL
DECRESCENDO
DECREASE
DECISIVENESS
DECIMA
DECEMBER
DECAYED
DEBI
DEATH
DEAD
DDWA
DDUX
DDUT
DDURX
DDUR
DDUP
DDUOX
DDUOP
DDUO
DDOX
DDOT
DDOP
DDOA
DDIX
DDIT
DDIP
DDIEX
DDIEP
DDIE
DDHO
DDHA
DDEX
DDEP
DDEE
DDDHA
DDDA
DDAYANNA
DDAX
DDAT
DDAP
DDAL
DDAHAL
DDAHA
DDAA
DAVIYANI
DAVID
DASIA
DASHE
DASH
DASEIA
DART
DARKENING
DARKENIN
DARGA
DARA4
DARA3
DAP-PRA
DAP-PI
DAP-MUO
DAP-BUO
DAP-BE
DANTAJ
DANG
DANDA
DAMP
DAMMATAN
DAMMATA
DAMMA
DAMM
DAMARU
DALETH
DALET
DALE
DALDA
DALATH
DALAT
DALAT
DAIR
DAING
DAHYAAUSH-2
DAHYAAUSH
DAGS
DAGGER
DAGESH
DAGES
DAGBASINNA
DAGA
DAGALGA
DAENG
DAASU
DAADHU
D067H
D067G
D067F
D067E
D067D
D067C
D067B
D067A
D067
D066
D065
D064
D063
D062
D061
D060
D059
D058
D057
D056
D055
D054A
D054
D053
D052A
D052
D051
D050I
D050H
D050G
D050F
D050E
D050D
D050C
D050B
D050A
D050
D049
D048A
D048
D047
D046A
D046
D045
D044
D043
D042
D041
D040
D039
D038
D037
D036
D035
D034A
D034
D033
D032
D031A
D031
D030
D029
D028
D027A
D027
D026
D025
D024
D023
D022
D021
D020
D019
D018
D017
D016
D015
D014
D013
D012
D011
D010
D009
D008A
D008
D007
D006
D005
D004
D003
D002
D001
CYRX
CYRENAI
CYPRIO
CYPERUS
CYLINDRICITY
CWOO
CWII
CWEORTH
CWAA
CUSTOME
CURX
CURVIN
CURVE
CURVE
CURV
CURRENT
CURREN
CURL
CURL
CUOX
CUOP
CUBED
CUATRILLO
CUATRILL
CRYPTOGRAMMI
CRUZEIR
CROSSIN
CROSSHATC
CROSSED-TAIL
CROSSE
CROSSBONES
CROSS
CROS
CROP
CROIX
CRESCENT
CRESCEN
CREDI
CREATIV
COVER
COUNTIN
COUNTERSINK
COUNTERBORE
COUNCI
CORRESPOND
CORRECT
CORPSE
CORPORATION
CORONIS
CORNERS
CORNER
CORNE
COPYRIGHT
COPYRIGH
COPY
COPRODUCT
CONVERGIN
CONTRO
CONTRARIETY
CONTRACTION
CONTOURE
CONTOU
CONTENTION
CONTEMPLATION
CONTAIN
CONTAININ
CONTAI
CONTACT
CONSTANT
CONSTAN
CONSTANCY
CONSONAN
CONSECUTIV
CONJUNCTION
CONJUGAT
CONJOININ
CONICA
CONGRUEN
CONGRATULATION
CONFLICT
CONCAVE-SIDE
CONCAVE-POINTE
COMPOSITION
COMPOSITIO
COMPLIANCE
COMPLETION
COMPLETED
COMPLEMENT
COMPARE
COMMO
COMMERCIA
COMMA
COMM
COMIN
COMET
COMB
COLUMN
COLOR
COLL
COFFIN
COENG
CODA
CLUSTE
CLUB-SPOKE
CLUB
CLOUD
CLOU
CLOTHES
CLOTH
CLOSENESS
CLOSED
CLOSE
CLOS
CLOCKWIS
CLIVIS
CLINGIN
CLIMACUS
CLIFF
CLICK
CLEF-2
CLEF-1
CLEF
CLEA
CLAW
CLAN
CIVILIAN
CIRCUMFLEX
CIRCUMFLE
CIRCULATIO
CIRCLES
CIRCLE
CIEX
CIEUC-SSANGPIEUP
CIEUC-PIEUP
CIEUC-IEUNG
CIEU
CIET
CIEP
CHYX
CHYT
CHYRX
CHYR
CHYP
CHUX
CHURX
CHURCH
CHUR
CHUP
CHUOX
CHUOT
CHUOP
CHUO
CHULA
CHRYSANTHEMUM
CHRONOU
CHRONON
CHROM
CHRO
CHRIVI
CHOX
CHOT
CHOREVM
CHOP
CHOKE
CHOE
CHOA
CHITUEUMSSANGSIOS
CHITUEUMSSANGCIEUC
CHITUEUMSIOS
CHITUEUMCIEUC
CHITUEUMCHIEUCH
CHIRON
CHIRET
CHING
CHINES
CHIN
CHILL
CHILD
CHIL
CHIK
CHIEUCH-KHIEUKH
CHIEUCH-HIEUH
CHIEUC
CHHA
CHEX
CHEVRO
CHET
CHES
CHEP
CHEINAP
CHEIKHEI
CHEE
CHECK
CHEC
CHAX
CHAVIYANI
CHATTAWA
CHAT
CHARIOT
CHARIO
CHARACTERS
CHARACTER
CHAR
CHAP
CHANGE
CHANG
CHAN
CHAMKO
CHAMILON
CHAMILI
CHAIR
CHAINS
CHADA
CHAA
CERES
CEREK
CER-WA
CEONGCHIEUMSSANGSIOS
CEONGCHIEUMSSANGCIEUC
CEONGCHIEUMSIOS
CEONGCHIEUMCIEUC
CEONGCHIEUMCHIEUCH
CENTURIA
CENTRELIN
CENTRE
CENTRE
CENTR
CELSIUS
CEIRT
CEILING
CEDILLA
CEDILL
CECEK
CECAK
CECA
CEALC
CCHU
CCHO
CCHI
CCHEE
CCHE
CCHAA
CCHA
CCEE
CCAA
CAYN
CAYANNA
CAVE
CAUTIO
CAULDRON
CAUDA
CATAWA
CASTLE
CARYSTIA
CART
CARRIAG
CARPENTR
CARON
CARO
CARI
CARIA
CARET
CARE
CAPTIVE
CAPRICORN
CAPO
CAPITAL
CANTILLATIO
CANDRABINDU
CANDRABIND
CANDRA
CANDR
CANCER
CANCELLATIO
CANCEL
CANCE
CAMNU
CALYA
CALY
CALL
CALC
CAKRA
CAESURA
CADUCEUS
CAANG
CAAI
C024
C023
C022
C021
C020
C019
C018
C017
C016
C015
C014
C013
C012
C011
C010A
C010
C009
C008
C007
C006
C005
C004
C003
C002C
C002B
C002A
C002
C001
C-SIMPLIFIE
C-39
C-18
BZUN
BYELORUSSIAN-UKRAINIA
BWEE
BUUMISH
BUSSYERU
BUR2
Degas are we not drawn onward no In union drawn onward to new eras aged
BUOX
BUOP
BUMP
BULUG
BULU
BULLSEYE
BULL
BULLET
BULLE
BULL
BUKY
BUHI
BUGINES
BUCKLE
BSTAR
BSKU
BSKA
BSDU
BRUSH
BRUS
BRONZE
BROKE
BROA
BRISTLE
BRIDG
BREVIS
BREVE-MACRON
BREV
BREAT
BREAKTHROUGH
BRANCHIN
BRANCH
BRANC
BRAKCET
BRACKETE
BRACKE
BRACE
BOWTIE
BOWTI
BOUNDAR
BOTTOM-LIGHTE
BOTTOM
BOTTO
BORUTO
BOOMERANG
BONE
BODY
BOAR
BLUE
BLOOD
BLOCK
BLENDE
BLANK
BLAN
BLAD
BLACKFOO
BLACK-LETTE
BLACK-FEATHERE
BLACK
BITTER
BITIN
BISMILLA
BISHOP
BISECTIN
BISAH
BIRU
BIRGA
BIRD
BIOHAZAR
BINOCULA
BINDIN
BINDI
BINAR
BILABIA
BIET
BIDENTA
BIBLE-CRE
BHOO
BHETH
BHEE
BHAM
BEYYAL
BEVERAGE
BETWEEN
BETWEE
BETH
BETA
BESID
BERKANA
BERBE
BEOR
BENZEN
BENDE
BEND
BELT
BELO
BELL
BELGTHO
BEITH
BEHIN
BEHEH
BEHE
BEGINNING
BEGI
BEFOR
BEETA
BEEHIVE
BEEH
BECAUSE
BEAVE
BEAT
BEAN
BEAME
BCAD
BBYX
BBYT
BBYP
BBUX
BBUT
BBURX
BBUR
BBUP
BBUOX
BBUOP
BBUO
BBOX
BBOT
BBOP
BBIX
BBIT
BBIP
BBIEX
BBIET
BBIEP
BBIE
BBEX
BBEP
BBAX
BBAT
BBAP
BAYANNA
BATHTUB
BATHAMASAT
BASSA
BASHKI
BASH
BASEBALL
BASE
BARS
BARRIER
BARREKH
BARREE
BARRE
BARLINE
BARLEY
BARIYOOSAN
BARA2
BANTOC
BAND
BAN2
BAMBOOS
BAMBOO
BALUDA
BALLO
BALLOON-SPOKE
BALAG
BAIRKAN
BAIMAI
BAHT
BAHIRGOMUKHA
BAHAR2
BAGA
BAG3
BADGER
BACKSPACE
BACKSLASH
BACKSLAS
BACK-TILTE
BACK
BAARERU
B305
B259
B258
B257
B256
B255
B253
B252
B251
B250
B249
B248
B246
B245
B236
B234
B232
B229
B228
B227
B226
B222
B221
B219
B218
B217
B216
B215
B214
B213
B212
B211
B210
B209
B208
B207
B206
B205
B204
B203
B202
B201
B200
B190
B189
B185
B184
B183
B182
B181
B180
B179
B178
B177
B174
B172
B171
B170
B169
B168
B167
B166
B165
B164
B161
B160
B158
B157
B155
B154
B153
B152
B150
B146
B142
B132
B109
B109
B108
B108
B107
B107
B106
B106
B105
B105
B089
B086
B083
B082
B079
B064
B063
B056
B049
B047
B034
B022
B019
B018
B009
B008
B007
B006
B005A
B005
B004
B003
B002
B001
AYAH
AVESTA
AVERAG
AVAKRAHASANYA
AVAGRAHA
AUYANNA
AUTUMN
AUSTRA
AURAMAZDAAHA
AURAMAZDAA-2
AURAMAZDAA
AUNN
AUGUST
AUGMENTATIO
ATTI
ATTHACAN
ATTENTION
ATTA
ATNA
ATMAAU
ATIYA
ATHARVAVEDI
ATHAPASCA
ASYUR
ASYMPTOTICALL
ASTROLOGICA
ASTERISM
ASTERISK
ASTERISK
ASTERIS
ASTERISCUS
ASSYRIA
ASSERTION
ASPIRATE
ASPER
ASHGAB
ASH9
ASCENT
ASCENDIN
ASAL2
ARUHUA
ARTAB
ARSEOS
ARSEO
ARROWS
ARROWHEAD
ARROWHEA
ARROW-TAIL
ARRIVE
ARRAY
ARPEGGIAT
AROUSIN
AROUR
AROUND-PROFILE
AROUN
ARMY
ARMOUR
ARLAU
ARKTIK
ARKAB
ARKAANU
ARISTERA
ARISTER
ARIES
ARGOTERI
ARGOSYNTHETON
ARGI
AREPA
ARDHAVISARGA
ARCHAION
ARCHAIO
ARCHAI
ARAMAI
ARAEAE
ARAEA-U
ARAEA-I
ARAEA-EO
ARAEA-E
ARAEA-A
ARAD
ARABIC-INDI
ARABIA
AR-RAHMA
AR-RAHEEM
AQUARIUS
APRIL
APPROXIMATEL
APPROXIMATE
APPROACHE
APPROACH
APPLICATION
APOTHES
APOTHEMA
APOSTROPHE
APOSTROFOS
APOSTROFO
APOSTROFO
APODEXIA
APODERM
APLOUN
APIN
APES
APART
APAATO
ANUSVARAYA
ANUSVARA
ANUSVAR
ANUDATTA
ANUDATT
ANTIRESTRICTION
ANTIKENOMA
ANTIKENOKYLISMA
ANTIFONIA
ANTICLOCKWISE-ROTATE
ANTICLOCKWIS
ANTARGOMUKHA
ANSU
ANSHE
ANPEA
ANNUIT
ANNOTATIO
ANNAAU
ANKH
ANHU
ANGULAR
ANGSTRO
ANGKHANKHU
ANGED
ANDAP
ANCORA
ANCHOR
ANATRICHISMA
ANAP
AMPS
AMPERSAND
AMOUN
AMAR
AMALGAMATIO
ALVEOLA
ALTERNATIV
ALTERNATIO
ALTERNAT
ALTA
ALPHA
ALPH
ALPAPRANA
ALPAPRAAN
ALPA
ALMOS
ALLO
ALLIANCE
ALLA
ALIGNE
ALIFU
ALGI
ALFA
ALEU
ALEPH
ALEMBIC
ALEF
ALAYHE
ALAYH
ALAPH
AL-LAKUNA
AKTIESELSKAB
AKHMIMI
AKBA
AKARA
AKAR
AIYANNA
AIVILI
AITO
AIRPLANE
AINN
AILM
AIKARA
AIHVUS
AHSDA
AHSA
AHAGGA
AHAD
AGUNG
AGOG
AGGRAVATION
AGGRAVATE
AGAIN
AFTE
AFSAAQ
AFRICA
AFOREMENTIONED
AFGHAN
AEYANNA
AESCULAPIUS
AESC
AELA-PILLA
AEGEA
AEEYANNA
AEDA-PILLA
ADVANCE
ADEG
ADDRESSE
ADDAK
ACUTE-MACRON
ACUTE-GRAVE-ACUTE
ACUT
ACTUALL
ACTIVAT
ACROPHONI
ACKNOWLEDGE
ACCUMULATION
ACCOUN
ACCENT-STACCATO
ACCENT
ACCEN
ACADEM
ABYSMA
ABUNDANCE
ABKHASIA
ABBREVIATIO
ABAFILI
AAYANNA
AABAAFILI
AA032
AA031
AA030
AA029
AA028
AA027
AA026
AA025
AA024
AA023
AA022
AA021
AA020
AA019
AA018
AA017
AA016
AA015
AA014
AA013
AA012
AA011
AA010
AA009
AA008
AA007B
AA007A
AA007
AA006
AA005
AA004
AA003
AA002
AA001
A070
A069
A068
A067
A066
A065
A064
A063
A062
A061
A060
A059
A058
A057
A056
A055
A054
A053
A052
A051
A050
A049
A048
A047
A046
A045A
A045
A044
A043A
A043
A042A
A042
A041
A040A
A040
A039
A038
A037
A036
A035
A034
A033
A032A
A017A
A014A
A006B
A006A
A005A
A-EU
-PHRU
-KHYU
-KHYIL
-DZU
-CHA
-CHAL
xxsubtype is an example module showing how to subtype builtin types from C.
test_descr.py in the standard test suite requires it in order to complete.
If you don't care about the examples, and don't intend to run the Python
test suite, you can recompile Python without Modules/xxsubtype.c.
Update this hash object's state with the provided string.
Return the digest value as a string of hexadecimal digits.
Return the digest value as a string of binary data.
Return a copy of the hash object.
Return a new SHA-384 hash object; optionally initialized with a string.
Return a new SHA-512 hash object; optionally initialized with a string.
Update this hash object's state with the provided string.
Return the digest value as a string of hexadecimal digits.
Return the digest value as a string of binary data.
Return a copy of the hash object.
Return a new SHA-224 hash object; optionally initialized with a string.
Return a new SHA-256 hash object; optionally initialized with a string.
Update this hashing object's state with the provided string.
Return the digest value as a string of hexadecimal digits.
Return the digest value as a string of binary data.
Return a copy of the hashing object.
Return a new SHA hashing object.  An optional string argument
may be provided; if present, this string will be automatically
hashed.
copy() -> md5 object
Return a copy (``clone'') of the md5 object.
hexdigest() -> string
Like digest(), but returns the digest as a string of hexadecimal digits.
digest() -> string
Return the digest of the strings passed to the update() method so
far. This is a 16-byte string which may contain non-ASCII characters,
including null bytes.
update (arg)
Update the md5 object with the string arg. Repeated calls are
equivalent to a single call with the concatenation of all the
arguments.
new([arg]) -> md5 object
Return a new md5 object. If arg is present, the method call update(arg)
is made.
An md5 represents the object used to calculate the MD5 checksum of a
string of information.
Methods:
update() -- updates the current digest with an additional string
digest() -- return the current digest value
hexdigest() -- return the current digest as a string of hexadecimal digits
copy() -- return a copy of the current md5 object
This module implements the interface to RSA's MD5 message digest
algorithm (see also Internet RFC 1321). Its use is quite
straightforward: use the new() to create an md5 object. You can now
feed this object with arbitrary strings using the update() method, and
at any point you can ask it for the digest (a strong kind of 128-bit
checksum, a.k.a. ``fingerprint'') of the concatenation of the strings
fed to it so far using the digest() method.
Functions:
new([arg]) -- return a new md5 object, initialized with arg if provided
md5([arg]) -- DEPRECATED, same as new, but for compatibility
Special Objects:
MD5Type -- type object for md5 objects
spwd.struct_spwd: Results from getsp*() routines.
This object may be accessed either as a 9-tuple of
  (sp_nam,sp_pwd,sp_lstchg,sp_min,sp_max,sp_warn,sp_inact,sp_expire,sp_flag)
or via the object attributes as named in the above tuple.
getspall() -> list_of_entries
Return a list of all available shadow password database entries, in arbitrary order.
See spwd.__doc__ for more on shadow password database entries.
getspnam(name) -> (sp_namp, sp_pwdp, sp_lstchg, sp_min, sp_max,
                    sp_warn, sp_inact, sp_expire, sp_flag)
Return the shadow password database entry for the given user name.
See spwd.__doc__ for more on shadow password database entries.
This module provides access to the Unix shadow password database.
It is available on various Unix versions.
Shadow password database entries are reported as 9-tuples of type struct_spwd,
containing the following items from the password database (see `<shadow.h>'):
sp_namp, sp_pwdp, sp_lstchg, sp_min, sp_max, sp_warn, sp_inact, sp_expire, sp_flag.
The sp_namp and sp_pwdp are strings, the rest are integers.
An exception is raised if the entry asked for cannot be found.
You have to be root to be able to use this module.
b65551cc62504bf758e2f57514d33cf3017b8f.debug
.shstrtab
.interp
.note.ABI-tag
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rela.dyn
.rela.plt
.init
.plt.got
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.init_array
.fini_array
.jcr
.dynamic
.got.plt
.data
.bss
.gnu_debuglink
