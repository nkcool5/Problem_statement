/lib64/ld-linux-x86-64.so.2
2:P)
|fUa
libbfd-2.26.1-system.so
_ITM_deregisterTMCloneTable
__gmon_start__
_Jv_RegisterClasses
_ITM_registerTMCloneTable
bfd_check_format
xexit
_init
xstrdup
bfd_get_arch
cplus_demangle_name_to_style
_sch_istable
xmalloc_set_program_name
bfd_perror
bfd_errmsg
bfd_get_section_by_name
xmalloc
cplus_demangle_set_style
xrealloc
bfd_get_sign_extend_vma
bfd_demangle
bfd_arch_bits_per_address
bfd_get_error
bfd_get_section_contents
bfd_openr
filename_cmp
bfd_get_arch_size
bfd_printable_name
_fini
libc.so.6
__stpcpy_chk
strcpy
__printf_chk
_IO_putc
fopen
strncmp
optind
strrchr
dcgettext
ftell
strncpy
__stack_chk_fail
putchar
abort
stdin
rewind
strtol
feof
fgetc
fgets
strlen
setitimer
memset
__errno_location
fseek
__fprintf_chk
stdout
fputc
fputs
memcpy
fclose
strtoul
getenv
sscanf
optarg
stderr
fscanf
getopt_long
fwrite
fread
strchr
qsort
__strcpy_chk
__sprintf_chk
memmove
bindtextdomain
strcmp
__libc_start_main
ferror
sysconf
free
_edata
__bss_start
_end
GLIBC_2.3.4
GLIBC_2.14
GLIBC_2.4
GLIBC_2.2.5
52X!
%4X!
%2X!
%*X!
%"X!
%zW!
%rW!
%jW!
%bW!
%ZW!
%RW!
%JW!
%BW!
%:W!
%2W!
%*W!
%"W!
%zV!
%rV!
%jV!
%bV!
%ZV!
%RV!
%JV!
%BV!
%:V!
%2V!
%*V!
%"V!
-#^!
=[[!
=m]!
=W]!
=c\!
=r[!
=\[!
=.[!
=	[!
=>Z!
=|Y!
=WY!
=RY!
=6U!
%^X!
%RX!
%#X!
=x^!
=OW!
=4W!
-xT!
=yT!
q(H9r(
B +A 
AWAVAUATA
[]A\A]A^A_
A Hc
uDL9
5[Q!
%BP!
L9%1G!
 -> 
5XO!
####I
AUATI
=>N!
([]A\A]
-aS!
=|K!
AVAUI
ATUH
-RR!
L;-SR!
[]A\A]A^
AWAVAUATUSH
H;\$
H;D$(
|$ H
8[]A\A]A^A_
AUATUSH
9C ~
HcK H
-eF!
-0F!
[]A\A]
HcK H
AVAUATUI
[]A\A]A^
t	[]A\A]A^
AUATUSH
%'H!
L;%(H!
L9%lG!
[]A\A]
?_t/
>_t:H
A(H9B(w0r
0H9u
AVAUI
SuFL
[]A\A]A^
AWAVAUATUSH
=u<!
H)C(H
v(H9
-+B!
L;-,B!
<$f.
C t$
-m<!
[]A\A]A^A_
-\7!
5,6!
AVAUATI
[]A\A]A^
53.!
]A\A]A^
=&-!
[]A\A]A^
B09A0
AWAVA
AUATI
([]A\A]A^A_
D9d$
D;d$
u	M9
AWAVAUATUSH
XC f
[]A\A]A^A_
[]A\A]A^A_
AWAVAUATUSH
D$h1
t$ 1
t$HL
t$ H
\$HA
t	A;
[(XZH
|$ 1
t$PL
|$ H
\$PH
[0AZA[H
D$hdH3
x[]A\A]A^A_
D$hdH3
x[]A\A]A^A_
AWAUL
D$0H
AWAV
VUUUAUATUSH
D$81
D;d$
D;d$
D$8dH3
[]A\A]A^A_
AWAVAUATUSH
D$81
T$01
D$(H
D$(1
t$(L
D$0H
D$8dH3
[]A\A]A^A_
L$01
ATUSH
[]A\
AWAV
AUATUSH
vEE1
[]A\A]A^A_
AUATI
H+J(
L$ L
([]A\A]
AVAUATUSH
D$(1
t$(dH34%(
0[]A\A]A^
<.u7L
u <.I
tR<$u
~eHc
ATUI
t&[]A\
[]A\
AWAVAUATUSH
D$(1
L$'1
D$'H
Hc|$
L$'1
|$'t
D$(dH3
[]A\A]A^A_
AWAVAUATUSH
D$81
T$0H
t$(H
D$8dH3
H[]A\A]A^A_
Tacocat
AWAVAUATUSH
D$ H
h8H9
d$8H
D$pH
;D$(
|$8L
;D$,
|$ L
t$pE9
t$8H
t$pD
t$pH
|$8H
\$@H
|$@Hi
D$HH
D$PH
Z(H9
|$PA
G A9E M
|$8I
|$PI
l$Pt
|$PH
T$PL
|$PH
\$@Mi
L$PL
L$PL+L$HI
D$@H
D$HH
D$PH
[]A\A]A^A_
H+T$HH
t$8H
|$PM
l$PI
|$8I
D$PH
v+Hc
AWAVI
AUATUSH
D$x1
\$PL
t$0L
t$8L
t$@L
D$@)
H9L$0
H9L$8
|$pL
L;%K
D$xdH3
[]A\A]A^A_
|$0L
l$0@
t$ L
t$(L
t$ H
t$(L
L$ H
L$8H
t$(L
HcD$(H;
L$0H
D$8D
D$(H
AWAV
AUATI
D$H1
t$ Hc<
|$ H
@uOH
Degas are we not drawn onward no In union drawn onward to new eras aged
L9=0
D$HdH3
X[]A\A]A^A_
|$0H
$gmonH
D$(1
t$(dH34%(
r(H9q(w
AVAUATUSH
[]A\A]A^
AWAVAUATUSH
l$,A
D$ f
d$ @
D$,9
8[]A\A]A^A_
AWAVAUATUSH
D$h1
\$ 1
AUSH
D$hdH3
x[]A\A]A^A_
H98w
AWAVAUATI
t$ dH
D$X1
t$(L
t$0L
t$(H
\$ f
|$@L
|$@H
D$XdH3
h[]A\A]A^A_
H9D$
T$ H
T$0H
T$8H
D$@H
D$Lf
t$@H
ATUI
[]A\
[]A\
AWAVAUATI
0tAH
|$ H
-ann
[]A\A]A^A_
AVAUI
[]A\A]A^
w(r!
AUATI
I;\$
I9l$
I9\$
I9\$
I+D$
[]A\A]
AWAVH
AUAT1
[]A\A]A^A_
H93wFH
H;3s
8H;3r(H;s
ATUH
tlH9
[]A\
D$ ]A\
;V u
ATUA
[]A\
AVAUATUSH
L9c H
[]A\A]A^
AUATI
[]A\A]
Borrow or rob
[]A\A]
AVAUATUSH
dH34%(
[]A\A]A^
AVAUI
H+X(H
[]A\A]A^
AWAVAUATI
H+x(H
[]A\A]A^A_
AWAVAUATI
H+X(H
[]A\A]A^A_
AWAVAUATI
H+X(H
[]A\A]A^A_
AVAUI
H+x(H
u6H;(
[]A\A]A^
AVAUI
H+x(H
[]A\A]A^
uvH;
AVAUI
H+x(H
[]A\A]A^
uBH;(
ATUS
[]A\
t;USH
AWAVAUATUSH
Hct$
[]A\A]A^A_
t#<"
<'t,<"
AWAVI
AUATI
"<:w
[]A\A]A^A_
AWAVE1
AUATUSH
H[]A\A]A^A_
L$<L
\$0H
L$(H
T$ Hc6H
T$ H
\$0H
L$(L
L$<H
D$ H
L$ H
AWAVA
AUATL
[]A\A]A^A_
<unknown>
%9d %10lu
Execution Summary:
%9ld   Lines executed
%s: %s: unexpected end of file
[bb_read_rec] 0x%lx->0x%lx (%s:%d) cnt=%lu
%s: warning: ignoring basic-block exec counts (use -l or --line)
%s:%d: (%s:0x%lx) %lu executions
Top %d Lines:
     Line      Count
%9ld   Executable lines in this file
%9.2f   Percent of the file executed
%9lu   Total number of line executions
%9.2f   Average executions per line
Y@[cg_tally] arc from %s to %s traversed %lu times
[cg_read_rec] frompc 0x%lx selfpc 0x%lx count %lu
[cg_write_arcs] frompc 0x%lx selfpc 0x%lx count %lu
[arc_lookup] parent == 0 || child == 0
[arc_lookup] parent %s child %s
[arc_lookup]	 parent %s child %s
[arc_add] %lu arcs from %s to %s
[cg_assemble] topological sort listing
inherits print-flag %d and prop-fract %f
 ends up with printflag %d and prop-fract %f
[prop_flags] time %f propself %f print_time %f
[tally] hit %lu += %lu
[cycle_link] 
 is the head of cycle %d
[cg_assemble] 
[prop_flags] 
[propagate] toporder botches
[prop_time] child 	
 with %f %f %lu/%lu
[prop_time] parent	
[prop_time] share %f
?[dfn] dfn( 
[find_cycle] 
[find_cycle] tail 
[find_cycle] new cyclehead 
[find_cycle] glomming 
 onto 
[find_cycle] and its tail 
[pre_visit]		%d:
[post_visit]	%d: 
[post_visit]		member 
-> cg.top_order = %d
[find_cycle] dfn_depth %d cycle_top %d 
[find_cycle] glommed, but not to head
[post_visit]		is part of a cycle
[find_cycle] couldn't find head of cycle
%-6.6s %5.1f %7.2f %11.2f %7lu
%6.6s %5.5s %7.7s %11.11s %7lu %7.7s     
%6.6s %5.5s %7.7s %7.7s %7lu %7.7s     
%6.6s %5.5s %7.2f %11.2f %7lu/%-7lu     
%6.6s %5.5s %7.2f %7.2f %7lu/%-7lu     
		     Call graph (explanation follows)
granularity: each sample hit covers %ld byte(s)
%6.6s %5.5s %7.7s %11.11s %7.7s/%-7.7s     %-8.8s
%-6.6s %5.5s %7.7s %11.11s %7.7s+%-7.7s %-8.8s	%5.5s
index %% time    self  children    called     name
%6.6s %5.5s %7.7s %11.11s %7.7s %7.7s     <spontaneous>
%6.6s %5.5s %7.7s %7.7s %7.7s %7.7s     <spontaneous>
-----------------------------------------------
%-6.6s %5.1f %7.2f %7.2f %7lu
+%-7lu
 %7.7s
 <cycle %d as a whole> [%d]
[cmp_arc] 
 calls 
 %f + %f %lu/%lu
%-6.6s %5.1f %7.2f %11.2f
%-6.6s %5.1f %7.2f %7.2f
+%-7lu 
 %7.7s %7.7s 
%6.6s %5.5s %7.2f %11.2f %7lu
%6.6s %5.5s %7.2f %7.2f %7lu
			Call graph
 for %.2f%% of %.2f seconds
 no time propagated
parents
total
called
index
name
self
descendants
%time
children
     
Index by function name
%6.6s %-19.19s
 %s 
 (%s)
%6.6s 
?%s: unable to parse mapping file %s.
[get_src_info] 0x%lx -> %s:%d (%s)
[get_src_info] no info for 0x%lx (%s:%d,%s)
[core_sym_class] %s: not a function
[core_sym_class] %s is of class %c
%s: %s: not in executable format
%s: can't find .text section in %s
%s: ran out room for %lu bytes of text space
%s: -c not supported on architecture %s
[core_create_function_syms] rejecting: 0x%lx %s
[core_create_function_syms] %ld %s 0x%lx
[core_create_line_syms] %lu %s 0x%lx
%s: somebody miscounted: ltab.len=%d instead of %ld
%s: could not open %s.
No symbols in 
.clone.
.constprop.
___gnu_compiled
.text
$CODE$
%s: %s: %s
bfd_get_section_contents
%s: can't do -c
%s %c %s
%s: file `%s' has no symbols
%s: address size has unexpected value of %u
%s: file too short to be a gmon file
%s: file `%s' has bad magic cookie
%s: file `%s' has unsupported version %d
%s: %s: found bad tag %d (file corrupted?)
%s: profiling rate incompatible with first gmon file
%s: incompatible with first gmon file
[gmon_out_read] lowpc 0x%lx highpc 0x%lx ncnt %d
[gmon_out_read] samp_bytes %d hist_num_bins %d
%s: file '%s' does not appear to be in gmon.out format
%s: unexpected EOF after reading %d/%d bins
[gmon_out_read] frompc 0x%lx selfpc 0x%lx count %lu
time is in ticks, not seconds
%s: don't know how to deal with file format %d
File `%s' (version %d) contains:
	%d basic-block count records
[dumpsum] frompc 0x%lx selfpc 0x%lx count %lu
gmon
	%d histogram record
	%d histogram records
	%d call-graph record
	%d call-graph records
	%d basic-block count record
Usage: %s [-[abcDhilLsTvwxyz]] [-[ACeEfFJnNOpPqSQZ][name]] [-I dirs]
	[-d[num]] [-k from/to] [-m min-count] [-t table-length]
	[--[no-]annotated-source[=name]] [--[no-]exec-counts[=name]]
	[--[no-]flat-profile[=name]] [--[no-]graph[=name]]
	[--[no-]time=name] [--all-lines] [--brief] [--debug[=level]]
	[--function-ordering] [--file-ordering] [--inline-file-names]
	[--directory-path=dirs] [--display-unused-functions]
	[--file-format=name] [--file-info] [--help] [--line] [--min-count=n]
	[--no-static] [--print-path] [--separate-files]
	[--static-call-graph] [--sum] [--table-length=len] [--traditional]
	[--version] [--width=n] [--ignore-non-functions]
	[--demangle[=STYLE]] [--no-demangle] [--external-symbol-table=name] [@FILE]
	[image-file] [profile-file...]
<http://www.sourceware.org/bugzilla/>
(GNU Binutils for Ubuntu) 2.26.1
Based on BSD gprof, copyright 1983 Regents of the University of California.
This program is free software.  This program has absolutely no warranty.
%s: unknown demangling style `%s'
aA::bBcC::d::De:E:f:F:hiI:J::k:lLm:n:N:O:p::P::q::Q::rR:sS:t:Tvw:xyzZ::
%s: Only one of --function-ordering and --file-ordering may be specified.
%s: sorry, file format `prof' is not yet supported
%s: gmon.out file is missing histogram
%s: gmon.out file is missing call-graph data
Report bugs to %s
/usr/share/locale
gprof
[main] debug-level=0x%x
%s: unknown file format %s
external-symbol-table: %s
GNU gprof %s
GPROF_PATH
gmon.sum
line
no-static
ignore-non-functions
Do nine men interpret Nine men I nod
external-symbol-table
no-annotated-source
no-flat-profile
no-graph
no-exec-counts
function-ordering
file-ordering
file-info
all-lines
no-demangle
directory-path
display-unused-functions
inline-file-names
min-count
print-path
separate-files
static-call-graph
table-length
no-time
width
brief
debug
help
file-format
traditional
version
_gprof_mcount
__mcount
__mcount_internal
__mcleanup
gmon.out
a.out
[scale_and_align_entries] pushing 0x%lx to 0x%lx
[assign_samples] bin_low_pc=0x%lx, bin_high_pc=0x%lx, bin_count=%u
[assign_samples] [0x%lx,0x%lx) %s gets %f ticks %ld overlap
[assign_samples] total_time %f
Each sample counts as %g %s.
%5.5s %10.10s %8.8s %8.8s %8.8s %8.8s  %-8.8s
%5.5s %9.9s  %8.8s %8.8s %8.8s %8.8s  %-8.8s
%s: found a symbol that covers several histogram records
%s: dimension unit changed between histogram records
%s: from '%s'
%s: to '%s'
%s: dimension abbreviation changed between histogram records
%s: from '%c'
%s: to '%c'
%s: different scales in histogram records
%s: overlapping histogram records
[hist_read_rec] n_lowpc 0x%lx n_highpc 0x%lx ncnt %u
%s: %s: unexpected EOF after reading %u of %u samples
flat profile:
Flat profile:
%c%c/call
 for %.2f%% of %.2f %s
 no time accumulated
total 
self  
cumulative
%5.1f %10.2f %8.2f
%6.2f %9.2f %8.2f
 %8lu %8.2f %8.2f  
 %8.8s %8.8s %8.8s  
[hist_read_rec] 0x%lx: %u
MbP? 
[annotate_source]: looking for %s, trying %s
%s: could not locate `%s'
*** File %s:
[symtab_finalize] favor %s@%c%c over %s@%c%c
[symtab_finalize]: removed %d duplicate entries
[symtab_finalize] 0x%lx-0x%lx	%s
[dbg_sym_lookup] address 0x%lx
[dbg_sym_lookup] binary search fails???
[dbg_sym_lookup] low=0x%lx, mid=0x%lx, high=0x%lx
[dbg_sym_lookup] sym[m]=0x%lx sym[m + 1]=0x%lx
[sym_lookup] %d probes (symtab->len=%u)
[sym_lookup] %d (%u) probes, fall off
 (addr=%lx)
[parse_id] %s -> 
/%s:
[sym_id_parse] syms[%s]:
A Santa lives evil at NASA
<non-existent-file>
INCL_GRAPH
EXCL_GRAPH
INCL_ARCS
EXCL_ARCS
INCL_FLAT
EXCL_FLAT
INCL_TIME
EXCL_TIME
INCL_ANNO
EXCL_ANNO
INCL_EXEC
EXCL_EXEC
[sym_id_parse]: arc %s:%s(%lx-%lx) -> %s:%s(%lx-%lx) to %s
 (%s:%d @ %lx)
 (%s:%d)
{%d} 
%4.0f%% 
 <cycle %d>
 [%d]
 (%d)
[findcall] %s: 0x%lx to 0x%lx
[findcall]	0x%lx:call
	destpc 0x%lx (%s)
_coroutine
<indirect child>
[find_call] 0x%lx: bsr
 0x%lx	; name=%s, addr=0x%lx
[find_call] %s: 0x%lx to 0x%lx
[find_call] 0x%lx: jsr%s <indirect_child>
literal
indexed
register
register deferred
autodecrement
autoincrement
autoincrement deferred
byte displacement
byte displacement deferred
byte relative
byte relative deferred
word displacement
word displacement deferred
word relative
word relative deferred
immediate
absolute
long displacement
long displacement deferred
long relative
long relative deferred
[findcall]	0x%lx:calls
	first operand is %s
	second operand is %s
[findcall]	destpc 0x%lx
 child->name %s
 child->addr 0x%lx
[findcall]	but it's a botch
[reladdr] not relative address
[findcall]	0x%lx:callf
	dest_pc=0x%lx, (name=%s, addr=0x%lx)
[find_call] 0x%lx: callf
[find_call] 0x%lx: jal
[find_call] 0x%lx: jalr
[find_call] 0x%lx: bl
 %         the percentage of the total running time of the
time       program used by this function.
cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.
 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
calls      the number of times this function was invoked, if
Beeb
           this function is profiled, else blank.
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.
name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
alula
	   the gprof listing if it were to be printed.
Copyright (C) 2012-2015 Free Software Foundation, Inc.
Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.
           listing.
	   else blank.
God A red nugget A fat egg under a dog
call graph profile:
          for this listing.
          function entries:
          descendents.
          itself.
descendents
          recursively.
          parent listings:
descendents*
          parent.
          its parents.
          children listings:
descendent*
          function.
          cycle as a whole.
          cycle listings:
          The sum of self and descendents is the major sort
index     the index of the function in the call graph
          listing, as an aid to locating it (see below).
%time     the percentage of the total time of the program
          accounted for by this function and its
self      the number of seconds spent in this function
          the number of seconds spent in the descendents of
          this function on behalf of this function.
called    the number of times this function is called (other
          than recursive calls).
self      the number of times this function calls itself
name      the name of the function, with an indication of
          its membership in a cycle, if any.
          listing, as an aid to locating it.
self*     the number of seconds of this function's self time
          which is due to calls from this parent.
          the number of seconds of this function's
          descendent time which is due to calls from this
called**  the number of times this function is called by
          this parent.  This is the numerator of the
          fraction which divides up the function's time to
total*    the number of times this function was called by
          all of its parents.  This is the denominator of
          the propagation fraction.
parents   the name of this parent, with an indication of the
          parent's membership in a cycle, if any.
index     the index of this parent in the call graph
          listing, as an aid in locating it.
self*     the number of seconds of this child's self time
          which is due to being called by this function.
          the number of seconds of this child's descendent's
          time which is due to being called by this
called**  the number of times this child is called by this
          function.  This is the numerator of the
          propagation fraction for this child.
total*    the number of times this child is called by all
          functions.  This is the denominator of the
          propagation fraction.
children  the name of this child, and an indication of its
          membership in a cycle, if any.
index     the index of this child in the call graph listing,
          as an aid to locating it.
          * these fields are omitted for parents (or
          children) in the same cycle as the function.  If
          the function (or child) is a member of a cycle,
          the propagated times and propagation denominator
          represent the self time and descendent time of the
          ** static-only parents and children are indicated
          by a call count of 0.
          the cycle as a whole is listed with the same
          fields as a function entry.  Below it are listed
          the members of the cycle, and their contributions
          to the time and call counts of the cycle.
 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.
 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.
     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.
Eleele
     self	This is the total amount of time spent in this function.
     children	This is the total amount of time propagated into this
     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.
     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.
 For the function's parents, the fields have the following meanings:
     self	This is the amount of time that was propagated directly
		from the function into this parent.
     children	This is the amount of time that was propagated from
		the function's children into this parent.
     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.
     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.
 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 For the function's children, the fields have the following meanings:
		from the child into the function.
     children	This is the amount of time that was propagated from the
		child's children to the function.
     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.
     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.
 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 This line lists:
		function by its children.
 fields are blank.
 the cycle.
%s: error: too many @-files encountered
;*3$"
@(#) Copyright (c) 1983 Regents of the University of California.
 All rights reserved.
seconds
gprof
.shstrtab
.interp
.note.ABI-tag
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rela.dyn
.rela.plt
.init
.plt.got
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.init_array
.fini_array
.jcr
.dynamic
.got.plt
.data
.bss
.gnu_debuglink
