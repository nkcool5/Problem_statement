/lib/ld-linux.so.2
 $DJ
D$% 
`(A0
 q!  
C80(
%) @
  A$
NR L
`	! 
@A!Y 
DPRY
2BT^+
a0Tr
+l0zxQ
4/fV
bi[(
)zkI
jP%)5
w][1q[E~
E>$&c
VqL_[
{^MD*
k+T.|3
s:*]2F
o:uY
K{5T
	9qo
Wj	C
\;{e
iF;iR
h^k_
an`O
,2=~
>YSU--
_1XM
G su
pRDA
0sC:
] _i
'&%Ll
}=:qJ
jh49
`s0&
	rJb
*+;g
]Br/
]70Y
G",x
8{EXJ;Y
$MG>.
Z6'.cJ
+j~[v8
T8*C
Z9GK
N'U+I
hIkK
R16#w
WW8;
oEL#
bAYt
I7F.
oMOI
s:CbI
S'&6
_V<Z
e")'
,4=%-
D3TQCI
>Xmr
gbLE
~bv~
,<{W
vyd5M
w=e'
~[uiAR
.Q>H
a8$F
lFk)"
V=HV`
((d"4
:B'L
C,+S[
+@`(^[
=wf:
L>>oG
V\o1
n'w2
fo$>l2)
B;-jSy(
Ah OG
libreadline.so.7
__gmon_start__
using_history
rl_make_bare_keymap
rl_redraw_prompt_last_line
rl_readline_state
history_lines_written_to_file
rl_completion_mark_symlink_dirs
rl_vi_start_inserting
history_length
history_get
xmalloc
rl_prep_term_function
rl_delete_text
emacs_standard_keymap
rl_add_undo
rl_invoking_keyseqs
rl_bind_keyseq_in_map
history_tokenize
rl_filename_quoting_desired
sh_unset_nodelay_mode
rl_tab_insert
tilde_additional_suffixes
rl_explicit_arg
rl_parse_and_bind
rl_crlf
rl_executing_keyseq
remove_history
rl_vi_bWord
history_expand
rl_named_function
history_search_delimiter_chars
rl_completer_word_break_characters
rl_terminal_name
rl_end
history_lines_read_from_file
rl_cleanup_after_signal
emacs_meta_keymap
history_get_time
rl_function_of_keyseq
sh_get_env_value
rl_tilde_expand
rl_attempted_completion_over
rl_dispatching
rl_read_init_file
vi_movement_keymap
rl_filename_dequoting_function
where_history
rl_completion_type
rl_directory_completion_hook
rl_funmap_names
tilde_expansion_preexpansion_hook
rl_editing_mode
rl_last_func
sh_single_quote
rl_filename_quoting_function
history_quotes_inhibit_expansion
sh_set_lines_and_columns
history_base
rl_forward_word
rl_char_is_quoted_p
rl_completion_quote_character
xfree
rl_done
rl_initialize
rl_bind_key_in_map
rl_unbind_function_in_map
rl_completion_entry_function
rl_add_defun
rl_completion_suppress_quote
rl_instream
rl_num_chars_to_read
rl_get_previous_history
rl_set_keymap
history_subst_char
rl_filename_stat_hook
rl_completion_append_character
rl_push_macro_input
rl_ignore_some_completions_function
rl_variable_bind
write_history
rl_unbind_key_in_map
history_inhibit_expansion_function
rl_generic_bind
unstifle_history
rl_attempted_completion_function
rl_forced_update_display
rl_completion_invoking_key
rl_bind_key_if_unbound_in_map
sh_get_home_dir
rl_sort_completion_matches
xrealloc
rl_filename_rewrite_hook
rl_variable_dumper
rl_outstream
rl_list_funmap_names
history_is_stifled
rl_signal_event_hook
rl_bind_keyseq
rl_completion_mode
rl_completer_quote_characters
rl_filename_completion_desired
emacs_ctlx_keymap
free_history_entry
rl_insert
rl_read_key
history_write_timestamps
rl_get_keymap_by_name
rl_filename_completion_function
tilde_additional_prefixes
history_comment_char
rl_complete_internal
rl_special_prefixes
rl_line_buffer
rl_on_new_line
rl_username_completion_function
rl_newline
rl_complete
rl_vi_editing_mode
rl_function_dumper
rl_get_keymap
rl_insert_text
vi_insertion_keymap
rl_variable_value
rl_readline_name
rl_completion_matches
rl_startup_hook
history_truncate_file
rl_redisplay
read_history
rl_basic_word_break_characters
rl_point
rl_clear_visible_line
rl_menu_completion_entry_function
rl_macro_dumper
rl_yank_last_arg
history_set_pos
replace_history_entry
rl_reset_terminal
rl_vi_end_word
rl_mark
rl_set_screen_size
rl_kill_text
rl_completion_found_quote
read_history_range
rl_deprep_term_function
history_max_entries
history_expansion_char
rl_filename_quote_characters
rl_directory_rewrite_hook
rl_menu_complete
rl_ding
rl_get_termcap
rl_completion_suppress_append
libdl.so.2
dlopen
dlsym
dlclose
dlerror
libc.so.6
_IO_stdin_used
setuid
strcasestr
socket
fflush
strcpy
__printf_chk
setgrent
pathconf
_IO_putc
setlocale
mbrtowc
towlower
gai_strerror
strsignal
strncmp
dcngettext
setservent
strrchr
__longjmp_chk
regexec
__strdup
dcgettext
wcrtomb
getpwuid
__fdelt_chk
closedir
strncpy
sigprocmask
regfree
getgrent
__stack_chk_fail
unlink
putchar
select
iswprint
strtold
towupper
abort
strpbrk
getpid
kill
imaxdiv
strftime
iswalnum
iswlower
__ctype_get_mb_cur_max
endpwent
strtol
isatty
strchrnul
fgets
getppid
wcschr
iswctype
setitimer
sigemptyset
getaddrinfo
memset
localeconv
strstr
__errno_location
tcsetattr
chdir
confstr
endgrent
mbsnrtowcs
mbtowc
ttyname
dup2
clearerr
unsetenv
wctob
__fxstat64
__fprintf_chk
sigaddset
iswupper
putenv
wcswidth
__sigsetjmp
stdout
fputc
mktemp
getrusage
__strtoll_internal
fputs
strnlen
memcpy
fclose
tcsetpgrp
__memmove_chk
wcscmp
__vsnprintf_chk
strtoul
killpg
strcat
umask
strcasecmp
setpgid
getpeername
mbsinit
__strncpy_chk
getgid
tzset
__lxstat64
opendir
__xstat64
__ctype_b_loc
regcomp
stderr
wcwidth
sigdelset
ioctl
setrlimit64
group_member
__snprintf_chk
getgroups
getuid
readlink
getegid
__fpurge
strncasecmp
fileno
gethostname
getcwd
fwrite
iconv_close
gettimeofday
sigaction
mkstemp64
geteuid
__memcpy_chk
waitpid
localtime
lseek64
strchr
__vfprintf_chk
mblen
iconv
fdopen
readdir64
qsort
iconv_open
tcgetattr
__ctype_toupper_loc
__strcpy_chk
__ctype_tolower_loc
freeaddrinfo
setvbuf
wcscoll
fcntl
getrlimit64
__sprintf_chk
wcsdup
getdtablesize
wmemchr
memmove
endservent
fopen64
bindtextdomain
wcsrtombs
setgid
faccessat
__strtoull_internal
__asprintf_chk
tcgetpgrp
__libc_start_main
ferror
stpcpy
wcslen
strcoll
wcsncmp
sysconf
getservent
wctomb
__environ
_edata
__bss_start
sigwinch_sighandler
sh_modcase
parse_shellopts
parse_string
protected_mode
__libc_csu_fini
search_for_command
xdupmbstowcs
shell_glob_filename
sourcenest_max
uitos
clean_itemlist
alloc_pipeline_saver
declare_doc
count_all_jobs
command_word_completion_function
wcsnwidth
array_dequote_escapes
find_variable
running_trap
break_doc
jobs_doc
dirspell
coproc_fdrestore
fmtulong
shopt_setopt
array_dispose_element
set_shellopts
pop_args
lastpipe_opt
no_exit_on_failed_exec
should_ignore_glob_matches
duplicate_buffered_stream
bashline_reset
getifs
executing_builtin
all_digits
tempvar_list
completions_to_stringlist
get_current_prompt_level
discard_last_procsub_child
pat_subst
add_or_supercede_exported_var
show_name_attributes
top_level_mask
bash_initialize_history
unbind_variable_noref
the_printed_command
add_unwind_protect
var_lookup
fd_ispipe
no_symbolic_links
strvec_from_word_list
expand_string_unsplit_to_string
reset_mail_timer
the_printed_command_except_trap
set_default_locale
make_while_command
assoc_patsub
executing_line_number
check_dev_tty
reset_shell_options
buffered_ungetchar
yynerrs
cleanup_the_pipeline
u32tocesc
wmatchlen
read_tty_cleanup
dispose_function_def_contents
restricted_shell
terminate_immediately
hash_doc
zwrite
array_shift
signal_is_trapped
bash_tilde_expand
ulimit_builtin
logout_doc
get_dirstack_from_string
zmapfd
select_doc
wdcache
gather_here_documents
print_rlimtype
dstack
trim_pathname
run_debug_trap
close_fd_bitmap
break_builtin
find_variable_for_assignment
sv_histtimefmt
close_buffered_stream
bash_getcwd_errstr
breaking
history_lines_in_file
glob_star
convert_var_to_array
bash_copyright
subshell_envp
remember_mail_dates
fg_doc
builtin_error
builtin_address
remove_backslashes
free_mail_files
parser_error
make_variable_value
command_errstr
coproc_fdchk
mailstat
expand_words_no_vars
u32cconv
it_arrayvars
glob_patscan_wc
reader_loop
local_exported_variables
sh_syntabsiz
coproc_flush
make_command
local_builtin
hostname_list_initialized
find_path_file
assoc_insert
file_exists
zcatfd
sv_execignore
caller_doc
expand_words_shellexp
which_set_flags
ifs_firstc
strcreplace
caller_builtin
bind_keyseq_to_unix_command
execute_variable_command
builtin_warning
exit_immediately_on_error
find_string_in_alist
push_context
sigint_sighandler
primary_prompt
mbschr
redirection_expand
hash_builtin
shell_initialized
sh_contains_quotes
set_compatibility_opts
tt_setnocanon
fg_percent_doc
bash_logout
close_buffered_fd
ttrestore
ifs_cmap
disown_builtin
find_or_make_array_variable
glob_patscan
array_remove_quoted_nulls
sh_stat
continue_builtin
glob_ignore_case
strlist_resize
coproc_setvars
bgpids
find_variable_noref
disable_priv_mode
falarm
array_rshift
shell_version_string
xbcopy
strlist_flush
posix_readline_initialize
print_arith_command
test_command
suspend_builtin
fnx_tofs
wait_intr_flag
is_basic_table
coproc_fdsave
expand_prompt_string
grouping_braces_doc
xtrace_reset
queue_sigchld_trap
set_sigint_handler
no_empty_command_completion
base_pathname
alloc_word_desc
default_buffered_input
Degas are we not drawn onward no In union drawn onward to new eras aged
addtimeval
make_coproc_command
array_expand_index
alias_expand_word
secondary_prompt
array_modcase
list_stopped_jobs
string_list_dollar_star
pop_var_context
enable_hostname_completion
push_scope
maybe_make_export_env
array_shift_element
copy_function_def_contents
push_stream
evalnest_max
get_minus_o_opts
echo_builtin
sh_optopt
buffered_getchar
return_EOF
current_fds_to_close
bg_doc
zgetline
exit_builtin
let_doc
skip_to_delim
signal_is_special
notify_and_cleanup
make_word
builtin_doc
dot_found_in_search
termsig_sighandler
locale_mb_cur_max
read_command
flush_temporary_env
ttfd_cbreak
build_version
exit_doc
saved_command_line_count
current_command_line_count
copy_command
expand_word_unsplit
do_word_assignment
find_shell_builtin
make_bare_word
setup_glob_ignore
read_secondary_line
shell_eof_token
dircomplete_expand_relpath
current_readline_line
initialize_readline
copy_function_def
popd_doc
sh_quote_reusable
yyerror
get_locale_var
unset_bash_input
return_catch_value
print_unix_command_map
assoc_dequote_escapes
yyparse
wait_for_job
sv_strict_posix
array_patsub
make_if_command
it_running
exportable_function_name
times_doc
legal_alias_name
sh_regmatch
trapped_signal_received
current_command_first_line_saved
dispose_function_def
all_visible_functions
first_pending_trap
subshell_level
parse_bashopts
bash_badsub_errmsg
complete_builtin
list_string
ungetc_with_restart
set_signal_handler
already_making_children
last_made_pid
zreadintr
word_split
find_special_builtin
sh_optind
wait_for_background_pids
wordexp_only
get_original_tty_job_signals
sh_eaccess
importable_function_name
shell_compatibility_level
sv_shcompat
quote_string_for_globbing
sv_mail
with_input_from_string
force_execute_file
lcurrent
make_local_array_variable
bind_int_variable
set_login_shell
pushed_string_list
ifs_var
find_user_command
sh_realpath
fmtumax
array_to_assign
pcomp_curcmd
nohup_job
set_maxchild
set_working_directory
last_command_exit_signal
shell_is_restricted
make_function_def
times_builtin
shell_tty
sh_backslash_quote
strlist_print
save_bash_input
find_global_variable_last_nameref
set_signal
maybe_set_sigchld_trap
initialize_shell_options
hash_dispose
get_name_for_error
find_index_in_alist
double_quotes_inhibit_history_expansion
readonly_builtin
assign_array_element
describe_pid
unwind_protect_mem
get_working_directory
set_if_not
fail_glob_expansion
localetrans
assign_array_from_string
sv_optind
sh_getopt_save_istate
return_doc
sv_opterr
terminate_stopped_jobs
dircomplete_expand
set_default_locale_vars
sv_funcnest
sv_comp_wordbreaks
command_string_index
sh_backslash_quote_for_double_quotes
pcomp_curcs
ttnocanon
sh_nojobs
until_doc
set_pwd
find_function_def
phash_remove
optimize_fork
u32reset
gen_compspec_completions
uwcache
source_builtin
kill_all_local_variables
named_function_string
tt_setonechar
set_pipestatus_array
get_numeric_arg
internal_warning
hash_copy
expand_string_to_string
tt_setcbreak
list_minus_o_opts
find_tempenv_variable
subshell_top_level
find_shell_variable
sh_erange
pop_context
no_longjmp_on_fatal_error
with_input_from_stream
expand_string
assoc_to_assign
return_catch
it_jobs
array_quote
netopen
string_list_dollar_at
it_keywords
array_dispose
maybe_set_error_trap
glob_vector
change_flag
sv_childmax
trap_doc
it_helptopics
unset_builtin
parser_in_command_position
initialize_shell_builtins
dequote_list
find_variable_tempenv
bind_function
unbind_func
glob_asciirange
expand_word_leave_quoted
set_signal_ignored
bashline_reinitialize
builtin_help
print_command
parse_symbolic_mode
xtrace_fp
initialize_signals
string_rest_of_args
signal_is_pending
signal_names
ps2_prompt
EOF_Reached
sv_terminal
make_new_array_variable
sourcenest
word_token_alist
check_identifier
make_until_command
command_connect
bash_add_history
get_current_flags
ttfd_noecho
the_printed_command_size
unquoted_glob_pattern_p
reset_shopt_options
push_var_context
make_cond_command
sccs_version
sh_syntaxtab
prog_completes
programming_error
save_pipestatus_array
substring
job_exit_signal
new_var_context
hash_string
find_in_path
unlink_fifo_list
history_lines_this_session
sh_physpath
job_exit_status
progcomp_remove
sh_mktmpfd
source_searches_cwd
set_job_control
get_word_from_string
print_var_value
map_over
line_number_for_err_trap
set_sigchld_handler
reinit_special_variables
fc_execute_file
unbind_function_def
logout_builtin
print_shift_error
fifos_pending
ps0_prompt
copy_fifo_list
export_builtin
open_buffered_stream
hup_on_exit
coproc_list
reset_signal_handlers
it_users
push_args
strvec_mcreate
initialize_shell_variables
set_impossible_sigchld_trap
skipsubscript
tempenv_assign_error
echo_doc
phash_flush
array_from_word_list
array_copy
wait_doc
extract_arithmetic_subst
yy_input_name
kill_current_pipeline
eval_builtin
dircomplete_spelling
u32toutf16
discard_pipeline
find_variable_nameref_for_create
convert_var_to_assoc
hist_verify
internal_wstrmatch
find_variable_no_invisible
maybe_execute_file
strvec_strcmp
restart_job_control
conf_standard_path
filter_stringlist
compspec_copy
compgen_doc
makunbound
phash_search
this_shell_function
history_expansion_inhibited
interrupt_immediately
array_remove
minus_o_option_value
sync_buffered_stream
pwd_builtin
absolute_program
progcomp_dispose
ttfd_onechar
run_trap_cleanup
get_group_array
decode_prompt_string
Borrow or rob
mail_warning
ifs_is_null
arith_for_doc
xtrace_init
static_shell_builtins
set_current_prompt_level
make_bare_simple_command
sh_double_quote
subshell_argv
zreset
current_readline_line_index
eof_encountered
umatchlen
assoc_quote_escapes
dot_doc
read_but_dont_execute
phash_create
source_file
hash_size
loop_level
cdable_vars
privileged_mode
ifs_value
maybe_set_debug_trap
builtin_usage
check_signals_and_traps
executable_file
expand_assignment_string_to_string
bind_var_to_int
shell_name
remove_alias
set_directory_hook
all_array_variables
give_terminal_to
just_one_command
trap_saved_exit_value
array_create_element
wait_for_any_job
command_error
allow_null_glob_expansion
true_doc
getcoprocbypid
assign_array_var_from_word_list
make_new_assoc_variable
debugging_login_shell
get_new_window_size
sh_mktmpfp
pipefail_opt
with_input_from_stdin
push_token
builtin_builtin
want_pending_command
ps1_prompt
interrupt_state
sigterm_sighandler
return_builtin
restore_funcarray_state
display_signal_list
xtrace_fd
copy_word_list
string_list_internal
compspec_create
ttsave
redirection_error
restore_pgrp_pipe
set_var_attribute
complete_doc
read_doc
dispose_variable
variable_context
run_sigchld_trap
strlist_create
coproc_wclose
__data_start
strlist_to_word_list
make_group_command
set_minus_o_option
execute_shell_function
wait_signal_received
set_bash_input_fd
hash_walk
clear_hostname_list
wait_builtin
set_buffered_stream
strvec_to_word_list
run_unwind_frame
dispose_command
clear_fifo
internal_strmatch
extract_colon_unit
promptvars
compspec_dispose
strlist_walk
kill_doc
sh_notbuiltin
place_keywords_in_env
expand_string_assignment
assoc_quote
do_redirections
sh_invalidoptname
extract_command_subst
disallow_filename_globbing
initialize_job_signals
print_timeval
colon_doc
timeval_to_cpu
exec_argv0
it_hostnames
coproc_init
set_pipestatus_from_exit
match_pattern_wchar
kill_pid
test_builtin
hist_last_line_added
free_pushed_string_input
adjust_shell_level
update_export_env_inplace
sv_ifs
pop_dollar_vars
maybe_set_return_trap
xtrace_set
coproc_closeall
function_trace_mode
sh_opterr
it_commands
xparse_dolparen
restore_original_signals
sh_coproc
brace_expansion
expand_words
sub_append_string
ttgetattr
ansicstr
unbind_nameref
quote_globbing_chars
init_yy_io
do_assignment
reset_mail_files
zreadc
shopt_doc
dump_po_strings
running_in_background
shift_doc
parse_and_execute_cleanup
subshell_exit
zread
getmaxgroups
reset_terminating_signals
word_list_remove_quoted_nulls
posix_initialize
find_variable_last_nameref
bind_doc
enable_doc
compopt_builtin
set_original_signal
glob_dirscan
bash_history_disable
subshell_environment
printf_doc
dispose_fd_bitmap
without_job_control
internal_inform
get_array_value
strip_trailing_ifs_whitespace
maybe_call_trap_handler
shell_start_time
prompt_string_pointer
typeset_doc
exec_builtin
forced_interactive
malloc_trace_at_exit
phash_insert
source_uses_path
indirection_level_string
list_all_jobs
enable_builtin
strvec_len
stream_list
sh_un_double_quote
alrmbuf
asynchronous_notification
delete_all_contexts
set_locale_var
patch_level
signal_name
make_funcname_visible
absolute_pathname
append_process
get_all_original_signals
last_asynchronous_pid
pcomp_curtxt
assoc_to_word_list
yychar
getopts_doc
it_aliases
array_variable_name
local_doc
print_array_assignment
coproc_pidchk
set_dollar_vars_unchanged
sh_validfd
string_to_rlimtype
strvec_mresize
command_substitute
maybe_make_restricted
function_doc
err_unboundvar
it_directories
sh_badjob
reset_completer_word_break_chars
array_quote_escapes
unbind_args
coproc_close
list_rest_of_args
bash_directory_completion_matches
expand_arith_string
current_readline_prompt
literal_history
strsub
interactive_shell
while_doc
eof_encountered_limit
clean_simple_command
arith_doc
sh_closepipe
array_assign_list
errexit_flag
sh_invalidid
check_hashed_filenames
sh_exit
strlist_append
sys_error
dispose_redirects
programmable_completions
make_command_string
unfreeze_jobs_list
ifs_firstchar
suspend_doc
dispose_word_desc
assoc_replace
save_parser_state
make_absolute
current_prompt_string
array_walk
make_arith_for_command
read_tty_modified
getmaxchild
bash_tilde_find_word
sh_badpid
strvec_copy
sh_getopt
array_to_word_list
sh_mbsnlen
assoc_flush
case_doc
fsleep
trap_to_sighandler
mapfile_builtin
get_variable_value
dump_translatable_strings
wait_sigint_cleanup
uinttostr
ansiexpand
signal_in_progress
dispose_words
get_shopt_options
compgen_builtin
assoc_remove
timeval_to_secs
dollar_dollar_pid
get_dollar_var_value
no_line_editing
current_token
binary_test
assoc_keys_to_word_list
set_default_lang
__libc_csu_init
need_here_doc
find_variable_notempenv
internal_error
parser_save_alias
jobs_builtin
file_isdir
run_pending_traps
ifs_firstc_len
compopt_doc
full_pathname
setup_ignore_patterns
list_one_job
type_builtin
match_ignore_case
pop_scope
ansic_wshouldquote
maybe_append_history
bash_re_edit
assoc_dispose
show_all_var_attributes
make_default_mailpath
delete_all_jobs
current_command_subst_pid
have_unwind_protects
sigalrm_seen
num_fifos
it_disabled
sh_invalidopt
get_string_value
eval_doc
bash_history_reinit
get_original_signal
disown_doc
strvec_create
exec_doc
get_exitstat
save_input_line_state
init_job_stats
mark_modified_vars
history_reediting
valid_array_reference
current_user
false_builtin
cdspelling
string_list_pos_params
all_exported_variables
put_command_name_into_env
sh_invalidsig
setup_history_ignore
array_insert
ttnoecho
Tacocat
bind_builtin
current_command_number
dirs_builtin
false_doc
enable_history_list
array_keys_to_word_list
it_builtins
command_execution_string
set_or_show_attributes
bind_variable_value
assoc_remove_quoted_nulls
current_builtin
cond_expand_word
run_return_trap
posixly_correct
delete_var
global_variables
it_functions
find_global_variable
report_error
sh_openpipe
xstrmatch
print_func_list
check_bash_input
unwind_protect_tag_on_stack
array_dequote
remove_quoted_escapes
make_select_command
sigwinch_received
ttattr
set_ppid
_fp_hw
time_to_check_mail
xpg_echo
xtrace_print_word_list
file_iswdir
error_trace_mode
it_services
trap_list
list_running_jobs
let_builtin
type_doc
export_doc
sh_neednumarg
exec_redirection_undo_list
progcomp_search
printable_filename
sv_history_control
sh_getopt_dispose_istate
global_command
wlcache
assoc_to_string
jobs_m_flag
pop_stream
it_signals
wcsmatch
cmd_init
show_func_attributes
coproc_checkfd
strvec_sort
mk_msgstr
ttonechar
find_alias
alias_expand
zreadretry
path_dot_or_dotdot
bind_array_variable
ulimit_doc
reset_internal_getopt
remember_on_history
glob_error_return
progcomp_flush
sh_makepath
progcomp_insert
dispose_saved_dollar_vars
initialize_job_control
autocd
restore_pipeline
it_variables
colon_builtin
err_readonly
xtrace_print_assignment
fc_builtin
interactive_comments
xtrace_fdchk
run_interrupt_trap
make_simple_command
file_status
find_variable_nameref
list_reverse
sv_xtracefd
string_quote_removal
bash_license
nohup_all_jobs
reading_shell_script
perform_hostname_completion
clear_unwind_protect_list
jump_to_top_level
any_signals_trapped
xtrace_print_for_command_head
terminate_current_pipeline
set_tty_state
comsub_ignore_return
xtrace_print_arith_cmd
u32tochar
xtrace_print_select_command_head
unalias_doc
array_variable_part
find_global_variable_noref
no_invisible_vars
setup_async_signals
show_shell_version
funcnest_max
stream_on_stack
set_current_flags
tilde_initialize
it_enabled
bg_builtin
history_number
pre_process_line
readonly_doc
list_optarg
initialize_traps
copy_redirects
sv_histchars
umask_builtin
make_pattern_list
shopt_builtin
no_options
tteightbit
builtin_ignoring_errexit
list_optopt
delete_all_aliases
if_doc
test_bracket_doc
restore_parser_state
return_catch_flag
close_pgrp_pipe
make_array_variable_value
sh_getopt_alloc_istate
command_oriented_history
get_current_user_info
reap_dead_jobs
save_token_state
pcomp_set_readline_variables
pwd_doc
sh_mktmpname
begin_unwind_frame
strlist_remove
release_status
sv_histsize
isnetconn
split_at_delims
array_create
make_builtin_argv
set_var_read_only
array_unshift_element
initialize_bashopts
execute_command_internal
terminating_signal
time_doc
getcoprocbyname
initialize_bash_input
umask_doc
make_subshell_command
cd_doc
close_new_fifos
u32toutf8
strlist_prefix_suffix
sv_globignore
find_reserved_word
sv_tz
find_token_in_alist
last_history_line
parse_and_execute
print_var_list
readarray_doc
ansic_quote
array_to_argv
read_from_stdin
gnu_error_format
sh_chkwrite
maybe_save_shell_history
strvec_flush
ttsetattr
make_here_document
coproc_dispose
history_doc
xtrace_print_cond_term
get_current_options
hashing_enabled
ttfd_nocanon
clear_fifo_list
parser_remaining_input
save_pgrp_pipe
dont_save_function_defs
check_signals
builtin_address_internal
coproc_rclose
check_selfref
fc_doc
ignore_signal
shift_builtin
strvec_resize
get_random_number
bash_history_enable
make_case_command
nameref_invalid_value
evalexp
array_keys
polite_directory_format
dirs_doc
declare_builtin
executing
fd_is_bash_input
copy_redirect
free_trap_strings
valid_nameref_value
invalidate_cached_quoted_dollar_at
set_signal_hard_ignored
echo_input_at_read
move_to_high_fd
strlist_dispose
make_arith_command
noglob_dot_filenames
setifs
stupidly_hack_special_variables
shell_function_defs
show_var_attributes
match_pattern_char
clear_shell_input_line
this_shell_builtin
load_history
check_add_history
continuing
stdin_redirects
fg_builtin
print_assoc_assignment
subst_assign_varlist
termsig_handler
force_fignore
exit_shell
sh_badopt
sv_hostfile
array_to_string
indirection_level
hash_bucket
last_command_subst_pid
strlist_sort
save_pipeline
last_shell_builtin
mbstrlen
it_exports
continue_doc
parse_and_execute_level
strip_trailing
initialize_itemlist
extended_quote
is_directory
loptend
dispose_used_env_vars
mapfile_doc
assoc_dequote
var_attribute_string
copy_word
test_unop
strvec_remove
parser_expanding_alias
array_needs_making
it_files
parse_command
terminal_pgrp
check_binary_file
run_unwind_protects
legal_number
sh_setlinebuf
make_word_from_token
it_stopped
reset_parser
brace_expand
char_is_quoted
localeexpand
from_return_trap
printf_builtin
force_append_history
unset_sigwinch_handler
remember_args
sigterm_received
set_bashopts
progcomp_create
print_cond_command
expand_compound_array_assignment
tt_seteightbit
coproc_doc
set_current_options
sh_wrerror
init_mail_dates
run_exit_trap
getopts_builtin
dispose_word
test_binop
sh_contains_shell_metas
top_level_cleanup
dispose_var_context
current_host_name
dispose_cond_node
this_command_name
locale_utf8locale
coproc_unsetvars
sh_restricted
here_doc_first_line
make_word_flags
end_job_control
unbind_array_element
bashline_set_event_hook
assoc_modcase
signal_is_hard_ignored
set_itemlist_dirty
strlist_from_word_list
it_groups
read_builtin
get_directory_stack
list_opttype
decode_signal
noclobber
user_command_matches
assign_array_var_from_string
yylval
mitos
input_avail
do_assignment_no_expand
chkexport
subshell_argc
expand_string_unsplit
uwp_init
bash_brace_completion
sv_locale
set_dirstack_element
zsyncfd
running_under_emacs
pushd_doc
bind_global_variable
all_variables_matching_prefix
sh_optarg
_getenv
it_setopts
mbsmbchar
wait_intr_buf
tvlist_ind
evalstring
err_badarraysub
execute_command
bash_delete_last_history
same_file
test_doc
make_local_variable
assign_compound_array_list
check_jobs_at_exit
read_octal
pidstat_table
delete_all_variables
assigning_in_environment
unclosed_pair
unalias_builtin
progcomp_walk
set_lang
ttcbreak
get_job_spec
skip_to_histexp
throw_to_top_level
setup_exec_ignore
describe_command
assoc_reference
extract_array_assignment_list
sourcelevel
source_doc
make_redirection
sort_variables
sh_mkdoublequoted
get_job_by_pid
difftimeval
strvec_dispose
set_dollar_vars_changed
hangup_all_jobs
find_flag
executing_list
should_suppress_fork
ignore_tty_job_signals
uconvert
evalnest
verbose_flag
glob_char_p
push_dollar_vars
unbound_vars_is_error
check_window_size
bash_clear_history
pipeline_pgrp
other_token_alist
bash_input_fd_changed
initialize_aliases
print_var_function
executing_command_builtin
bash_readline_initialized
sh_needarg
hist_last_line_pushed
have_devfd
unset_doc
pushd_builtin
sv_ignoreeof
make_for_command
file_error
get_alias_value
no_args
de_backslash
original_pgrp
xtrace_print_case_command_head
initialize_flags
echo_command_at_execute
list_length
alias_expand_all
remove_unwind_protect
array_flush
number_of_args
expanding_redir
delete_job
trap_builtin
help_builtin
get_job_by_name
sh_ttyerror
optflags
command_doc
debugging_mode
bash_servicename_completion_function
bashline_reset_event_hook
restore_input_line_state
the_current_maintainer
run_error_trap
get_hostname_list
extended_glob
sv_path
coproc_alloc
print_simple_command
restore_token_state
make_cond_node
ansic_shouldquote
make_word_list
spname
get_tty_state
conditional_doc
legal_identifier
variable_help_doc
stop_making_children
wait_for
new_fd_bitmap
the_current_working_directory
stop_pipeline
start_pipeline
assoc_subrange
sv_histignore
extract_process_subst
fd_to_buffered_stream
maybe_add_history
it_shopts
last_command_exit_value
array_slice
all_shell_variables
check_unbind_variable
sh_canonpath
getopts_reset
executable_or_directory
history_builtin
shell_pgrp
parse_string_to_word_list
get_group_list
find_function
strlist_merge
bash_dequote_text
unary_test
history_delimiting_chars
array_subrange
all_visible_variables
coproc_fdclose
inherit_errexit
sh_getopt_restore_istate
prog_completion_enabled
pcomp_set_compspec_options
complete_fullquote
progcomp_size
make_child
startup_state
bash_groupname_completion_function
strlist_copy
sh_notfound
zreadcintr
all_shell_functions
reset_shell_flags
make_local_assoc_variable
coproc_reap
default_tty_job_signals
shell_execve
start_job
signal_is_ignored
xmbsrtowcs
num_shell_builtins
cd_builtin
popd_builtin
tt_setnoecho
global_error_list
with_input_from_buffered_stream
stdin_redir
ttfd_eightbit
wait_for_single_pid
free_buffered_stream
sh_invalidnum
ifs_is_set
initialize_terminating_signals
assign_in_env
dist_version
bind_assoc_variable
map_over_funcs
connect_async_list
sh_readonly
merge_temporary_env
extglob_pattern_p
fnx_fromfs
bash_delete_histent
zreadn
find_variable_nameref_for_assignment
it_bindings
sh_getopt_restore_state
unlink_fifo
restore_default_signal
bash_default_completion
parser_restore_alias
restore_pipestatus_array
expand_aliases
add_alias
kill_builtin
line_number_base
dispose_exec_redirects
dequote_string
shopt_listopt
discard_unwind_frame
GLIBC_2.1
GLIBC_2.0
GLIBC_2.11
GLIBC_2.8
GLIBC_2.15
GLIBC_2.2
GLIBC_2.4
GLIBC_2.1.1
GLIBC_2.3.4
GLIBC_2.3
y$Qj
uIQQh
_ZSP
UWVS
t$,1
t$ Vj
_]VP
\$,e3
<[^_]
Y^SP
Y_VP
ZYVP
[^_]
UWVS
D$,1
D$,P
D$(P
G9<$s
_]SP
D$0PV
ZYVP
\$,e3
<[^_]
UWVS
/RRSW
t$8S
[^_]
UWVS
/RRSW
t$8S
[^_]
UWVS
D$,1
79\$
ZYUP
<	v%
L$`@
u2Wj
]ZSP
YQQj
t$,e35
<[^_]
4<-u
UWVS
<!u(
uD;=
8<(u
[^_]
WVSQ
Y^SP
ZYSP
t!Sj
t!Pj
VVj-ji
u&PPj
u PPj
u2WWj
_ZSP
ZYVP
ZYSP
PjPV
WWPV
<etq<d
tNPPh
[_VP
PTRhP
Phl/
$SPj
[^WP
[^WP1
ZYWP
ZYSP
ZYWj
[^_]
UWVS
ZYVP
ZYUP
ZYUP
[^_]
YZVP
/bin
^ZSP
YZVP
ZYSP
/bin
ZYPj
t#Ph:
UWVS
XZUj
[^_]
ZYSP
ZYSP
UWVS
D$,1
T$(1
D$,e3
<[^_]
ZYSP
t$$j
t$$j
t!;P
UWVS
D$(0
[^_]
D$$PUQ
^ZSP
\$4S
|$0W
ZYWP
ZYWP
\$0S
$<}t#
|$8W
ZYWP
|$8W
[^_]
[^_]
[^_]
UWVS
[^_]
[^_]
[^_]
UWVS
T$He
D$\1
;T$0
|$4%
L$ 9
D$`P
T$\e3
l[^_]
t$0P
L$ 9
t$0P
T$T1
D$`P
D$XP
|$PW
D$dP
|$`W
t$`V
D$`P1
D$`P1
t$$U
D$T_Zj
D$D8
UWVS
|$8e
|$L1
D$<j@
"L$=
D$ @
D$t`t
|$Le3=
\[^_]
D$$u
D$PP
L$$"L$=
D$PP1
L$$"L$=
DD$ 
DD$ 
D$TP
t$PV
D$PP
D$HP
T$<t
D$PP1
T$D1
D$PP1
DD$ 
[^_]
UWVS
D$L1
t$Le35
\[^_]
D$DP
t$H1
D$DP
D$DP
D$HPS
t$DS
L$.P
D$DP
D$DP
D$DP
ZYVP
Y_VP
T$HRP
9T$D
D$DP
D$DP
D$<P
D$@1
PSWj
_ZPV
t/Vj
UWVS1
t$<f
\$<e
D$<9
[^_]
D$<9
D$(1
]ZPh,
UWVS
D$ j
,[^_]
[^_]
C@u<
UWVS
ZYSP
ZYWP
[^_]
ZYWP
UWVS
|$ W
PVh3
[^_]
<+ti<-tM
0<	w>
ZYSP
0<	v
UWVS
XZSW
[^_]
[^_]
UWVS
<	wz1
[^_]
[^_]
 [^_
0<	v
alula
\$ e
<_u7
<_u 
0<	wA
0<	w1
^ZSP1
ZYSP
S\3FX3V\	
t$pVWj
UWVS
|$0e
[^_]
D$p1
T$le3
D$p1
L$le3
:.t	
;/t#
</t	
UWVS
\$@e
,[^_]
.VPR
t$ S
tO<:tK
UWVS
t </t
uL<"tH<:u
[^_]
ZYWP
[^_]
<\t$<"t 
us<:to<'u
ZYWP
;~tR
ZYSP
/usr
/bin
[^_]
ZYVP
UWVS1
|$(1
,[^_]
ZYSP
ZYSP
ZYSP
\$ j
< ts<	toh
[^_]
[^_]
t$ j
UWVS
,[^_]
<[^_]
t$$P
UWVS
t$De
[^_]
ZYSP
ZYVP
ZYVP
UWVS
\$Pe
D$,1
th<%
D$,e3
<[^_]
L$$QRP
D$<P
6Rh~
6Rhl
VRhZ
VRhH
6Rh7
6Rh'
[^_]
UWVS
D$81
|$,e3=
<[^_]
j+jx
9-(Z
$;D$
D$#PV
j-jx
SWhU
UWVS
[^_]
UWVS
,[^_]
D$	 
_ZVP
UWVS
[^_]
[^_]
UWVS
[^_]
[^_]
[^_]
UWVS
t$,1
gfff
\$ 1
gfff
t$,e35
<[^_]
YZWP
UWVS
XZWV
[^_]
UWVS
<=t4
<~uE
[^_]
ZYSP
UWVS
[^_]
ZYWP
XZWh Y
YXWh
ZYVP
ZYSP
\$0e
D$ P
 [^_
ZYWP
UWVS
[^_]
D$$PR
L$$Q
D$(P
SSj+jr
UWVS
D$<1
D$ t
ZYUP
t$hP
Dt$`
t$hj
l$`1
_]SP
|$<e3=
L[^_]
RRh,
[]VP
ZYSP
D$<j
t$ S
ZYSP
t$hP
>cu9
l$ 1
T$(tZ
ZYVP
^_PS
t$$P
D$DP
YXUh 
]ZSP
QQh&
UWVS
D$|1
D$8j
|$|e3=
[^_]
YZWP
ZYWP
D$djB
_ZVP
T$,RP
^_SP
T$,RP
D$tP
D$`9
D$xPW
^_SP
XZVhp
$RRV
l$,1
D$xPS
;|$L
l$4t
ZYSP
XZShp
UWVS
[^_]
[^_]
[^_]
t$Pj
UWVS
D$(P
D$0P
l$8U
]ZWP
[^_]
D$8e
T$$j
D$|PV
T$XP
T$\)
|8@WS
t$PV
[^_]
L$P9
t$h1
T$wRP
UWVS
t$ R
T$<R
T$<h Y
T$8Rh0
t$,h
[^_]
t$4h
YXSh Y
XZSh`
[^_]
t$(R
T$DR
T$Dh Y
T$@Rh
t$lj
XZShp
t$ h
t$(W
D$ P
XZShp
YXSh
t$ h
t$(W
t$(W
[^_]
Y[Ph
t$(W
Y]SP
t$(W
 t	[
ZYVP
ZYSP
ZYVP
UWVS
[^_]
ZYUP
[^_]
UWVS
[^_]
ZYUP
[^_]
|$ t
ZYVP
\$ e
\$ e
Do nine men interpret Nine men I nod
UWVS
,[^_]
D$$P
UWVS
[^_]
[^_]
UWVS
,[^_]
UWVS
[^_]
UWVS
ZYSP
D$ P
T$(P
BASH
_FUN
ZYWP
[^_]
T$(P
ZYSP
UWVS
t$<V
,[^_]
[^_]
UWVS
|$<e
[^_]
ZYVP
ZYVP
\$,e
ZYVP
UWVS
[^_]
;Lt*
UWVS
\$De
l$ U
,[^_]
ZYSP
D$ PS
XZUW
XZUV
Y]SW
Y^SP
XZUW
UWVS
[^_]
YZVP
UWVS
t$0W
[^_]
]ZWP
UWVS
t$0W
[^_]
ZYWP
[^_]
UWVS
[^_]
ZYVP
[^_]
UWVS
t$8P
[^_]
t$8P
XZVS
ZYVP
ZYSP
[^_]
[^_]
D$4 u
D$4 
t$<Vh
t$8VS
t$8VS
UWVS
ZYVP
[^_]
UWVS
ZYVP
[^_]
[^_]
UWVS
|$<W
t	9C
[^_]
[^_]
[^WP
[^_]
UWVS
^]WP
,[^_]
ZYVP
,[^_]
,[^_]
D$(1
gfff
ZYVP
ZYVP
\$<e
D$(1
UWVS1
l$<h
,[^_]
j%h 
UWVS
Y_VP1
[^_]
[^_]
UWVS
ZYWP
[^_]
[^_]
ZYSP
[^_]
UWVS
\$pe
D$L1
XZh\
t$8V
_Xj.V
XZSh 
D$Le3
\[^_]
Y[UP
XZWS
 PSQ
ZYSP
ZYVP
ZYVP
UWVS
D$(1
l$Lh?
;D$D
9t$D
PUWS
,[^_]
D$D1
PWVS
PWVS
ZYWP
ZYWP
UWVS1
[^_]
[^_]
ZYUP
ZYVP
t$Sh
VPSh8
D$$P
t$$j
D$$P
t$$j
D$$P
t$$j
PVSh4
PSh8
t$(P
t$(hB
ZYVUS
t$ WP
UWVS
|$He
D$$1
ZYUV
,[^_]
UWVS
D$L1
D$Le3
\[^_]
ZYVP
|$<=
D$@Pj
ZYVP
UWVS
[^_]
UWVS
[^_]
[^_]
UWVS
D$,1
|$,e3=
<[^_]
L$		
RPWV
D$8P
L$	t	
t/<	t
< u'
UWVS
D$<1
|$<e3=
L[^_]
ZYSP
ZYSP
[^_]
UWVS
t"9C
[^_]
<$~Z
t2;F
[^_]
;<$u
UWVS
[^_]
[^_]
[^_]
ZYSPj@j
]XVj 
ZYUPj
T$(U
,[^_]
j?Ph
ZYWPj
\$(e
SVWP
[^_]
UWVS
[^_]
t$(V
UWVS
t$(V
[^_]
$VPj
UWVS1
[^_]
[^_]
[^_]
t:9L$
~kVS1
~tVS1
UWVS
t:;X
[^_]
UWVS
tR;X
SQha
[^_]
ZYSP
SWPhk
UWVS
[^_]
l$(U
L$(1
tc;-
_ZSP
XZSh Y
Y_Sh
ZYSP
UWVS
|$<1
D$<Pj
t$<V
D$D1
|$,9
|$<e3=
L[^_]
t$<V
tZ=0
UWVS
[^_]
UWVS
t*;X
[^_]
ZYSP
UWVS
tj;X
[^_]
ZYSP
UWVS
[^_]
UWVS
[^_]
UWVS
\$(e
[^_]
ZYSP
XZSj
-Pjm
ZYVP
ZYSP
UWVS
]ZVP
[^_]
<unk
nownf
D$,9
D$(1
9T$$
9T$(
t$<9t$
[^_]
[^_]
UWVS
T$<1
D$4P
T$<e3
L[^_]
|$0P
|$8P
0<	v@
UWVS
D$<1
|$<e3=
L[^_]
D$@P
D$@P
D$<P
D$,W
t$ W
;D$(
D$,W
UWVS
[^_]
>(t(
QRVP
T$X1
\$Le3
\[^_]
|$@P
|$@P
t$ R
D$H1
D$@PU
D$(1
t$(R
L$,Q
|$HP
|$@P
|$@P
D$H1
|$<e3=
L[^_]
|$0P
|$0P
T$(9T$
|$8P
,[^_]
D$X1
D$p%
\$$t
t$@P
D$@PW
|$Le3=
\[^_]
|$HP
L$Dj
D$(R
<(tt<{tp
,[^_]
\$H1
T$<e3
L[^_]
|$8P
D$()
T$(j
D$8P
UWVS1
D$(1
,[^_]
UWVS
|$4e
|$h1
D$$t
D$3%
|$\e3=
l[^_]
|$LP
|$LP
D$Z(
|$TS
|$TS
|$TS
UWVS
D$0e
D$X1
D$,t
\$Le3
\[^_]
|$@P
T$ )
|$HP
|$@P
T$ )
UWVS
D$81
;l$T
9T$T|?
;l$T~
;l$T
|$,e3=
<[^_]
9l$T
|$ P
;l$T
9l$T
|$(P
|$ P
;l$T
|$(P
|$(P
9l$T
UWVS
\$le
D$H1
;L$d~
9L$d
9|$d|
;L$d
;L$d
\$<e3
L[^_]
9L$d
;L$d
9L$d
t$8P
UWVS
D$ e
D$<1
D$4P
< u&
;l$l
;T$l
9D$l
;l$l
T$<e3
L[^_]
D$d9D$l
;D$l
ZYUP
< u"
UWVS
[^_]
,[^_]
[^_]
UWVS
\$,1
< uo
< uL
|$,e3=
<[^_]
D$ v
ZYVP
ZYVP
UWVS
D$81
t$,e35
<[^_]
l$(P
UWVS
,[^_]
UWVS
\$@e
,[^_]
UWVS
[^_]
[^_]
UWVS
D$(1
,[^_]
XZVS
UWVS
D$$1
$vXf
,[^_]
UWVS
D$,1
v>< t:
t$,e35
<[^_]
D$$P
~;S1
UWVS
D$PP
D$4u
t$TV
]ZPh
[^_]
ZYPh
ZYPh
j+jv
j+je
UWVS
D$,1
D$0P
D$0P
;|$$
D$0P
D$0P
T$ W
L$,e3
<[^_]
t$$V
]XWS
UWVS1
D$H1
D$d1
td<'
<"tu
t$<e35
L[^_]
t$ )
|$8P
D$,1
ZYUP
|$,e3=
<[^_]
|$(P
t$ U
t$ U
ZYSP
,[^_]
ZYSP
ZYVP1
D$ P
RVUj
PVUj
VStW
UWVS
D$,1
^_UP
|$,e3=
<[^_]
|$(P
ZYUP
D$,1
t$\U
UWVS
|$$e
D$d9
XZj[U
^_SP
<!ud
T$h9
D$t+D$x
D$t+D$x
D$d9
D$pj
ZYh*
[^_]
^_SP
L$tQ
L$|QP
t$,RP
D$0h
|$PW
D$|PW
ZYWP
D$|PQ
L$xQ
|$T^
|$T,
|$T~
ZYVP
D$  
_ZVP
\$ SW
L$xQ
t$,RP
ZYWP
D$ j
[ZWP
|$(9
ZYWP
L$|Q
\$<S
D$(9
T$(1
l$<1
D$ )
D$  u
t$ S
D$  
t$8VP
t$XV
D$(S
T$tR
T$|RP
ZYSP
D$|PU
t$ W
L$0+L$8
D$ )
t$<SW
t$tV
t$|VP
ZYh*
DD$<
|$0WP
t$\V
D$(t
ZYSP
D$8@
_]SP
t$ W1
D$|PU
[^UP
[^WP
^_UP
t$ W
t$ W1
set 
+T$,
^_h*
tYWPUh
ZYUP
L$\1
\$\e3
l[^_]
D$Y$
D$eP
|$Dj
D$LPS
D$HPU
\$@tP
\$<1
ZYUP
D$Y$
D$Z!
\$<1
ZYSP
ZYVP
|$LP
|$TP
D$(W
0<	vg
UWVS
|$4e
L$,S
|$ }
T$,#
D$p1
[^_]
D$xj
L$,P
|$ tM
D$ P
L$,P
L$(QV
|$0	
9L$L
t$$V
L$,P
D$$)
D$$j@j
/dev
/fd/
D$Tt	
\$ P
D$L)
T$L)
t$tS
\$$P
D$L+D$,PVj
\$$V
|$L)
\$$P
D$L+D$,PVj
_ZVP
\$$P
D$L+D$,PVj
T$L)
D$ 9
Y[Ph
ZYPh
t$ e
[ZVP
tl=(
\$ e
ZYSP
ZYSP
D$$1
UWVS
D$,1
L$,e3
<[^_]
<@t,<*t(
D$(PS
D$ P
D$(PS
Y[VP
t$ PV
t$Te
D$,1
D$ PS
$^_S
t$\j
L$,e3
<[^_]
D$,P
D$$Pj
D$,P
D$$P
ZYSP
ZYVP
D$,1
D$$PU
D$,Pj
t$pj
L$,e3
<[^_]
D$,Pj
t$pj
UWVS
D$,-
8;|$
D$,-
?9|$
T$<1
D$8P
ZYSP
T$,R
T$4R1
[^_]
ZYSP
tSVS
ZYVP
?.tF
[ZWP
>.t/
ZYVP
UWVS
ZYWP
ZYWP
[^_]
UWVS
t29s
t$8P
[^_]
UWVS
t$8P
[^_]
[^_]
UWVS
[^_]
[^_]
UWVS
D$01
[^_]
UWVS
[^_]
D$t1
D$le3
UWVS
D$$P
|$|e3=
[^_]
ZYUP
UWVS1
[^_]
/var
/mai
UWVS
Y[VP
D$$PU
;t$d
T$$R
;L$L
D$|e3
[^_]
;\$\
;T$H
ZYPj
ZYPj
ZYPj
ZYPj
XZWS
D$$Y
D$DP
D$DP
D$,t;
UWVS
D$41
D$(PQ
|$,e3=
<[^_]
<St-
UWVS
ZYWP
[^_]
_ZSP
>[^_
^_SP
UWVS
[^_]
_XSU
ZYVP
^]h0
ZYVP
_]VP
ZYPS
ZYPS
ZYPS
uH[^_
ZYPS
ZYPS
D$,ZYSP
tA~/
UWVS
[^_]
[^_]
ZYSP
UWVS
D$p1
t$8|
L$le3
|[^_]
UWVS
\$49
t	;H
[^_]
[^_]
ZYSP
ZYVP
t$$j
UWVS
[^_]
t%S1
UWVS
[^_]
?.tl
UWVS
[^_]
[^_]
D$(1
<?t;~'<[
<\tI<]uR
~&<*
,[^_]
!<<w2
UWVS
\$`W
[^_]
UWVS
D$(1
,[^_]
UWVS
[^_]
Y^WP1
[^_]
[^_]
UWVS
[^_]
ZYSP
UWVS
[^_]
,[^_]
G<3w
UWVS
[^_]
[^_]
[^_]
l$ 1
[^_]
D$l1
G<3w7
D$ 9
L$le3
D$P9D$H
D$$9
!tI1
<=tN
<!tb<-uB
<=t"Pj
-tt1
[^_]
[^_]
[^_]
[^_]
tPRj
8]uc
j h@
_ZVP
	t	[^_
ZYWP
ZYVP
ZYWP
UWVS
[^_]
ZYSP
UWVS
|$LW
<	ts
ZYj\P
D$ P
t&<\t
<[^_]
UWVS
[^_]
UWVS
|$0j
ZYUP
[^_]
UWVS
D$ 9
[^_]
[^_]
[^_]
[^_]
UWVS
[^_]
[^_]
UWVS
t$@WV
D$0;x
9D$0
|,~^
9D$0
[^_]
t$DP
[^_]
UWVS
[^_]
[^_]
UWVS
ZYVP
UWVS
0WVU
[^_]
UWVS
ZYWP
[^_]
[^_]
UWVS
0WVU
[^_]
UWVS
D$ 1
ZYSP
[^_]
UWVS
D$Pe
|$,1
|$,e3=
<[^_]
UWVS
[^_]
ZYWP
[^_]
UWVS
,[^_]
D$$P
UWVS
|$De
t$LUW
D$L tj
D$$P
,[^_]
t$De
D$L 
D$$P
,[^_]
UWVS
[^_]
[^_]
t$0VQR
L$(P
VQRWS
UWVS
[^_]
[^_]
[^_]
|$$1
UWVS
t$0W
[^_]
[^_]
[^_]
[^_]
ZYWP
ZYWP
UWVS
[^_]
UWVS
\$`e
t$<1
|$<e3=
L[^_]
D$8P
|$0W
t$ )
\X[Q
L$8R
L$<)
|$@e
D$(1
D$ PV
 [^_
UWVS
<[^_]
t$\Q
T$,<*
L$ P
L$$P
L$ QP
UWVS
[^_]
[^_]
PSh,
[^_]
[^_]
PSh,
UWVS
|$@j[S
[^_]
[^_]
ZYSP
UWVS
D$ 1
,[^_]
D$ 1
|$HP
D$ PU
,[^_]
t$,S
UWVS
ZYUP
[^_]
tU;p
ZYWP
tO;p
ZYWP
UWVS
[^_]
[^_]
UWVS
[^_]
[^_]
UWVS
[^_]
[^_]
UWVS
[^_]
[^_]
UWVS
t$LQ
[^_]
t$LQj@
t$LQj*
UWVS
0 9o
[^_]
UWVS
ZYVP
ZYUP
t$<V
[^_]
[^_]
t$De
D$$P
,[^_]
\$De
D$L 
D$$P
,[^_]
UWVS
,[^_]
,[^_]
,[^_]
UWVS
D$,1
|$P}
|$,e3=
<[^_]
|$(P
9t$P
|$(P
l$$j
D$(P
|$P}uq
|$(P
|$P}
UWVS
D$hj}
[^_]
|$@WU
D$h1
D$pP
D$hP
|$,)
t$H)
|$L)
t$D9
9\$D
t$H9
D$0+D$H
3t$$
RPSQ
+D$ 
9T$$
ZYSP
ZYSP
|$xP
|$xP
Y[UP
t$lj
t$lSW
L$ 1
9D$ 
D$09
D$09
9T$$
9D$ 
t$Th<
D$PWV
Y^WP
ED$,
^_SP
D$hP
9D$D
;\$D
UWVS
D$\P
<[^_]
D$(V
9D$P}
9L$ 
t);t$(t#
+t$P
D$XPR
T$$f
D$ P
<[^_]
t$\V
_ZVP
UWVS
,[^_]
<&t$
ZYPh_
D$l1
L$le3
UWVS
[^_]
[^_]
UWVS
0j&U
[^_]
[^_]
ZYUP
 [^_
D$ PS
t$ h
ZYSP
T$$R
T$$R
XZSW
,[^_]
UWVS
ZYSP
[^_]
D$	_
ZYSP
\$ S
[^_]
ZYSP
UWVS
,[^_]
D$l1
L$le3
ZYSP
UWVS
ZYSP
;.te
^]PS
[^_]
[^_]
^_SP
< u.
UWVS
,[^_]
UWVS
[^_]
,[^_]
UWVS
[^_]
[^_]
UWVS
[^_]
^]WP
XZWV
9|$ t
ZYWP
< t/<	t+
Y^SP
UWVS
[^_]
UWVS
D$01
[^_]
tE< t
ut<"t
<'u1
um[^_
ZYSP
UWVS
8j$W
ZYWP
,[^_]
UWVS
ZYWP
^_SP
,[^_]
]ZWP
ZYUP
[^WP
ZYSP
ZYVP
ZYVP
D$(]
D$$P
]ZWP
Y^j/P
Y[WP
UWVS
,[^_]
UWVS
,[^_]
t$LR
ZYSP
UWVS
ZYWP
<	u,
[^_]
[^_]
[^_]
UWVS
[^_]
ZYPh
l$$U
'><=
;|&(f
'@><
=;|&f
tH;=
'@><
=;|&f
'><=
;|&(f
ZYSP
tCWV
\$ e
D$$9D$(
|$,'t
ZYSP
UWVS
D$,1
|$,e3=
<[^_]
t$`P
t$lV
9D$T|=
9D$T|
t$`Q
;548
;5(A
1<	t
T$X9T$Tu/
9T$T} 
9D$X
9D$T
9D$X
T$X9T$T
D$4P
Y[hP
9\$T
D$4P
9|$T
9T$T
9D$T
UWVS
ZYSP
,[^_]
,[^_]
[^_]
ZYSP
UWVS
t$ S
<:tM
ZYSP
,[^_]
t$ S
j VP
UWVS1
j UP
[^_]
[^_]
UWVS
D$$P
[^_]
t$ U
T$$1
L[^_]
UWVS
t;<\
t$PV
,[^_]
t$ V
~WVS1
ZYSP
ZYSP
ZYSP
ZYPj
ZYPj
ZYPj
ZYPj
ZYPj
A Santa lives evil at NASA
ZYSP
;Ttm
^ZPj
ZYVP
[_VP
ZYVP
Y^Pj
ZYPj
ZYPj
Y_SP
^ZPj
ZYPh
ZYPh~
[^_]
UWVS
\$Pe
D$(1
,[^_]
D$ PW
t$\PhD
0RVQ
D$p1
L$le3
ZYSP
t$4R
YZWP
[^_]
ZYWP
L$|e3
[^_]
D$ Ph
D$(P
ZYSP
UWVS
Eleele
[^_]
,[^_]
UWVS
D$|1
L$|e3
[^_]
l$ Uh
UWVS
[^_]
[^_]
UWVS
_]SP
[^_]
[^_]
]ZSP
[^_]
RPVV
[^_]
UWVS
UWVS
UWVS
UWVS
UWVS
ZYSP
[^_]
[^_]
D$ 1
Y]Ph
]ZPh
ZYPh
,[^_]
\$,P
[^_]
ZYSP
UWVS
ZYVP
[^_]
[^_]
UWVS
ZYUP
XZh|
[^_]
[^_]
UWVS
]ZVP
,[^_]
UWVS
ZYUP
[^_]
[^_]
]ZSP
[^_]
XZUV
XZUV
XZWV
[^_]
UWVS
T$(e
D$(Y
\$ 1
_ZVP
|$ W
D$DP
D$DP
|$PW
]XWh
XZShp
XZSV
D$(%
|$ Y]
G SV
[^_]
t%<\u
Y^SP
t$LP
t$@UWV
[^_]
UWVS
D$(P
D$(P
L$(Q
Y^SP
,[^_]
ZYWP
ZYWP
ZYWP
ZYWP
ZYWP
ZYWP
ZYWP
ZYVP
ZYVP
_ZVP
UWVS1
[^_]
[^_]
t,<=t(
Y_UP
[^_]
UWVS
<[^_]
[^_]
T$(R
Y_UP
\$ e
>-th
\$ e
>-th
UWVS
\$@e
,[^_]
VPUh
[^_]
[^_]
[^_]
[^_]
UWVS
,[^_]
D$ P
VtQ~
[^_]
[^_]
D$$P
t$$j
;0t+
ZYSP
ZYSP
ZYSP
ZYSP
UWVS
ZYUP
[^_]
[^_]
:-tq
\$ e
8-tV
ZYSP
ZYWV
t$ Pj
ZYSP
UWVS
,[^_]
t$HP
t$HS
t$HP
,[^_]
t$HP
<	vX
+tC~1
\$@e
,[^_]
UWVS
t$8Q
T$(e
D$\1
L$\e3
l[^_]
\$T1
ZYSP
D$@^_j
Y^SP
\$@1
D$Dt
D$L1
L$Xt9
]Xj[S
]ZSP
D$Dt
D$,@
D$0@
t$ 	
"L$D
\$,	
t$ P
T$8R
D$ 	
D$Xt
D$ 	
t$<Pj
"L$D
\$,	
ZYSP
t$ j
\$L1
ZYSP
ZYVP
UWVS
L$$Q
T$$Rj
,[^_]
t$<etM<ntQ<E
UWVS1
,[^_]
,[^_]
_bui
ltin
_unl
YXWV
XZVW
_str
XZVW
_bui
ltin
_loaf
VSWP
_bui
ltin
_unl
Y_SV
UWVS
D$pPUj
D$|%
[^_]
D$pPU
D$8U
L$<9
t$X1
D$lRPU
L$dP
l$$U
D$Pj
t$Hh
ZYVP
^ZPh
[^_]
Wh Y
\$(S
[^_]
D$$Pj
XZVhp
D$ Ph
tkPPj
xAUWj
\$(S
D$$Pj
atU~
[^_]
ZYVP
_ZVP
>-tG
>-tE
UWVS1
[^_]
[^_]
\$Pe
D$,1
L$,e3
<[^_]
ZYUP
Y_SP
]ZWP
*PhY
|$(W
t$0W
t$0h Y
t$0h@
ZYPj
D$,Pj
t$0V
[^_]
ZYSP
>-tM
>-tG
 ;8t
UWVS
[^_]
[^_]
[^_]
[^Pj
,[^_]
[^_]
8/tM
UWVS
dth~
[^_]
D$@PR
D$@PR
UUUP
ZYPj
D$,W
 ;l$
D$(j
XZUW
 ;T$
 Ph(
UWVS1
|$Pe
D$,1
rt{~I
L$,e3
<[^_]
ZYSP
D$(PS
ZYPS
D$$Pj
D$(P
[^_]
 Y[Vh
atd~
[^_]
PSh)
UWVS
ZYVP
?0t$
[^_]
\$ e
8-t`
\$pe
D$L1
T$Le3
\[^_]
D$(j
D$PP
D$PPU
D$PP
D$PPU
;T$(
^_SP
D$,X
t$,W
t$$h
L$TQP
T$8R
^ZSP
UWVS
[^_]
t1;T$
[^_]
[^_]
ZYPS
UWVS
\$Pe
D$,1
+D$$Ph
|$,e3=
<[^_]
ZYSP
UWVS
\$@e
ZYSP
,[^_]
UWVS
l$Pe
D$,1
<-t'
<+t3
l$$1
<nt2<-t>
|$,e3=
<[^_]
Y^SP
D$0e
t$$P
|$ 1
YZVP
ZYVP
_ZVP
UWVS1
[^_]
D$`t3
t$ j
<\uD
]ZSP
XZVS
t$ P
t$DP
t$\V
>-tE
UWVS
[^_]
[^_]
UWVS
[^_]
t$8Q
|$0-
D$,1
D$,e3
<[^_]
ZYSP
UWVS
l$@e
,[^_]
D$%P
D$%P
PPj+jx
ZYj+jv
\$`e
D$<1
ftg~
L$<e3
L[^_]
D$ 1
t$@V
T$,t>
T$0S
ZYVP
D$@PV
t$@P
UWVS
D$,1
|$XUVS
L$,e3
<[^_]
UWVS
[^_]
]ZVP
[^_]
t$`e
D$<1
L$<e3
L[^_]
t$lS
D$d	F
T$(1
D$4-
D$5g
D$6r
D$@P
XZUQ
ZYSP
DD$d
DD$d
D$d@
|$d@
DD$d
UWVS
l$0e
ZYUP
[^_]
_ZSP
XZSh Y
_ZSP
_ZSP
YZWP
XWh Y
XZWh
D$ e
\$\Sj
D$dP
UWVS
[^_]
[^_]
[^_]
,[^_]
t$<-u4
UWVS
|$D%
[^_]
USPj
USPj
USPj
SSPj
UWVS
8-uL
[^_]
[^_]
[^_]
[^_]
\$,1
\$,e3
\$$SP
D$\1
\$8S
WVQR
D$\e3
l[^_]
UWVS
D$\1
|$\e3=
l[^_]
^_SP
3T$ 	
ZYPU
D$PPV
D$PPV
D$T9D$L
T$Pr
9T$Hv
|$01
<gtm~S<ot_
[^_]
<wte<xtQ
	|$4
#t$4	
t$4t
[^_]
!T$4
[^_]
[^_]
0<	vk
[^_]
D$$j
<%tt
D$(PW
9T$$
UWVS
\$Pe
D$,1
|$,e3=
<[^_]
gfff
D$"PhR
ZYSP
[^_]
ZYUP
[^_]
D$L1
D$Le3
\[^_]
UWVS
[^_]
UWVS1
[^_]
[^_]
[^_]
[^_]
[^_]
RRPj
ZYSP
UWVS
t0;l$
,[^_]
[^_]
UWVS
<'t[<"tW
[^_]
UWVS
\$@+\$
,[^_]
\$@+\$
9T$D
ET$D
UWVS
[^_]
t$8U
D$TPU
t$(U
D$TP
;D$L|
D$TP
T$DR
^]WP
9t$D~d
D$lu
D$l%
ZYSP
L$0;
t$8U
t$0j
D$XP
t$(h
\$xS
t$0U
t$4Uj
t$(P
t$(U
t$ j
D$XP
t$@U
t$(P
t$ j
t$ j
t$<Uj
t$4Pj
t$0P
<$Uj
t$$Uj
t$$Pj
tDQQUP
RUPj
t$,Uj
t$,Pj
UWVS
|$09
[^_]
[^_]
[^_]
4$SPj
[^_]
[^_]
[^_]
[^_]
ZYVP
ZYVP
[^_]
[^_]
[^_]
[^_]
[^_]
UWVS
D$@e
,[^_]
ZYSP
ZYSP
ZYSP
ZYSP
ZYSP
ZYSP
ZYSP
_(tP
UWVS
D$0e
ZYVP
Y_VP
_ZVP
ZYVP
Y_VP
_ZVP
ZYVP
[^_]
\$@e
,[^_]
ZYSP
,[^_]
:.t)
L$l1
L$le3
D$<%
[^_]
D$0PUj
D$<%
UWVS
,[^_]
UWVS
D$(1
D$ P
D$$P
,[^_]
;)u\
[^_]
[^_]
ZYPV
UWVS
<$+|$@
t$HP
[^_]
[^_]
God A red nugget A fat egg under a dog
D$@1
D$D%
[^_]
,[^_]
D$D%
UWVS
[^_]
tN9>u
[^_]
UWVS
\$09
t*9D$0w
[^_]
[^_]
|$4|tQ
T$pe
L$L1
D$49
9D$ 
9T$ 
T$Le3
\[^_]
9L$4
9T$4
9T$4
DD$t
|$$[
9D$4
Pj/R
9D$ t:
t3<]
|$$_
8/tl
8/t_
|$Hj
9D$D
9D$Dt
,[^_]
,[^_]
j|UV
ZYWP
[^_]
UWVS
\$$9
[^_]
[^_]
ux;D$
|$(|t\
UWVS
T$\1
D$89
D$$9D$
9L$(tq
D$ 9\$ 
L$\e3
l[^_]
l$$t	
9T$(
D$$u
D$ )
Pj/U
L$$9L$8
l$$9l$
D$ ;\$ t
T$$9T$
.u&9T$8
T$4t
9l$8
;\$ 
|$ [
9l$8
T$TR
D$XP
/RPU
9T$(t2
D$P|
t$,V
D$ )
D$(/
9D$D
9D$Dt
,[^_]
,[^_]
j|UV
ZYWP
[^_]
t$<e
D$(1
D$ P
D$$P
UWVS
\$@e
D$H1
9t$HtN
tg<\t
,[^_]
T$(PV
D$(PS
UWVS
|$<1
D$@P
D$(\
|$<e3=
L[^_]
D$4Pj
D$4P
\$$1
T$0)
D$@Pj
D$@Pj
D$<PS
>*[^_
[^_]
[^_]
UWVS
[^_]
[^_]
[^_]
[^_]
UWVS
[^_]
;L$$
UWVS
ZYSP
[^_]
[^_]
<.=u
ZYSP
t$(j
D$$1
ZYSP
D$$1
t$(j
D$$1
ZYSP
UWVS
[^_]
UWVS
t$,WU
[^_]
D$<1
T$<e3
D$<1
T$<e3
D$<1
T$<e3
D$<1
T$<e3
D$<1
T$<e3
UWVS
D$L1
t$8V
L$Le3
\[^_]
 9\$Ds
/dev
/fd/
t$l1
8/t*h
|$le3=
p[^_
x	ru
;D$$uI
UWVS
l$le
D$H1
ZYUP
XZj/S
D$ PR
L$<e3
L[^_]
[^UP
UWVS
gfff
[^_]
[^_]
[^_]
SRh/'
UWVS
"D$8
[^_]
ZYUP
D$l1
L$le3
UWVS
tS</
tQ</tM
,[^_]
ZYSP
,[^_]
UWVS
ZYSP
</tr
tX</tT
[^_]
L$ V
D$6P
D$2P
T$$R
ZYVP
SPhs'
|$4h
SPhs'
tQ;{
UWVS
ZYSP
[^_]
UWVS
|$41
ZYSP
ZYSP
UWVS
[^_]
ZYSP
[^_]
UWVS
[^_]
UWVS
l$<e
t$LV
[^_]
UWVS
[^_]
[^_]
UWVS
ZYSP
[^_]
UWVS
|$@S
[^_]
UWVS
[^_]
[^_]
UWVS
<.tH
[^_]
UWVS
UWVS
|$`e
D$81
|$,e3=
<[^_]
	<uw0
UWVS
tE<\
<VwM
,[^_]
,[^_]
,[^_]
D$$P
UWVS
D$ 1
[^_]
t$8j
[^_]
[^_]
UWVS
[^_]
z0v'
[^_]
gfff
gfff
gfff
UWVS
[^_]
[^_]
gfff
gfff
[^_]
UWVS
t$He
D$#P
;D$Ltn
D$#P
,[^_]
UWVS
[^_]
[^_]
D$01
D$ P
L$,e3
UWVS
|$\1
|$\e3=
l[^_]
;l$ 
|$<P
D$$)
D$8P
Beeb
D$$)
D$<P
L$@)
D$@P
D$$)
 u&1
D$<PS
t$WV
UWVS
[^_]
UWVS
l$Te
D$,1
L$,e3
<[^_]
D$ P
D$ P
j'Ph
XZj@h
ASCIf
j'Vh
,[^_]
SVWj
;\$H~
,[^_]
t$H)
UWVS
L$()
t6rL
[^_]
+\$ 
[^_]
+D$ 
UWVS
\$0e
VWSj
[^_]
[^_]
D$8)
[^_]
[^_]
UWVS
[^_]
UWVS
,[^_]
u|;\$
UWVS
[^_]
[^_]
[^_]
[^_]
UWVS
[^_]
[^_]
[^_]
[^_]
UWVS
t$,U
[^_]
debugger
GNU bash, version %s-(%s)
i686-pc-linux-gnu
GNU long options:
	--%s
Shell options:
	-%s or -o option
run_one_command
rbash
I have no name!
??host??
BASH_ENV
POSIXLY_CORRECT
POSIX_PEDANTIC
\s-\v\$ 
~/.bashrc
%s: invalid option
%c%c: invalid option
login_shell
INSIDE_EMACS
,term:
 (term:
dumb
emacs
/etc/bash.bashrc
/etc/profile
~/.profile
~/.bash_profile
~/.bash_login
FUNCNAME
BASH_SOURCE
BASH_LINENO
main
eterm
dump-po-strings
dump-strings
init-file
noediting
noprofile
norc
posix
rcfile
Usage:	%s [GNU long option] [option] ...
	%s [GNU long option] [option] script-file ...
	-ilrsD or -c command or -O shopt_option		(invocation only)
Type `%s -c "help set"' for more information about shell options.
Type `%s -c help' for more information about shell builtin commands.
Use the `bashbug' command to report bugs.
bash home page: <http://www.gnu.org/software/bash>
General help using GNU software: <http://www.gnu.org/gethelp/>
/usr/share/bashdb/bashdb-main.inc
cannot start debugger; debugging mode disabled
cannot set uid to %d: effective uid %d
cannot set gid to %d: effective gid %d
%s: option requires an argument
%s: cannot execute binary file
timed out waiting for input: auto-logout
PROMPT_COMMAND
TMOUT
reader_loop
	;|&
syntax error near `%s'
syntax error
readline stdin
%a %b %d
%H:%M:%S
%I:%M:%S
%I:%M %p
%H:%M
%s.%d
HOME
esac
done
then
else
elif
#%^,~:-=?+/
eval
expected `)'
Use "%s" to leave the shell.
"$@"
COPROC
command substitution
newline
select
while
until
coproc
=>>>>??@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@AAABBCCDDDDDEEEEEEEEEEEFFFFFFFFGGGGHHHHHHIIIJJJKKLMMMMMNNNOPQRRRSSTTTTUUUUUUVVWXXYYYZZZZZZ[[\\\]]^^^_____`````aaabbb
<@JDA>F?EGHI
4:7=
_z|~u
STYZ
rOP[\
 !"#$%&'()*+,-./04
syntax error near unexpected token `%s'
syntax error: unexpected end of file
maximum here-document count exceeded
unexpected EOF while looking for matching `%c'
unexpected EOF while looking for matching `)'
unexpected EOF while looking for `]]'
syntax error in conditional expression: unexpected token `%s'
syntax error in conditional expression
unexpected token `%s', expected `)'
unexpected argument `%s' to conditional unary operator
unexpected argument to conditional unary operator
unexpected token `%s', conditional binary operator expected
conditional binary operator expected
unexpected argument `%s' to conditional binary operator
unexpected argument to conditional binary operator
unexpected token `%c' in conditional command
unexpected token `%s' in conditional command
unexpected token %d in conditional command
OLDPWD
`%s': not a valid identifier
/dev/tty
PROMPT_DIRTRIM
getcwd: cannot access parent directories
syntax error: `;' unexpected
syntax error: `((%s))'
environment
clean_simple_command
syntax error: arithmetic expression required
make_here_document: bad instruction type %d
here-document at line %d delimited by end-of-file (wanted `%s')
make_redirection: redirection instruction `%d' out of range
{%s}
<<%s%s
>| %s
<> %s
<<< %s
{%s}<&%d
%d<&%d
{%s}>&%d
%d>&%d
{%s}<&%s
%d<&%s
{%s}>&%s
%d>&%s
{%s}<&%d-
%d<&%d-
{%s}>&%d-
%d>&%d-
{%s}<&%s-
%d<&%s-
{%s}>&%s-
%d>&%s-
{%s}>&-
%d>&-
&> %s
&>> %s
 && 
 || 
xtrace_set: NULL file pointer
%s=(%s)
''%s
for %s in 
select %s in 
case %s in 
case %s in
time 
for ((
 then
else
function %s () 
coproc %s 
print_command
function 
cprintf: `%c': invalid format character
xtrace_set: %d: invalid file descriptor
xtrace fd (%d) != fileno xtrace fp (%d)
print_command: bad connector `%d'
dispose_command
cannot duplicate fd %d to fd %d
cannot redirect standard input from /dev/null: %s
eval: maximum eval nesting level exceeded (%d)
%s: maximum source nesting level exceeded (%d)
%s: cannot execute binary file: %s
%s: restricted: cannot specify `/' in command names
execute_coproc: coproc [%d:%s] still exists
TIMEFORMAT: `%c': invalid format character
%s: maximum function nesting level exceeded (%d)
execute_cond_node
/dev/null
eval_builtin
builtin_env
return_temp_env
%s_PID
%s: %s: bad interpreter
simple-command
auto_resume
exact
substring
saved-redirects
command_not_found_handle
%s: command not found
loop_redirections
COLUMNS
execute_connection
`%s': is a special builtin
%s: readonly function
execute_command
%*d%s%s
real	%3lR
user	%3lU
sys	%3lS
user	%2lU
sys	%2lS
real %2R
user %2U
sys %2S
function_calling
OPTIND
execute-shell-function
pipe error
pipe-file-descriptors
lastpipe-exec
%s: circular name reference
%s: %s: cannot open as FILE
HISTFILE
ignorespace
ignoredups
ignoreboth
erasedups
OPTERR
SHLVL
shell_init
shell-init
PPID
LINES
BASH_ARGV
BASH_ARGC
%s: cannot unset: readonly %s
~/.sh_history
~/.bash_history
BASH_FUNC_
() {
SHELLOPTS
i686
HOSTTYPE
OSTYPE
MACHTYPE
HOSTNAME
MAILCHECK
BASH
BASH_VERSION
BASH_VERSINFO
BASH_EXECUTION_STRING
IGNOREEOF
ignoreeof
HISTCONTROL
HISTIGNORE
HISTTIMEFORMAT
EUID
BASH_XTRACEFD
BASH_COMPAT
FUNCNEST
SECONDS
BASH_COMMAND
BASH_SUBSHELL
RANDOM
BASHPID
HISTCMD
COMP_WORDBREAKS
DIRSTACK
GROUPS
BASH_CMDS
BASH_ALIASES
GLOBIGNORE
PIPESTATUS
CHILD_MAX
EXECIGNORE
HISTFILESIZE
HISTSIZE
HOSTFILE
LANG
LC_ALL
LC_COLLATE
LC_CTYPE
LC_MESSAGES
LC_NUMERIC
LC_TIME
MAIL
MAILPATH
TERMCAP
TERMINFO
TEXTDOMAIN
TEXTDOMAINDIR
histchars
%s: %s: compatibility value out of range
%s: %s: invalid value for trace file descriptor
%s: removing nameref attribute
%s: nameref variable self references not allowed
all_local_variables: no function context at current scope
%s: variable may not be assigned value
make_local_variable: no function context at current scope
shell level (%d) too high, resetting to 1
%s: assigning integer to name reference
pop_var_context: head of shell_variables not a function context
pop_var_context: no global_variables context
pop_scope: head of shell_variables not a temporary environment scope
/usr/local/sbin:/usr/local/bin:/usr/bin
error importing function definition for `%s'
 line 
%s: 
(null)
last command: %s
Aborting...
warning: 
INFORM: 
%s: %s:%s%d: 
%s: %s: %d
unknown command error
%s: unbound variable
%s: readonly variable
bad command type
bad connector
bad jump
bash-maintainers@gnu.org
%s[%s]
invalid number
invalid arithmetic base
value too great for base
*/%+-&^|
syntax error in expression
recursion stack underflow
missing `)'
exponent less than 0
division by 0
expression expected
bug: bad expassign token
%s%s%s: %s (error token is "%s")
syntax error: operand expected
syntax error: invalid arithmetic operator
expression recursion level exceeded
identifier expected after pre-increment or pre-decrement
`:' expected for conditional expression
attempted assignment to non-variable
<unknown>
Signal %d
[%d]%c 
     
%5ld
Stopped
Stopped(%s)
Running
Done
Done(%d)
Exit %d
Unknown status
(core dumped) 
  (wd: %s)
%s: line %d: 
 (core dumped)
(wd now: %s)
notify_of_job_status
start_pipeline: pgrp pipe
[%d] %ld
[%ld: %d (%d)] tcsetattr
SIGCHLD trap
fork: retry
child setpgid (%ld to %ld)
fork
%s: job has terminated
[%d]%s
	(wd: %s)
no job control in this shell
job-working-directory
deleting stopped job %d with process group %ld
describe_pid: %ld: no such pid
waitchld: turning on WNOHANG to avoid indefinite block
wait_for: No record of process %ld
wait: pid %ld is not a child of this shell
wait_for_job: job %d is stopped
%s: job %d already in background
initialize_job_control: getpgrp failed
initialize_job_control: setpgid
cannot set terminal process group (%d)
declare -%s %s=%s
?*+!@
#%^,~:-=?+/@}
#%:-=?+/@}
%:=+/
%s: bad substitution
%s: substring expression < 0
%s: parameter null or not set
process substitution
%s: invalid variable name
no match: %s
bad substitution: no closing `%s' in %s
cannot make pipe for command substitution
cannot make child for command substitution
command_substitute: cannot duplicate pipe as fd 1
command substitution: ignored null byte in input
%s: cannot assign list to array member
$%s: cannot assign in this way
%s: invalid variable name for name reference
cannot make pipe for process substitution
cannot make child for process substitution
cannot duplicate named pipe %s as fd %d
bad substitution: no closing "`" in %s
%s: invalid indirect expansion
You have mail in $_
You have new mail in $_
The mail in %s has been read
debug trap
invalid signal number
interrupt trap
trap_handler: bad signal %d
exit trap
error trap
return trap
EXIT
SIGHUP
SIGINT
SIGQUIT
SIGILL
SIGTRAP
SIGABRT
SIGBUS
SIGFPE
SIGKILL
SIGUSR1
SIGSEGV
SIGUSR2
SIGPIPE
SIGALRM
SIGTERM
SIGSTKFLT
SIGCHLD
SIGCONT
SIGSTOP
SIGTSTP
SIGTTIN
SIGTTOU
SIGURG
SIGXCPU
SIGXFSZ
SIGVTALRM
SIGPROF
SIGWINCH
SIGIO
SIGPWR
SIGSYS
SIGJUNK(32)
SIGJUNK(33)
SIGRTMIN
SIGRTMIN+1
SIGRTMIN+2
SIGRTMIN+3
SIGRTMIN+4
SIGRTMIN+5
SIGRTMIN+6
SIGRTMIN+7
SIGRTMIN+8
SIGRTMIN+9
SIGRTMIN+10
SIGRTMIN+11
SIGRTMIN+12
SIGRTMIN+13
SIGRTMIN+14
SIGRTMIN+15
SIGRTMAX-14
SIGRTMAX-13
SIGRTMAX-12
SIGRTMAX-11
SIGRTMAX-10
SIGRTMAX-9
SIGRTMAX-8
SIGRTMAX-7
SIGRTMAX-6
SIGRTMAX-5
SIGRTMAX-4
SIGRTMAX-3
SIGRTMAX-2
SIGRTMAX-1
SIGRTMAX
DEBUG
RETURN
run_pending_traps: signal handler is SIG_DFL, resending %d (%s) to myself
run_pending_traps: bad value in trap_list[%d]: %p
cannot reset nodelay mode for fd %d
cannot allocate new file descriptor for bash input from fd %d
save_bash_input: buffer already exists for new fd %d
unwind_frame_run: %s: frame not found
unwind_frame_discard: %s: frame not found
%s: integer expression expected
argument expected
%s: unary operator expected
%s: binary operator expected
`)' expected
`)' expected, found %s
missing `]'
too many arguments
release
%s.%d(%d)-%s
GNU bash, version %s (%s)
Copyright (C) 2016 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software; you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
@(#)Bash version 4.4.11(1) release GNU
;|&(
;|&()
%s: cannot convert indexed to associative array
%s: invalid associative array key
%s: cannot assign to non-numeric index
%s: %s: must use subscript when assigning associative array
array assign
'()'
bad array subscript
%s[%s: %s
[%s]: %s
%0*d
brace expansion: failed to allocate memory for %d elements
brace expansion: failed to allocate memory for `%s'
brace expansion: cannot allocate memory for %s
;&()|<>
%s: cannot create: %s
%s%s%s
C-xC-e
%s %d
input-meta
symlink-hook
;|&{(`
$include 
/etc/hosts
hostname_completion_file
no closing `%c' in %s
\"'@<>=;|&()#$`?*[!:{~
completion-ignore-case
fc -e vi
READLINE_LINE
READLINE_POINT
bash_execute_unix_command
comment-begin
Bash
shell-expand-line
history-expand-line
magic-space
shell-forward-word
shell-backward-word
shell-kill-word
shell-backward-kill-word
history-and-alias-expand-line
insert-last-argument
operate-and-get-next
display-shell-version
edit-and-execute-command
complete-into-braces
complete-filename
possible-filename-completions
complete-username
possible-username-completions
complete-hostname
possible-hostname-completions
complete-variable
possible-variable-completions
complete-command
possible-command-completions
glob-complete-word
glob-expand-word
glob-list-expansions
dynamic-complete-history
dabbrev-expand
()<>;&| 	
_EmptycmD_
%s: missing colon separator
FIGNORE
fc -e "${VISUAL:-${EDITOR:-emacs}}"
%s: first non-whitespace character is not `"'
fc -e "${VISUAL:-${EDITOR:-vi}}"
bash_execute_unix_command: cannot find keymap for command
/usr/share/locale
POSIX
"%s"
setlocale: LC_ALL: cannot change locale (%s)
setlocale: LC_ALL: cannot change locale (%s): %s
setlocale: %s: cannot change locale (%s)
setlocale: %s: cannot change locale (%s): %s
#: %s:%d
msgid %s%s
msgstr ""
redirection error: cannot duplicate fd
%s: cannot overwrite existing file
%s: restricted: cannot redirect output
cannot create temp file for here-document: %s
%s: cannot assign fd to variable
file descriptor out of range
%s: ambiguous redirect
sh-thd
/dev/tcp/*/*
/dev/udp/*/*
COMP_LINE
COMP_POINT
COMP_TYPE
COMP_KEY
COMP_WORDS
COMP_CWORD
gen-shell-function-matches
COMPREPLY
_DefaultCmD_
completion: function `%s' not found
programmable_completion: %s: possible retry loop
progcomp_insert: %s: NULL COMPSPEC
%s: cannot allocate %lu bytes
xmalloc
xrealloc
Read lines from a file into an array variable.
    
    A synonym for `mapfile'.
Read lines from the standard input into an indexed array variable.
    
    Read lines from the standard input into the indexed array variable ARRAY, or
    from file descriptor FD if the -u option is supplied.  The variable MAPFILE
    is the default ARRAY.
    
    Options:
      -d delim	Use DELIM to terminate lines, instead of newline
      -n count	Copy at most COUNT lines.  If COUNT is 0, all lines are copied
      -O origin	Begin assigning to ARRAY at index ORIGIN.  The default index is 0
      -s count	Discard the first COUNT lines read
      -t	Remove a trailing DELIM from each line read (default newline)
      -u fd	Read lines from file descriptor FD instead of the standard input
      -C callback	Evaluate CALLBACK each time QUANTUM lines are read
      -c quantum	Specify the number of lines read between each call to
    			CALLBACK
    
    Arguments:
      ARRAY	Array variable name to use for file data
    
    If -C is supplied without -c, the default quantum is 5000.  When
    CALLBACK is evaluated, it is supplied the index of the next array
    element to be assigned and the line to be assigned to that element
    as additional arguments.
    
    If not supplied with an explicit origin, mapfile will clear ARRAY before
    assigning to it.
    
    Exit Status:
    Returns success unless an invalid option is given or ARRAY is readonly or
    not an indexed array.
Modify or display completion options.
    
    Modify the completion options for each NAME, or, if no NAMEs are supplied,
    the completion currently being executed.  If no OPTIONs are given, print
    the completion options for each NAME or the current completion specification.
    
    Options:
    	-o option	Set completion option OPTION for each NAME
    	-D		Change options for the "default" command completion
    	-E		Change options for the "empty" command completion
    
    Using `+o' instead of `-o' turns off the specified option.
    
    Arguments:
    
    Each NAME refers to a command for which a completion specification must
    have previously been defined using the `complete' builtin.  If no NAMEs
    are supplied, compopt must be called by a function currently generating
    completions, and the options for that currently-executing completion
    generator are modified.
    
    Exit Status:
    Returns success unless an invalid option is supplied or NAME does not
    have a completion specification defined.
Display possible completions depending on the options.
    
    Intended to be used from within a shell function generating possible
    completions.  If the optional WORD argument is supplied, matches against
    WORD are generated.
    
    Exit Status:
    Returns success unless an invalid option is supplied or an error occurs.
Specify how arguments are to be completed by Readline.
    
    For each NAME, specify how arguments are to be completed.  If no options
    are supplied, existing completion specifications are printed in a way that
    allows them to be reused as input.
    
    Options:
      -p	print existing completion specifications in a reusable format
      -r	remove a completion specification for each NAME, or, if no
    		NAMEs are supplied, all completion specifications
      -D	apply the completions and actions as the default for commands
    		without any specific completion defined
      -E	apply the completions and actions to "empty" commands --
    		completion attempted on a blank line
    
    When completion is attempted, the actions are applied in the order the
    uppercase-letter options are listed above.  The -D option takes
    precedence over -E.
    
    Exit Status:
    Returns success unless an invalid option is supplied or an error occurs.
Formats and prints ARGUMENTS under control of the FORMAT.
    
    Options:
      -v var	assign the output to shell variable VAR rather than
    		display it on the standard output
    
    FORMAT is a character string which contains three types of objects: plain
    characters, which are simply copied to standard output; character escape
    sequences, which are converted and copied to the standard output; and
    format specifications, each of which causes printing of the next successive
    argument.
    
    In addition to the standard format specifications described in printf(1),
    printf interprets:
    
      %b	expand backslash escape sequences in the corresponding argument
      %q	quote the argument in a way that can be reused as shell input
      %(fmt)T	output the date-time string resulting from using FMT as a format
    	        string for strftime(3)
    
    The format is re-used as necessary to consume all of the arguments.  If
    there are fewer arguments than the format requires,  extra format
    specifications behave as if a zero value or null string, as appropriate,
    had been supplied.
    
    Exit Status:
    Returns success unless an invalid option is given or a write or assignment
    error occurs.
Set and unset shell options.
    
    Change the setting of each shell option OPTNAME.  Without any option
    arguments, list all shell options with an indication of whether or not each
    is set.
    
    Options:
      -o	restrict OPTNAMEs to those defined for use with `set -o'
      -p	print each shell option with an indication of its status
      -q	suppress output
      -s	enable (set) each OPTNAME
      -u	disable (unset) each OPTNAME
    
    Exit Status:
    Returns success if OPTNAME is enabled; fails if an invalid option is
    given or OPTNAME is disabled.
Display directory stack.
    
    Display the list of currently remembered directories.  Directories
    find their way onto the list with the `pushd' command; you can get
    back up through the list with the `popd' command.
    
    Options:
      -c	clear the directory stack by deleting all of the elements
      -l	do not print tilde-prefixed versions of directories relative
    		to your home directory
      -p	print the directory stack with one entry per line
      -v	print the directory stack with one entry per line prefixed
    		with its position in the stack
    
    Arguments:
      +N	Displays the Nth entry counting from the left of the list
    		shown by dirs when invoked without options, starting with
    		zero.
    
      -N	Displays the Nth entry counting from the right of the list
    		shown by dirs when invoked without options, starting with
    		zero.
    
    Exit Status:
    Returns success unless an invalid option is supplied or an error occurs.
Remove directories from stack.
    
    Removes entries from the directory stack.  With no arguments, removes
    the top directory from the stack, and changes to the new top directory.
    
    Options:
      -n	Suppresses the normal change of directory when removing
    		directories from the stack, so only the stack is manipulated.
    
    Arguments:
      +N	Removes the Nth entry counting from the left of the list
    		shown by `dirs', starting with zero.  For example: `popd +0'
    		removes the first directory, `popd +1' the second.
    
      -N	Removes the Nth entry counting from the right of the list
    		shown by `dirs', starting with zero.  For example: `popd -0'
    		removes the last directory, `popd -1' the next to last.
    
    The `dirs' builtin displays the directory stack.
    
    Exit Status:
    Returns success unless an invalid argument is supplied or the directory
    change fails.
Add directories to stack.
    
    Adds a directory to the top of the directory stack, or rotates
    the stack, making the new top of the stack the current working
    directory.  With no arguments, exchanges the top two directories.
    
    Options:
      -n	Suppresses the normal change of directory when adding
    		directories to the stack, so only the stack is manipulated.
    
    Arguments:
      +N	Rotates the stack so that the Nth directory (counting
    		from the left of the list shown by `dirs', starting with
    		zero) is at the top.
    
      -N	Rotates the stack so that the Nth directory (counting
    		from the right of the list shown by `dirs', starting with
    		zero) is at the top.
    
      dir	Adds DIR to the directory stack at the top, making it the
    		new current working directory.
    
    The `dirs' builtin displays the directory stack.
    
    Exit Status:
    Returns success unless an invalid argument is supplied or the directory
    change fails.
Common shell variable names and usage.
    
    BASH_VERSION	Version information for this Bash.
    CDPATH	A colon-separated list of directories to search
    		for directories given as arguments to `cd'.
    GLOBIGNORE	A colon-separated list of patterns describing filenames to
    		be ignored by pathname expansion.
    HISTFILE	The name of the file where your command history is stored.
    HISTFILESIZE	The maximum number of lines this file can contain.
    HISTSIZE	The maximum number of history lines that a running
    		shell can access.
    HOME	The complete pathname to your login directory.
    HOSTNAME	The name of the current host.
    HOSTTYPE	The type of CPU this version of Bash is running under.
    IGNOREEOF	Controls the action of the shell on receipt of an EOF
    		character as the sole input.  If set, then the value
    		of it is the number of EOF characters that can be seen
    		in a row on an empty line before the shell will exit
    		(default 10).  When unset, EOF signifies the end of input.
    MACHTYPE	A string describing the current system Bash is running on.
    MAILCHECK	How often, in seconds, Bash checks for new mail.
    MAILPATH	A colon-separated list of filenames which Bash checks
    		for new mail.
    OSTYPE	The version of Unix this version of Bash is running on.
    PATH	A colon-separated list of directories to search when
    		looking for commands.
    PROMPT_COMMAND	A command to be executed before the printing of each
    		primary prompt.
    PS1		The primary prompt string.
    PS2		The secondary prompt string.
    PWD		The full pathname of the current directory.
    SHELLOPTS	A colon-separated list of enabled shell options.
    TERM	The name of the current terminal type.
    TIMEFORMAT	The output format for timing statistics displayed by the
    		`time' reserved word.
    auto_resume	Non-null means a command word appearing on a line by
    		itself is first looked for in the list of currently
    		stopped jobs.  If found there, that job is foregrounded.
    		A value of `exact' means that the command word must
    		exactly match a command in the list of stopped jobs.  A
    		value of `substring' means that the command word must
    		match a substring of the job.  Any other value means that
    		the command must be a prefix of a stopped job.
    histchars	Characters controlling history expansion and quick
    		substitution.  The first character is the history
    		substitution character, usually `!'.  The second is
    		the `quick substitution' character, usually `^'.  The
    		third is the `history comment' character, usually `#'.
    HISTIGNORE	A colon-separated list of patterns used to decide which
    		commands should be saved on the history list.
Execute conditional command.
    
    Returns a status of 0 or 1 depending on the evaluation of the conditional
    expression EXPRESSION.  Expressions are composed of the same primaries used
    by the `test' builtin, and may be combined using the following operators:
    
      ( EXPRESSION )	Returns the value of EXPRESSION
      ! EXPRESSION		True if EXPRESSION is false; else false
      EXPR1 && EXPR2	True if both EXPR1 and EXPR2 are true; else false
      EXPR1 || EXPR2	True if either EXPR1 or EXPR2 is true; else false
    
    When the `==' and `!=' operators are used, the string to the right of
    the operator is used as a pattern and pattern matching is performed.
    When the `=~' operator is used, the string to the right of the operator
    is matched as a regular expression.
    
    The && and || operators do not evaluate EXPR2 if EXPR1 is sufficient to
    determine the expression's value.
    
    Exit Status:
    0 or 1 depending on value of EXPRESSION.
Evaluate arithmetic expression.
    
    The EXPRESSION is evaluated according to the rules for arithmetic
    evaluation.  Equivalent to "let EXPRESSION".
    
    Exit Status:
    Returns 1 if EXPRESSION evaluates to 0; returns 0 otherwise.
Resume job in foreground.
    
    Equivalent to the JOB_SPEC argument to the `fg' command.  Resume a
    stopped or background job.  JOB_SPEC can specify either a job name
    or a job number.  Following JOB_SPEC with a `&' places the job in
    the background, as if the job specification had been supplied as an
    argument to `bg'.
    
    Exit Status:
    Returns the status of the resumed job.
Group commands as a unit.
    
    Run a set of commands in a group.  This is one way to redirect an
    entire set of commands.
    
    Exit Status:
    Returns the status of the last command executed.
Define shell function.
    
    Create a shell function named NAME.  When invoked as a simple command,
    NAME runs COMMANDs in the calling shell's context.  When NAME is invoked,
    the arguments are passed to the function as $1...$n, and the function's
    name is in $FUNCNAME.
    
    Exit Status:
    Returns success unless NAME is readonly.
Create a coprocess named NAME.
    
    Execute COMMAND asynchronously, with the standard output and standard
    input of the command connected via a pipe to file descriptors assigned
    to indices 0 and 1 of an array variable NAME in the executing shell.
    The default NAME is "COPROC".
    
    Exit Status:
    The coproc command returns an exit status of 0.
Execute commands as long as a test does not succeed.
    
    Expand and execute COMMANDS as long as the final command in the
    `until' COMMANDS has an exit status which is not zero.
    
    Exit Status:
    Returns the status of the last command executed.
Execute commands as long as a test succeeds.
    
    Expand and execute COMMANDS as long as the final command in the
    `while' COMMANDS has an exit status of zero.
    
    Exit Status:
    Returns the status of the last command executed.
Execute commands based on conditional.
    
    The `if COMMANDS' list is executed.  If its exit status is zero, then the
    `then COMMANDS' list is executed.  Otherwise, each `elif COMMANDS' list is
    executed in turn, and if its exit status is zero, the corresponding
    `then COMMANDS' list is executed and the if command completes.  Otherwise,
    the `else COMMANDS' list is executed, if present.  The exit status of the
    entire construct is the exit status of the last command executed, or zero
    if no condition tested true.
    
    Exit Status:
    Returns the status of the last command executed.
Execute commands based on pattern matching.
    
    Selectively execute COMMANDS based upon WORD matching PATTERN.  The
    `|' is used to separate multiple patterns.
    
    Exit Status:
    Returns the status of the last command executed.
Report time consumed by pipeline's execution.
    
    Execute PIPELINE and print a summary of the real time, user CPU time,
    and system CPU time spent executing PIPELINE when it terminates.
    
    Options:
      -p	print the timing summary in the portable Posix format
    
    The value of the TIMEFORMAT variable is used as the output format.
    
    Exit Status:
    The return status is the return status of PIPELINE.
Select words from a list and execute commands.
    
    The WORDS are expanded, generating a list of words.  The
    set of expanded words is printed on the standard error, each
    preceded by a number.  If `in WORDS' is not present, `in "$@"'
    is assumed.  The PS3 prompt is then displayed and a line read
    from the standard input.  If the line consists of the number
    corresponding to one of the displayed words, then NAME is set
    to that word.  If the line is empty, WORDS and the prompt are
    redisplayed.  If EOF is read, the command completes.  Any other
    value read causes NAME to be set to null.  The line read is saved
    in the variable REPLY.  COMMANDS are executed after each selection
    until a break command is executed.
    
    Exit Status:
    Returns the status of the last command executed.
Arithmetic for loop.
    
    Equivalent to
    	(( EXP1 ))
    	while (( EXP2 )); do
    		COMMANDS
    		(( EXP3 ))
    	done
    EXP1, EXP2, and EXP3 are arithmetic expressions.  If any expression is
    omitted, it behaves as if it evaluates to 1.
    
    Exit Status:
    Returns the status of the last command executed.
Execute commands for each member in a list.
    
    The `for' loop executes a sequence of commands for each member in a
    list of items.  If `in WORDS ...;' is not present, then `in "$@"' is
    assumed.  For each element in WORDS, NAME is set to that element, and
    the COMMANDS are executed.
    
    Exit Status:
    Returns the status of the last command executed.
Wait for job completion and return exit status.
    
    Waits for each process identified by an ID, which may be a process ID or a
    job specification, and reports its termination status.  If ID is not
    given, waits for all currently active child processes, and the return
    status is zero.  If ID is a a job specification, waits for all processes
    in that job's pipeline.
    
    If the -n option is supplied, waits for the next job to terminate and
    returns its exit status.
    
    Exit Status:
    Returns the status of the last ID; fails if ID is invalid or an invalid
    option is given.
Display or set file mode mask.
    
    Sets the user file-creation mask to MODE.  If MODE is omitted, prints
    the current value of the mask.
    
    If MODE begins with a digit, it is interpreted as an octal number;
    otherwise it is a symbolic mode string like that accepted by chmod(1).
    
    Options:
      -p	if MODE is omitted, output in a form that may be reused as input
      -S	makes the output symbolic; otherwise an octal number is output
    
    Exit Status:
    Returns success unless MODE is invalid or an invalid option is given.
Modify shell resource limits.
    
    Provides control over the resources available to the shell and processes
    it creates, on systems that allow such control.
    
    Options:
      -S	use the `soft' resource limit
      -H	use the `hard' resource limit
      -a	all current limits are reported
      -b	the socket buffer size
      -c	the maximum size of core files created
      -d	the maximum size of a process's data segment
      -e	the maximum scheduling priority (`nice')
      -f	the maximum size of files written by the shell and its children
      -i	the maximum number of pending signals
      -k	the maximum number of kqueues allocated for this process
      -l	the maximum size a process may lock into memory
      -m	the maximum resident set size
      -n	the maximum number of open file descriptors
      -p	the pipe buffer size
      -q	the maximum number of bytes in POSIX message queues
      -r	the maximum real-time scheduling priority
      -s	the maximum stack size
      -t	the maximum amount of cpu time in seconds
      -u	the maximum number of user processes
      -v	the size of virtual memory
      -x	the maximum number of file locks
      -P	the maximum number of pseudoterminals
      -T	the maximum number of threads
    
    Not all options are available on all platforms.
    
    If LIMIT is given, it is the new value of the specified resource; the
    special LIMIT values `soft', `hard', and `unlimited' stand for the
    current soft limit, the current hard limit, and no limit, respectively.
    Otherwise, the current value of the specified resource is printed.  If
    no option is given, then -f is assumed.
    
    Values are in 1024-byte increments, except for -t, which is in seconds,
    -p, which is in increments of 512 bytes, and -u, which is an unscaled
    number of processes.
    
    Exit Status:
    Returns success unless an invalid option is supplied or an error occurs.
Display information about command type.
    
    For each NAME, indicate how it would be interpreted if used as a
    command name.
    
    Options:
      -a	display all locations containing an executable named NAME;
    		includes aliases, builtins, and functions, if and only if
    		the `-p' option is not also used
      -f	suppress shell function lookup
      -P	force a PATH search for each NAME, even if it is an alias,
    		builtin, or function, and returns the name of the disk file
    		that would be executed
      -p	returns either the name of the disk file that would be executed,
    		or nothing if `type -t NAME' would not return `file'
      -t	output a single word which is one of `alias', `keyword',
    		`function', `builtin', `file' or `', if NAME is an alias,
    		shell reserved word, shell function, shell builtin, disk file,
    		or not found, respectively
    
    Arguments:
      NAME	Command name to be interpreted.
    
    Exit Status:
    Returns success if all of the NAMEs are found; fails if any are not found.
Trap signals and other events.
    
    Defines and activates handlers to be run when the shell receives signals
    or other conditions.
    
    ARG is a command to be read and executed when the shell receives the
    signal(s) SIGNAL_SPEC.  If ARG is absent (and a single SIGNAL_SPEC
    is supplied) or `-', each specified signal is reset to its original
    value.  If ARG is the null string each SIGNAL_SPEC is ignored by the
    shell and by the commands it invokes.
    
    If a SIGNAL_SPEC is EXIT (0) ARG is executed on exit from the shell.  If
    a SIGNAL_SPEC is DEBUG, ARG is executed before every simple command.  If
    a SIGNAL_SPEC is RETURN, ARG is executed each time a shell function or a
    script run by the . or source builtins finishes executing.  A SIGNAL_SPEC
    of ERR means to execute ARG each time a command's failure would cause the
    shell to exit when the -e option is enabled.
    
    If no arguments are supplied, trap prints the list of commands associated
    with each signal.
    
    Options:
      -l	print a list of signal names and their corresponding numbers
      -p	display the trap commands associated with each SIGNAL_SPEC
    
    Each SIGNAL_SPEC is either a signal name in <signal.h> or a signal number.
    Signal names are case insensitive and the SIG prefix is optional.  A
    signal may be sent to the shell with "kill -signal $$".
    
    Exit Status:
    Returns success unless a SIGSPEC is invalid or an invalid option is given.
Display process times.
    
    Prints the accumulated user and system times for the shell and all of its
    child processes.
    
    Exit Status:
    Always succeeds.
Evaluate conditional expression.
    
    This is a synonym for the "test" builtin, but the last argument must
    be a literal `]', to match the opening `['.
Evaluate conditional expression.
    
    Exits with a status of 0 (true) or 1 (false) depending on
    the evaluation of EXPR.  Expressions may be unary or binary.  Unary
    expressions are often used to examine the status of a file.  There
    are string operators and numeric comparison operators as well.
    
    The behavior of test depends on the number of arguments.  Read the
    bash manual page for the complete specification.
    
    File operators:
    
      -a FILE        True if file exists.
      -b FILE        True if file is block special.
      -c FILE        True if file is character special.
      -d FILE        True if file is a directory.
      -e FILE        True if file exists.
      -f FILE        True if file exists and is a regular file.
      -g FILE        True if file is set-group-id.
      -h FILE        True if file is a symbolic link.
      -L FILE        True if file is a symbolic link.
      -k FILE        True if file has its `sticky' bit set.
      -p FILE        True if file is a named pipe.
      -r FILE        True if file is readable by you.
      -s FILE        True if file exists and is not empty.
      -S FILE        True if file is a socket.
      -t FD          True if FD is opened on a terminal.
      -u FILE        True if the file is set-user-id.
      -w FILE        True if the file is writable by you.
      -x FILE        True if the file is executable by you.
      -O FILE        True if the file is effectively owned by you.
      -G FILE        True if the file is effectively owned by your group.
      -N FILE        True if the file has been modified since it was last read.
    
      FILE1 -nt FILE2  True if file1 is newer than file2 (according to
                       modification date).
    
      FILE1 -ot FILE2  True if file1 is older than file2.
    
      FILE1 -ef FILE2  True if file1 is a hard link to file2.
    
    String operators:
    
      -z STRING      True if string is empty.
    
      -n STRING
         STRING      True if string is not empty.
    
      STRING1 = STRING2
                     True if the strings are equal.
      STRING1 != STRING2
                     True if the strings are not equal.
      STRING1 < STRING2
                     True if STRING1 sorts before STRING2 lexicographically.
      STRING1 > STRING2
                     True if STRING1 sorts after STRING2 lexicographically.
    
    Other operators:
    
      -o OPTION      True if the shell option OPTION is enabled.
      -v VAR         True if the shell variable VAR is set.
      -R VAR         True if the shell variable VAR is set and is a name
                     reference.
      ! EXPR         True if expr is false.
      EXPR1 -a EXPR2 True if both expr1 AND expr2 are true.
      EXPR1 -o EXPR2 True if either expr1 OR expr2 is true.
    
      arg1 OP arg2   Arithmetic tests.  OP is one of -eq, -ne,
                     -lt, -le, -gt, or -ge.
    
    Arithmetic binary operators return true if ARG1 is equal, not-equal,
    less-than, less-than-or-equal, greater-than, or greater-than-or-equal
    than ARG2.
    
    Exit Status:
    Returns success if EXPR evaluates to true; fails if EXPR evaluates to
    false or an invalid argument is given.
Suspend shell execution.
    
    Suspend the execution of this shell until it receives a SIGCONT signal.
    Unless forced, login shells cannot be suspended.
    
    Options:
      -f	force the suspend, even if the shell is a login shell
    
    Exit Status:
    Returns success unless job control is not enabled or an error occurs.
Execute commands from a file in the current shell.
    
    Read and execute commands from FILENAME in the current shell.  The
    entries in $PATH are used to find the directory containing FILENAME.
    If any ARGUMENTS are supplied, they become the positional parameters
    when FILENAME is executed.
    
    Exit Status:
    Returns the status of the last command executed in FILENAME; fails if
    FILENAME cannot be read.
Shift positional parameters.
    
    Rename the positional parameters $N+1,$N+2 ... to $1,$2 ...  If N is
    not given, it is assumed to be 1.
    
    Exit Status:
    Returns success unless N is negative or greater than $#.
Mark shell variables as unchangeable.
    
    Mark each NAME as read-only; the values of these NAMEs may not be
    changed by subsequent assignment.  If VALUE is supplied, assign VALUE
    before marking as read-only.
    
    Options:
      -a	refer to indexed array variables
      -A	refer to associative array variables
      -f	refer to shell functions
      -p	display a list of all readonly variables or functions,
    		depending on whether or not the -f option is given
    
    An argument of `--' disables further option processing.
    
    Exit Status:
    Returns success unless an invalid option is given or NAME is invalid.
Set export attribute for shell variables.
    
    Marks each NAME for automatic export to the environment of subsequently
    executed commands.  If VALUE is supplied, assign VALUE before exporting.
    
    Options:
      -f	refer to shell functions
      -n	remove the export property from each NAME
      -p	display a list of all exported variables and functions
    
    An argument of `--' disables further option processing.
    
    Exit Status:
    Returns success unless an invalid option is given or NAME is invalid.
Unset values and attributes of shell variables and functions.
    
    For each NAME, remove the corresponding variable or function.
    
    Options:
      -f	treat each NAME as a shell function
      -v	treat each NAME as a shell variable
      -n	treat each NAME as a name reference and unset the variable itself
    		rather than the variable it references
    
    Without options, unset first tries to unset a variable, and if that fails,
    tries to unset a function.
    
    Some variables cannot be unset; also see `readonly'.
    
    Exit Status:
    Returns success unless an invalid option is given or a NAME is read-only.
Set or unset values of shell options and positional parameters.
    
    Change the value of shell attributes and positional parameters, or
    display the names and values of shell variables.
    
    Options:
      -a  Mark variables which are modified or created for export.
      -b  Notify of job termination immediately.
      -e  Exit immediately if a command exits with a non-zero status.
      -f  Disable file name generation (globbing).
      -h  Remember the location of commands as they are looked up.
      -k  All assignment arguments are placed in the environment for a
          command, not just those that precede the command name.
      -m  Job control is enabled.
      -n  Read commands but do not execute them.
      -o option-name
          Set the variable corresponding to option-name:
              allexport    same as -a
              braceexpand  same as -B
              emacs        use an emacs-style line editing interface
              errexit      same as -e
              errtrace     same as -E
              functrace    same as -T
              hashall      same as -h
              histexpand   same as -H
              history      enable command history
              ignoreeof    the shell will not exit upon reading EOF
              interactive-comments
                           allow comments to appear in interactive commands
              keyword      same as -k
              monitor      same as -m
              noclobber    same as -C
              noexec       same as -n
              noglob       same as -f
              nolog        currently accepted but ignored
              notify       same as -b
              nounset      same as -u
              onecmd       same as -t
              physical     same as -P
              pipefail     the return value of a pipeline is the status of
                           the last command to exit with a non-zero status,
                           or zero if no command exited with a non-zero status
              posix        change the behavior of bash where the default
                           operation differs from the Posix standard to
                           match the standard
              privileged   same as -p
              verbose      same as -v
              vi           use a vi-style line editing interface
              xtrace       same as -x
      -p  Turned on whenever the real and effective user ids do not match.
          Disables processing of the $ENV file and importing of shell
          functions.  Turning this option off causes the effective uid and
          gid to be set to the real uid and gid.
      -t  Exit after reading and executing one command.
      -u  Treat unset variables as an error when substituting.
      -v  Print shell input lines as they are read.
      -x  Print commands and their arguments as they are executed.
      -B  the shell will perform brace expansion
      -C  If set, disallow existing regular files to be overwritten
          by redirection of output.
      -E  If set, the ERR trap is inherited by shell functions.
      -H  Enable ! style history substitution.  This flag is on
          by default when the shell is interactive.
      -P  If set, do not resolve symbolic links when executing commands
          such as cd which change the current directory.
      -T  If set, the DEBUG and RETURN traps are inherited by shell functions.
      --  Assign any remaining arguments to the positional parameters.
          If there are no remaining arguments, the positional parameters
          are unset.
      -   Assign any remaining arguments to the positional parameters.
          The -x and -v options are turned off.
    
    Using + rather than - causes these flags to be turned off.  The
    flags can also be used upon invocation of the shell.  The current
    set of flags may be found in $-.  The remaining n ARGs are positional
    parameters and are assigned, in order, to $1, $2, .. $n.  If no
    ARGs are given, all shell variables are printed.
    
    Exit Status:
    Returns success unless an invalid option is given.
Return from a shell function.
    
    Causes a function or sourced script to exit with the return value
    specified by N.  If N is omitted, the return status is that of the
    last command executed within the function or script.
    
    Exit Status:
    Returns N, or failure if the shell is not executing a function or script.
Read a line from the standard input and split it into fields.
    
    Reads a single line from the standard input, or from file descriptor FD
    if the -u option is supplied.  The line is split into fields as with word
    splitting, and the first word is assigned to the first NAME, the second
    word to the second NAME, and so on, with any leftover words assigned to
    the last NAME.  Only the characters found in $IFS are recognized as word
    delimiters.
    
    If no NAMEs are supplied, the line read is stored in the REPLY variable.
    
    Options:
      -a array	assign the words read to sequential indices of the array
    		variable ARRAY, starting at zero
      -d delim	continue until the first character of DELIM is read, rather
    		than newline
      -e	use Readline to obtain the line in an interactive shell
      -i text	use TEXT as the initial text for Readline
      -n nchars	return after reading NCHARS characters rather than waiting
    		for a newline, but honor a delimiter if fewer than
    		NCHARS characters are read before the delimiter
      -N nchars	return only after reading exactly NCHARS characters, unless
    		EOF is encountered or read times out, ignoring any
    		delimiter
      -p prompt	output the string PROMPT without a trailing newline before
    		attempting to read
      -r	do not allow backslashes to escape any characters
      -s	do not echo input coming from a terminal
      -t timeout	time out and return failure if a complete line of
    		input is not read within TIMEOUT seconds.  The value of the
    		TMOUT variable is the default timeout.  TIMEOUT may be a
    		fractional number.  If TIMEOUT is 0, read returns
    		immediately, without trying to read any data, returning
    		success only if input is available on the specified
    		file descriptor.  The exit status is greater than 128
    		if the timeout is exceeded
      -u fd	read from file descriptor FD instead of the standard input
    
    Exit Status:
    The return code is zero, unless end-of-file is encountered, read times out
    (in which case it's greater than 128), a variable assignment error occurs,
    or an invalid file descriptor is supplied as the argument to -u.
Evaluate arithmetic expressions.
    
    Evaluate each ARG as an arithmetic expression.  Evaluation is done in
    fixed-width integers with no check for overflow, though division by 0
    is trapped and flagged as an error.  The following list of operators is
    grouped into levels of equal-precedence operators.  The levels are listed
    in order of decreasing precedence.
    
    	id++, id--	variable post-increment, post-decrement
    	++id, --id	variable pre-increment, pre-decrement
    	-, +		unary minus, plus
    	!, ~		logical and bitwise negation
    	**		exponentiation
    	*, /, %		multiplication, division, remainder
    	+, -		addition, subtraction
    	<<, >>		left and right bitwise shifts
    	<=, >=, <, >	comparison
    	==, !=		equality, inequality
    	&		bitwise AND
    	^		bitwise XOR
    	|		bitwise OR
    	&&		logical AND
    	||		logical OR
    	expr ? expr : expr
    			conditional operator
    	=, *=, /=, %=,
    	+=, -=, <<=, >>=,
    	&=, ^=, |=	assignment
    
    Shell variables are allowed as operands.  The name of the variable
    is replaced by its value (coerced to a fixed-width integer) within
    an expression.  The variable need not have its integer attribute
    turned on to be used in an expression.
    
    Operators are evaluated in order of precedence.  Sub-expressions in
    parentheses are evaluated first and may override the precedence
    rules above.
    
    Exit Status:
    If the last ARG evaluates to 0, let returns 1; let returns 0 otherwise.
Send a signal to a job.
    
    Send the processes identified by PID or JOBSPEC the signal named by
    SIGSPEC or SIGNUM.  If neither SIGSPEC nor SIGNUM is present, then
    SIGTERM is assumed.
    
    Options:
      -s sig	SIG is a signal name
      -n sig	SIG is a signal number
      -l	list the signal names; if arguments follow `-l' they are
    		assumed to be signal numbers for which names should be listed
      -L	synonym for -l
    
    Kill is a shell builtin for two reasons: it allows job IDs to be used
    instead of process IDs, and allows processes to be killed if the limit
    on processes that you can create is reached.
    
    Exit Status:
    Returns success unless an invalid option is given or an error occurs.
Remove jobs from current shell.
    
    Removes each JOBSPEC argument from the table of active jobs.  Without
    any JOBSPECs, the shell uses its notion of the current job.
    
    Options:
      -a	remove all jobs if JOBSPEC is not supplied
      -h	mark each JOBSPEC so that SIGHUP is not sent to the job if the
    		shell receives a SIGHUP
      -r	remove only running jobs
    
    Exit Status:
    Returns success unless an invalid option or JOBSPEC is given.
Display status of jobs.
    
    Lists the active jobs.  JOBSPEC restricts output to that job.
    Without options, the status of all active jobs is displayed.
    
    Options:
      -l	lists process IDs in addition to the normal information
      -n	lists only processes that have changed status since the last
    		notification
      -p	lists process IDs only
      -r	restrict output to running jobs
      -s	restrict output to stopped jobs
    
    If -x is supplied, COMMAND is run after all job specifications that
    appear in ARGS have been replaced with the process ID of that job's
    process group leader.
    
    Exit Status:
    Returns success unless an invalid option is given or an error occurs.
    If -x is used, returns the exit status of COMMAND.
Display or manipulate the history list.
    
    Display the history list with line numbers, prefixing each modified
    entry with a `*'.  An argument of N lists only the last N entries.
    
    Options:
      -c	clear the history list by deleting all of the entries
      -d offset	delete the history entry at position OFFSET.
    
      -a	append history lines from this session to the history file
      -n	read all history lines not already read from the history file
    		and append them to the history list
      -r	read the history file and append the contents to the history
    		list
      -w	write the current history to the history file
    
      -p	perform history expansion on each ARG and display the result
    		without storing it in the history list
      -s	append the ARGs to the history list as a single entry
    
    If FILENAME is given, it is used as the history file.  Otherwise,
    if HISTFILE has a value, that is used, else ~/.bash_history.
    
    If the HISTTIMEFORMAT variable is set and not null, its value is used
    as a format string for strftime(3) to print the time stamp associated
    with each displayed history entry.  No time stamps are printed otherwise.
    
    Exit Status:
    Returns success unless an invalid option is given or an error occurs.
Display information about builtin commands.
    
    Displays brief summaries of builtin commands.  If PATTERN is
    specified, gives detailed help on all commands matching PATTERN,
    otherwise the list of help topics is printed.
    
    Options:
      -d	output short description for each topic
      -m	display usage in pseudo-manpage format
      -s	output only a short usage synopsis for each topic matching
    		PATTERN
    
    Arguments:
      PATTERN	Pattern specifiying a help topic
    
    Exit Status:
    Returns success unless PATTERN is not found or an invalid option is given.
Remember or display program locations.
    
    Determine and remember the full pathname of each command NAME.  If
    no arguments are given, information about remembered commands is displayed.
    
    Options:
      -d	forget the remembered location of each NAME
      -l	display in a format that may be reused as input
      -p pathname	use PATHNAME as the full pathname of NAME
      -r	forget all remembered locations
      -t	print the remembered location of each NAME, preceding
    		each location with the corresponding NAME if multiple
    		NAMEs are given
    Arguments:
      NAME	Each NAME is searched for in $PATH and added to the list
    		of remembered commands.
    
    Exit Status:
    Returns success unless NAME is not found or an invalid option is given.
Move jobs to the background.
    
    Place the jobs identified by each JOB_SPEC in the background, as if they
    had been started with `&'.  If JOB_SPEC is not present, the shell's notion
    of the current job is used.
    
    Exit Status:
    Returns success unless job control is not enabled or an error occurs.
Move job to the foreground.
    
    Place the job identified by JOB_SPEC in the foreground, making it the
    current job.  If JOB_SPEC is not present, the shell's notion of the
    current job is used.
    
    Exit Status:
    Status of command placed in foreground, or failure if an error occurs.
Display or execute commands from the history list.
    
    fc is used to list or edit and re-execute commands from the history list.
    FIRST and LAST can be numbers specifying the range, or FIRST can be a
    string, which means the most recent command beginning with that
    string.
    
    Options:
      -e ENAME	select which editor to use.  Default is FCEDIT, then EDITOR,
    		then vi
      -l 	list lines instead of editing
      -n	omit line numbers when listing
      -r	reverse the order of the lines (newest listed first)
    
    With the `fc -s [pat=rep ...] [command]' format, COMMAND is
    re-executed after the substitution OLD=NEW is performed.
    
    A useful alias to use with this is r='fc -s', so that typing `r cc'
    runs the last command beginning with `cc' and typing `r' re-executes
    the last command.
    
    Exit Status:
    Returns success or status of executed command; non-zero if an error occurs.
Exit a login shell.
    
    Exits a login shell with exit status N.  Returns an error if not executed
    in a login shell.
Exit the shell.
    
    Exits the shell with a status of N.  If N is omitted, the exit status
    is that of the last command executed.
Replace the shell with the given command.
    
    Execute COMMAND, replacing this shell with the specified program.
    ARGUMENTS become the arguments to COMMAND.  If COMMAND is not specified,
    any redirections take effect in the current shell.
    
    Options:
      -a name	pass NAME as the zeroth argument to COMMAND
      -c	execute COMMAND with an empty environment
      -l	place a dash in the zeroth argument to COMMAND
    
    If the command cannot be executed, a non-interactive shell exits, unless
    the shell option `execfail' is set.
    
    Exit Status:
    Returns success unless COMMAND is not found or a redirection error occurs.
Parse option arguments.
    
    Getopts is used by shell procedures to parse positional parameters
    as options.
    
    OPTSTRING contains the option letters to be recognized; if a letter
    is followed by a colon, the option is expected to have an argument,
    which should be separated from it by white space.
    
    Each time it is invoked, getopts will place the next option in the
    shell variable $name, initializing name if it does not exist, and
    the index of the next argument to be processed into the shell
    variable OPTIND.  OPTIND is initialized to 1 each time the shell or
    a shell script is invoked.  When an option requires an argument,
    getopts places that argument into the shell variable OPTARG.
    
    getopts reports errors in one of two ways.  If the first character
    of OPTSTRING is a colon, getopts uses silent error reporting.  In
    this mode, no error messages are printed.  If an invalid option is
    seen, getopts places the option character found into OPTARG.  If a
    required argument is not found, getopts places a ':' into NAME and
    sets OPTARG to the option character found.  If getopts is not in
    silent mode, and an invalid option is seen, getopts places '?' into
    NAME and unsets OPTARG.  If a required argument is not found, a '?'
    is placed in NAME, OPTARG is unset, and a diagnostic message is
    printed.
    
    If the shell variable OPTERR has the value 0, getopts disables the
    printing of error messages, even if the first character of
    OPTSTRING is not a colon.  OPTERR has the value 1 by default.
    
    Getopts normally parses the positional parameters ($0 - $9), but if
    more arguments are given, they are parsed instead.
    
    Exit Status:
    Returns success if an option is found; fails if the end of options is
    encountered or an error occurs.
Execute arguments as a shell command.
    
    Combine ARGs into a single string, use the result as input to the shell,
    and execute the resulting commands.
    
    Exit Status:
    Returns exit status of command or success if command is null.
Enable and disable shell builtins.
    
    Enables and disables builtin shell commands.  Disabling allows you to
    execute a disk command which has the same name as a shell builtin
    without using a full pathname.
    
    Options:
      -a	print a list of builtins showing whether or not each is enabled
      -n	disable each NAME or display a list of disabled builtins
      -p	print the list of builtins in a reusable format
      -s	print only the names of Posix `special' builtins
    
    Options controlling dynamic loading:
      -f	Load builtin NAME from shared object FILENAME
      -d	Remove a builtin loaded with -f
    
    Without options, each NAME is enabled.
    
    To use the `test' found in $PATH instead of the shell builtin
    version, type `enable -n test'.
    
    Exit Status:
    Returns success unless NAME is not a shell builtin or an error occurs.
Write arguments to the standard output.
    
    Display the ARGs, separated by a single space character and followed by a
    newline, on the standard output.
    
    Options:
      -n	do not append a newline
      -e	enable interpretation of the following backslash escapes
      -E	explicitly suppress interpretation of backslash escapes
    
    `echo' interprets the following backslash-escaped characters:
      \a	alert (bell)
      \b	backspace
      \c	suppress further output
      \e	escape character
      \E	escape character
      \f	form feed
      \n	new line
      \r	carriage return
      \t	horizontal tab
      \v	vertical tab
      \\	backslash
      \0nnn	the character whose ASCII code is NNN (octal).  NNN can be
    		0 to 3 octal digits
      \xHH	the eight-bit character whose value is HH (hexadecimal).  HH
    		can be one or two hex digits
    
    Exit Status:
    Returns success unless a write error occurs.
Define local variables.
    
    Create a local variable called NAME, and give it VALUE.  OPTION can
    be any option accepted by `declare'.
    
    Local variables can only be used within a function; they are visible
    only to the function where they are defined and its children.
    
    Exit Status:
    Returns success unless an invalid option is supplied, a variable
    assignment error occurs, or the shell is not executing a function.
Set variable values and attributes.
    
    A synonym for `declare'.  See `help declare'.
Set variable values and attributes.
    
    Declare variables and give them attributes.  If no NAMEs are given,
    display the attributes and values of all variables.
    
    Options:
      -f	restrict action or display to function names and definitions
      -F	restrict display to function names only (plus line number and
    		source file when debugging)
      -g	create global variables when used in a shell function; otherwise
    		ignored
      -p	display the attributes and value of each NAME
    
    Options which set attributes:
      -a	to make NAMEs indexed arrays (if supported)
      -A	to make NAMEs associative arrays (if supported)
      -i	to make NAMEs have the `integer' attribute
      -l	to convert NAMEs to lower case on assignment
      -n	make NAME a reference to the variable named by its value
      -r	to make NAMEs readonly
      -t	to make NAMEs have the `trace' attribute
      -u	to convert NAMEs to upper case on assignment
      -x	to make NAMEs export
    
    Using `+' instead of `-' turns off the given attribute.
    
    Variables with the integer attribute have arithmetic evaluation (see
    the `let' command) performed when the variable is assigned a value.
    
    When used in a function, `declare' makes NAMEs local, as with the `local'
    command.  The `-g' option suppresses this behavior.
    
    Exit Status:
    Returns success unless an invalid option is supplied or a variable
    assignment error occurs.
Execute a simple command or display information about commands.
    
    Runs COMMAND with ARGS suppressing  shell function lookup, or display
    information about the specified COMMANDs.  Can be used to invoke commands
    on disk when a function with the same name exists.
    
    Options:
      -p    use a default value for PATH that is guaranteed to find all of
            the standard utilities
      -v    print a description of COMMAND similar to the `type' builtin
      -V    print a more verbose description of each COMMAND
    
    Exit Status:
    Returns exit status of COMMAND, or failure if COMMAND is not found.
Return an unsuccessful result.
    
    Exit Status:
    Always fails.
Return a successful result.
    
    Exit Status:
    Always succeeds.
Null command.
    
    No effect; the command does nothing.
    
    Exit Status:
    Always succeeds.
Print the name of the current working directory.
    
    Options:
      -L	print the value of $PWD if it names the current working
    		directory
      -P	print the physical directory, without any symbolic links
    
    By default, `pwd' behaves as if `-L' were specified.
    
    Exit Status:
    Returns 0 unless an invalid option is given or the current directory
    cannot be read.
Change the shell working directory.
    
    Change the current directory to DIR.  The default DIR is the value of the
    HOME shell variable.
    
    The variable CDPATH defines the search path for the directory containing
    DIR.  Alternative directory names in CDPATH are separated by a colon (:).
    A null directory name is the same as the current directory.  If DIR begins
    with a slash (/), then CDPATH is not used.
    
    If the directory is not found, and the shell option `cdable_vars' is set,
    the word is assumed to be  a variable name.  If that variable has a value,
    its value is used for DIR.
    
    Options:
      -L	force symbolic links to be followed: resolve symbolic
    		links in DIR after processing instances of `..'
      -P	use the physical directory structure without following
    		symbolic links: resolve symbolic links in DIR before
    		processing instances of `..'
      -e	if the -P option is supplied, and the current working
    		directory cannot be determined successfully, exit with
    		a non-zero status
      -@	on systems that support it, present a file with extended
    		attributes as a directory containing the file attributes
    
    The default is to follow symbolic links, as if `-L' were specified.
    `..' is processed by removing the immediately previous pathname component
    back to a slash or the beginning of DIR.
    
    Exit Status:
    Returns 0 if the directory is changed, and if $PWD is set successfully when
    -P is used; non-zero otherwise.
Return the context of the current subroutine call.
    
    Without EXPR, returns "$line $filename".  With EXPR, returns
    "$line $subroutine $filename"; this extra information can be used to
    provide a stack trace.
    
    The value of EXPR indicates how many call frames to go back before the
    current one; the top frame is frame 0.
    
    Exit Status:
    Returns 0 unless the shell is not executing a shell function or EXPR
    is invalid.
Execute shell builtins.
    
    Execute SHELL-BUILTIN with arguments ARGs without performing command
    lookup.  This is useful when you wish to reimplement a shell builtin
    as a shell function, but need to execute the builtin within the function.
    
    Exit Status:
    Returns the exit status of SHELL-BUILTIN, or false if SHELL-BUILTIN is
    not a shell builtin..
Resume for, while, or until loops.
    
    Resumes the next iteration of the enclosing FOR, WHILE or UNTIL loop.
    If N is specified, resumes the Nth enclosing loop.
    
    Exit Status:
    The exit status is 0 unless N is not greater than or equal to 1.
Exit for, while, or until loops.
    
    Exit a FOR, WHILE or UNTIL loop.  If N is specified, break N enclosing
    loops.
    
    Exit Status:
    The exit status is 0 unless N is not greater than or equal to 1.
Set Readline key bindings and variables.
    
    Bind a key sequence to a Readline function or a macro, or set a
    Readline variable.  The non-option argument syntax is equivalent to
    that found in ~/.inputrc, but must be passed as a single argument:
    e.g., bind '"\C-x\C-r": re-read-init-file'.
    
    Options:
      -m  keymap         Use KEYMAP as the keymap for the duration of this
                         command.  Acceptable keymap names are emacs,
                         emacs-standard, emacs-meta, emacs-ctlx, vi, vi-move,
                         vi-command, and vi-insert.
      -l                 List names of functions.
      -P                 List function names and bindings.
      -p                 List functions and bindings in a form that can be
                         reused as input.
      -S                 List key sequences that invoke macros and their values
      -s                 List key sequences that invoke macros and their values
                         in a form that can be reused as input.
      -V                 List variable names and values
      -v                 List variable names and values in a form that can
                         be reused as input.
      -q  function-name  Query about which keys invoke the named function.
      -u  function-name  Unbind all keys which are bound to the named function.
      -r  keyseq         Remove the binding for KEYSEQ.
      -f  filename       Read key bindings from FILENAME.
      -x  keyseq:shell-command	Cause SHELL-COMMAND to be executed when
    				KEYSEQ is entered.
      -X                 List key sequences bound with -x and associated commands
                         in a form that can be reused as input.
    
    Exit Status:
    bind returns 0 unless an unrecognized option is given or an error occurs.
Remove each NAME from the list of defined aliases.
    
    Options:
      -a	remove all alias definitions
    
    Return success unless a NAME is not an existing alias.
Define or display aliases.
    
    Without arguments, `alias' prints the list of aliases in the reusable
    form `alias NAME=VALUE' on standard output.
    
    Otherwise, an alias is defined for each NAME whose VALUE is given.
    A trailing space in VALUE causes the next word to be checked for
    alias substitution when the alias is expanded.
    
    Options:
      -p	print all defined aliases in a reusable format
    
    Exit Status:
    alias returns true unless a NAME is supplied for which no alias has been
    defined.
alias [-p] [name[=value] ... ]
bind [-lpsvPSVX] [-m keymap] [-f filename] [-q name] [-u name] [-r keyseq] [-x keyseq:shell-command] [keyseq:readline-function or readline-command]
builtin [shell-builtin [arg ...]]
command [-pVv] command [arg ...]
declare [-aAfFgilnrtux] [-p] [name[=value] ...]
typeset [-aAfFgilnrtux] [-p] name[=value] ...
local [option] name[=value] ...
enable [-a] [-dnps] [-f filename] [name ...]
exec [-cl] [-a name] [command [arguments ...]] [redirection ...]
fc [-e ename] [-lnr] [first] [last] or fc -s [pat=rep] [command]
hash [-lr] [-p pathname] [-dt] [name ...]
history [-c] [-d offset] [n] or history -anrw [filename] or history -ps arg [arg...]
jobs [-lnprs] [jobspec ...] or jobs -x command [args]
disown [-h] [-ar] [jobspec ... | pid ...]
kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
read [-ers] [-a array] [-d delim] [-i text] [-n nchars] [-N nchars] [-p prompt] [-t timeout] [-u fd] [name ...]
set [-abefhkmnptuvxBCHP] [-o option-name] [--] [arg ...]
unset [-f] [-v] [-n] [name ...]
export [-fn] [name[=value] ...] or export -p
readonly [-aAf] [name[=value] ...] or readonly -p
trap [-lp] [[arg] signal_spec ...]
ulimit [-SHabcdefiklmnpqrstuvxPT] [limit]
for NAME [in WORDS ... ] ; do COMMANDS; done
for (( exp1; exp2; exp3 )); do COMMANDS; done
select NAME [in WORDS ... ;] do COMMANDS; done
case WORD in [PATTERN [| PATTERN]...) COMMANDS ;;]... esac
if COMMANDS; then COMMANDS; [ elif COMMANDS; then COMMANDS; ]... [ else COMMANDS; ] fi
while COMMANDS; do COMMANDS; done
until COMMANDS; do COMMANDS; done
coproc [NAME] command [redirections]
function name { COMMANDS ; } or name () { COMMANDS ; }
variables - Names and meanings of some shell variables
shopt [-pqsu] [-o] [optname ...]
printf [-v var] format [arguments]
complete [-abcdefgjksuv] [-pr] [-DE] [-o option] [-A action] [-G globpat] [-W wordlist]  [-F function] [-C command] [-X filterpat] [-P prefix] [-S suffix] [name ...]
compgen [-abcdefgjksuv] [-o option] [-A action] [-G globpat] [-W wordlist]  [-F function] [-C command] [-X filterpat] [-P prefix] [-S suffix] [word]
compopt [-o|+o option] [-DE] [name ...]
mapfile [-d delim] [-n count] [-O origin] [-s count] [-t] [-u fd] [-C callback] [-c quantum] [array]
readarray [-n count] [-O origin] [-s count] [-t] [-u fd] [-C callback] [-c quantum] [array]
unalias
unalias [-a] name [name ...]
break
break [n]
continue
continue [n]
caller
caller [expr]
cd [-L|[-P [-e]] [-@]] [dir]
pwd [-LP]
true
false
declare
typeset
local
echo [-neE] [arg ...]
enable
eval [arg ...]
getopts
getopts optstring name [arg]
exit [n]
logout [n]
fg [job_spec]
bg [job_spec ...]
help [-dms] [pattern ...]
disown
kill
let arg [arg ...]
read
return [n]
readonly
shift
shift [n]
source
source filename [arguments]
. filename [arguments]
suspend [-f]
test
test [expr]
[ arg... ]
times
type [-afptP] name [name ...]
ulimit
umask
umask [-p] [-S] [mode]
wait
wait [-n] [id ...]
time [-p] pipeline
{ ... }
{ COMMANDS ; }
job_spec [&]
(( ... ))
(( expression ))
[[ ... ]]
[[ expression ]]
variables
pushd
pushd [-n] [+N | -N | dir]
popd
popd [-n] [+N | -N]
dirs [-clpv] [+N] [-N]
shopt
printf
compgen
compopt
mapfile
readarray
alias %s
`%s': invalid alias name
line editing not enabled
bind_builtin
lvpVPsSXf:q:u:m:r:x:
`%s': invalid keymap name
%s: cannot read: %s
`%s': unknown function name
%s is not bound to any keys.
%s can be invoked via 
"%s"%s
`%s': cannot unbind
only meaningful in a `for', `while', or `until' loop
--help
loop count
NULL
%s %s %s
OLDPWD=
chdir
HOME not set
OLDPWD not set
CDPATH
command_builtin
%s: usage: 
%s: numeric argument required
%s: not found
%s: invalid option name
invalid octal number
invalid hex number
%s: %s out of range
%s: no such job
%s: no job control
%s: restricted
%s: not a shell builtin
write error: %s
%s: ambiguous job spec
SIGJUNK
Unknown
%2d) %s
%s: invalid signal specification
`%s': not a pid or valid job spec
error setting terminal attributes: %s
error getting terminal attributes: %s
%s: error retrieving current directory: %s: %s
+acfgilnprtuxAF
%s %d %s
%s: reference variable cannot be an array
`%s': invalid variable name for name reference
cannot use `-f' to make functions
%s: quoted compound array assignment deprecated
%s: cannot destroy array variables in this way
%s: cannot convert associative to indexed array
can only be used in a function
adnpsf:
enable %s
enable -n %s
BASH_LOADABLES_PATH
%s: not dynamically loaded
%s: cannot delete: %s
cannot open shared object %s: %s
cannot find %s in shared object %s: %s
load function for %s returns failure (%d): not loaded
%s: is a directory
%s: not a regular file
%s: file is too large
_evalfile
parse_and_execute top
pe_dispose
parse_and_execute
parse_string top
parse_string
evalstring
%s: ignoring function definition attempt
cla:
%s: cannot execute: %s
~/.bash_logout
/etc/bash.bash_logout
There are stopped jobs.
There are running jobs.
exit
logout
not login shell: use `exit'
${FCEDIT:-${EDITOR:-ed}}
${FCEDIT:-${EDITOR:-vi}}
:e:lnrs
no command found
history specification
bash-fc
%s: cannot open temp file: %s
%s %s
fc builtin
current
job %d started without job control
%4d	%s
builtin hash -p %s %s
hashing disabled
dlp:rt
hits	command
%s: hash table empty
%s: cannot open: %s
%*s%s
%s: %s
%c%s
%*s%s - 
SYNOPSIS
%*s%s
DESCRIPTION
SEE ALSO
%*sbash(1)
IMPLEMENTATION
These shell commands are defined internally.  Type `help' to see this list.
Type `help name' to find out more about the function `name'.
Use `info bash' to find out more about the shell in general.
Use `man -k' or `info' to find out more about commands not in this list.
A star (*) next to a name means that the command is disabled.
Shell commands matching keywords `
Shell commands matching keyword `
no help topics match `%s'.  Try `help help' or `man -k %s' or `info %s'.
acd:npsrw
%s: history expansion failed
history position
%s: invalid timestamp
%5d%c %s%s
cannot use more than one of -anrw
no other options allowed with `-x'
lpnxrs
jobs_builtin
Unknown error
(%ld) - %s
%s: arguments must be process or job IDs
MAPFILE
%s: invalid line count
%s: invalid array origin
%s: invalid callback quantum
d:u:n:O:tC:c:s:
empty array variable name
%s: not an indexed array
%s %d %s
%s: invalid file descriptor specification
%d: invalid file descriptor: %s
internal error: getting variable name
directory stack empty
directory stack index
<no current directory>
%2d  %s
no other directory
%s: invalid argument
dirstack
ersa:d:i:n:p:t:u:N:
read_builtin
read error: %d: %s
%s: invalid timeout specification
can only `return' from a function or sourced script
editing-mode
%-15s	%s
set %co %s
allexport
braceexpand
%s: cannot unset
%s: not an array variable
errtrace
functrace
hashall
histexpand
interactive-comments
keyword
monitor
noclobber
noexec
noglob
nolog
notify
nounset
onecmd
physical
pipefail
privileged
xtrace
cannot simultaneously unset a function and a variable
declare -%s 
%s -%s 
aAfnp
%s: not a function
%s: cannot export
shift count
filename argument required
%s: file not found
cannot suspend
cannot suspend a login shell
unknown
trap -- %s %d
trap -- %s %s
%s is aliased to `%s'
alias %s=%s
%s is a shell keyword
%s is a function
%s is a shell builtin
%s is %s
%s is hashed (%s)
-type
-path
-all
afptP
%s is a special shell builtin
(%s, -%c) 
(-%c) 
%-20s %16s
unlimited
%s: cannot get limit: %s
hard
soft
%s: cannot modify limit: %s
`%c': bad command
core file size
blocks
data seg size
kbytes
scheduling priority
pending signals
max locked memory
max memory size
open files
pipe size
512 bytes
POSIX message queues
real-time priority
stack size
cpu time
seconds
max user processes
virtual memory
file locks
u=%s,g=%s,o=%s
agou
umask%s 
%04lo
`%c': invalid symbolic mode operator
`%c': invalid symbolic mode character
OPTARG
%s: invalid shell option name
autocd
shopt %s %s
cdable_vars
BASHOPTS
psuoq
cdspell
checkhash
checkjobs
checkwinsize
cmdhist
compat31
compat32
compat40
compat41
compat42
compat43
complete_fullquote
direxpand
dirspell
dotglob
execfail
expand_aliases
extdebug
extglob
extquote
failglob
force_fignore
globasciiranges
globstar
gnu_errfmt
histappend
histreedit
histverify
hostcomplete
huponexit
inherit_errexit
interactive_comments
lastpipe
lithist
mailwarn
no_empty_cmd_completion
nocaseglob
nocasematch
nullglob
progcomp
promptvars
restricted_shell
shift_verbose
sourcepath
xpg_echo
cannot set and unset shell options simultaneously
missing hex digit for \x
missing unicode digit for \%c
warning: %s: %s
#'-+ 0
hjlLtz
`%c': invalid time format specification
`%s': missing format character
%s: illegal option -- %c
%s: option requires an argument -- %c
bashdefault
complete 
-o %s 
dirnames
filenames
nospace
plusdirs
arrayvar
-A %s 
binding
helptopic
running
setopt
signal
stopped
%s %s 
%s: invalid action name
compopt 
+o %s 
+o:DE
noquote
nosort
group
service
user
%s: no completion specification
abcdefgjko:prsuvA:G:W:P:S:X:F:C:DE
warning: -F option may not work as you expect
warning: -C option may not work as you expect
not currently executing completion function
ascii
?*+@!
alnum
alpha
blank
cntrl
graph
lower
print
punct
upper
xdigit
alert
backspace
vertical-tab
form-feed
carriage-return
exclamation-mark
quotation-mark
number-sign
dollar-sign
percent-sign
ampersand
apostrophe
left-parenthesis
right-parenthesis
asterisk
plus-sign
comma
hyphen
hyphen-minus
dash
period
full-stop
zero
three
four
five
seven
eight
nine
semicolon
less-than-sign
equals-sign
greater-than-sign
question-mark
commercial-at
left-square-bracket
backslash
reverse-solidus
right-square-bracket
circumflex
circumflex-accent
underscore
grave-accent
left-brace
left-curly-bracket
vertical-line
right-brace
right-curly-bracket
tilde
BASH_REMATCH
/dev/fd/
/dev/std
%s: bad network path specification
socket
connect
%ldm%d.%03ds
sh_makepath
sh_realpath
TMPDIR
/var/tmp
/usr/tmp
shtmp
%s/%s.XXXXXX
%s/cur
%s/tmp
%s/new
%s/%s
invalid base
0123456789ABCDEF
0123456789abcdef
\u%04X
\u%08X
UTF-8
ASCII
;*2$" 
GCC: (GNU) 6.1.1 20160802
GCC: (GNU) 6.3.1 20170109
.shstrtab
.interp
.note.ABI-tag
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rel.dyn
.rel.plt
.init
.plt.got
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.init_array
.fini_array
.jcr
.dynamic
.got.plt
.data
.bss
.comment
