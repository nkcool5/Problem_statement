/lib64/ld-linux-x86-64.so.2
|fUa
libbz2.so.1.0
_ITM_deregisterTMCloneTable
__gmon_start__
_Jv_RegisterClasses
_ITM_registerTMCloneTable
BZ2_bzCompressInit
_fini
BZ2_bzlibVersion
BZ2_bzCompressEnd
BZ2_bzCompress
_init
libc.so.6
__stpcpy_chk
fflush
strcpy
__printf_chk
exit
_IO_putc
setlocale
srand
strncmp
strrchr
__wctomb_chk
perror
__isoc99_sscanf
closedir
signal
strncpy
mbstowcs
__stack_chk_fail
unlink
putchar
realloc
towupper
stdin
popen
getpid
chmod
rewind
__ctype_get_mb_cur_max
strtol
isatty
feof
fgets
strlen
ungetc
memset
strstr
rmdir
__errno_location
tcsetattr
asctime
clearerr
__fxstat64
__fprintf_chk
stdout
fputc
fseeko64
fputs
memcpy
fclose
malloc
strcat
ftello64
tzset
__lxstat64
opendir
__xstat64
__ctype_b_loc
getenv
stderr
system
readlink
__strncat_chk
strncat
fileno
pclose
fwrite
fread
rename
mkstemp64
__fread_chk
localtime
strchr
utime
mktime
fdopen
readdir64
qsort
tcgetattr
__ctype_toupper_loc
__strcpy_chk
setvbuf
__sprintf_chk
memmove
fopen64
_IO_getc
__strcat_chk
strcmp
strerror
__libc_start_main
ferror
stpcpy
wctomb
free
_edata
__bss_start
_end
GLIBC_2.7
GLIBC_2.14
GLIBC_2.4
GLIBC_2.2.5
GLIBC_2.3.4
GLIBC_2.3
AWAVAUATE1
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
AWAVAUATUSH
|$<H
t$01
t$0H
D$0H
t$0H
d$TH
|$01
ATSL
L$lL
L$hH
T$dH
t$`H
wjH=
D$`H
|$`H
D$hL
D$hN
D$`E1
t$`1
D$`H
|$`L
L$pH
T$X1
|$`L
D$XH
T$p1
|$XE1
|$`H
|$`H
|$`L
L$pH
Beeb
T$X1
|$`L
D$XH
T$p1
|$XE1
AQh;
AZA[
[]A\A]A^A_
D$`H
t$`1
=A|$
=pv$
D$ M
D$PM
T$XH
L$p1
t$`1
t$`1
D$hH
T$X1
t	H9
D$XH
5An$
=&n$
=rk$
5fk$
=Nk$
D$XH
D$ I
I;T$
D$XH
D$ H
D$ H
H;D$Xu
=:i$
=@h$
D$8t+
}`H;}Xt
=Fb$
=3b$
={`$
5o`$
=^]$
V.fA
N,fA
t$(uo
OhfE
=+W$
=x~"
=G~"
-[i$
= S$
H;5]
=qy"
=\P$
5PP$
t$`1
t$`1
=5O$
I;T$
D$XI9D$ 
=s`$
=4L$
.log
H;E0
=1J$
=jI$
==H$
=%H$
=wG$
5fG$
=+G$
L$ H
L$(L
D$ H
=KF$
=3F$
=|E$
=FE$
H9D$x
=5D$
t$`1
-SW$
=FV$
5RA$
I;T$
t$`1
--T$
t$`1
=H=$
=C<$
D$hH
try: zip
9\$8
= f"
=n8$
5wL$
Hc\$8H
;l$<}VH
=Qb"
H;xPt
H;xXt
D$h1
Tacocat
=*["
T$hdH3
srH)
512$
=)1$
=M~"
=!~"
=Y0$
5QW"
5v["
5>["
    bzip
use)H
2 code a
nd libra
ry copyrH
ight (c)H
 Julian H
R SewardH
    (SeeH
 the bziH
p2 licenH
se for tH
erms of H
AUATUSH
=},$
=j,$
tPH;
=*x"
=}*$
5r>$
ATUSH
=UU"
[]A\A]
=QT"
[]A\A]
ATUI
=SR"
%}q"
5mq"
[]A\
=xq"
=Rq"
=-#$
=ap"
=*p"
=="$
=qo"
=:o"
AUATA
=;n"
=`m"
=tl"
([]A\A]
=y4$
=9m"
unzidH
AWAVAUATI
[]A\A]A^A_
[]A\A]A^A_
=0j"
unzip -tfA
G	-qq A
5v/$
5og"
=rg"
H9G 
DzpH
t1USH
<$Ptr
Kt[H
C8fA
C8fA
gfffH
=Kd"
C:fE9
gfffH
AWAVAUATUSH
[]A\A]A^A_
[]A\A]A^A_
        H
     LikH
ely entrH
y name cH
hanged bH
ut UnicoH
de not uH
pdated
     UseH
 -UN=i t
o ignoref
 errors H
or n forH
 no UnicH
ode pathH
[]A\A]A^A_
Kt%H
<$Pte
Ktif.
dH34%(
ATUI
[]A\
$t0L
ATUI
[]A\
$t0L
ttAVAUI
[]A\A]A^
ATUI
[]A\
Eleele
$t0L
ATUSD
UTtvL
[]A\
<$Ptz
Kt51
dH34%(
=<X"
.zip
AWAVI
AUATUSH
t]M9
([]A\A]A^A_
[]A\A]A^A_
AWAVAUATI
n0dH
D$81
-bR"
t$@1
=ZR"
L$8dH3
H[]A\A]A^A_
=@Q"
t$'D
|$)H
u(A	
=YO"
D$(H
f9E:t
D$ H
AWAVAUATA
D$H1
-%M"
H9S 
H9S 
L$@H
T$8H
L$@H
T$8H
L$@H
T$8H
L$@H
T$8H
L$@H
T$8H
L$@H
T$8H
L$@H
T$8H
L$@H
T$8H
L$@H
T$8H
t$0D
L$@H
T$8H
D$@H
L$8H
T$0D
H;D$8
\$HdH3
X[]A\A]A^A_
x	fE
f=upu.
f=up
T$8H
H;D$8
D$@H
L$8H
D$@H
L$8H
L$@H
T$8H
L$@H
T$8H
L$(E
L$(L
T$ L
L$ D
L$,E
D$(L
L$,L
L$ L
H;D$8
={D"
H;=lD"
5 D"
H;D$
<$tH
AWAVAUATUSH
D$H1
U H9
E0H=
f=upu2
f=up
E0H9
U H9
L$@H
T$8H
L$@H
T$8H
L$@H
T$8H
L$@H
T$8H
L$@H
T$8H
L$@H
T$8H
L$@H
T$8H
L$@H
T$8H
L$@H
T$8H
t$0H9
L$@H
T$8H
t$0D
L$@H
T$8H
L$@H
T$8H
L$@H
T$8H
t$0H
L$@H
T$8H
L$@H
T$8H
L$@H
T$8I9
t$0w
D$@H
L$8H
T$0D
|$0H
H;D$8H
L$ H
t$HdH34%(
X[]A\A]A^A_
M`fD
L$@H
T$8H
t$0H
D$@H
L$8H
D$@H
A Santa lives evil at NASA
L$8H
D$@H
L$8H
H9E H
L$ H
L$(L
D$ HcT$
L$(K
L$ E
L$ L
AWAVI
AUATI
D$(1
d$ H
=L5"
=m4"
=	4"
H;D$
\$(dH3
8[]A\A]A^A_
d$ H
AVAUATUI
D$(1
o0H;-
-V2"
=I2"
=:3"
=t1"
=91"
L$(dH3
0[]A\A]A^
](A	
=v1"
=p/"
M weD)
=B/"
f9E:t
l$pH
D$ I
D$0H
M:fA
L$:1
=]-"
=B-"
D$ H
D$0H
D$@A
D$ H
|$pI
D$(f
D$ I
=}+"
=E*"
=C("
H;=4("
l$(M
t$XfA
E:fA
D$:fA
D$ H
D$*fA
D$,t"H
D$PH
t$pI
=2&"
=(&"
AWAVAUATUSH
[]A\A]A^A_
=i$"
Missing 
end (EOC
DR) sign
ature - H
either tH
his archH
        H
     is H
not readH
able or H
the end H
is damagH
=(#"
=	#"
=$#"
p,fD
=R "
=	!"
=y "
=m "
=U "
D$sL
if archi
ve to fi
x is spl
it archi
ve, needH
 to provH
      paH
th of thH
e last sH
plit witH
h .zip eH
xtensionH
      evH
en if itH
 doesn'tH
 exist (H
zip willH
 ask forH
 splits)H
unexpect
ture
ed signaH
|$@I
T$tfA
T$vfA
D$|H
m,A	
L$*fA
D$ I
D$,A
T$0H
D$8L
D$0tZI
D$0t2
D$0u
D$8L
D$0A
D$0t
T$0H
T$0L
T$0H
T$0L
H=@B
 Found e
nd recorH
d (EOCDRH
) - saysH
 expect H
single dH
isk archH
k,fE
D$*fA
D$ I
D$,A
AWAVE1
AUATUSH
[]A\A]A^A_
l$wD
d$rD
D$|D
D$sH
D$v	
T$ H
H9D$
D$0H
D$sfA
T$tfA
T$vfA
D$xI
D$|I
t$0H
H+D$
D$xD
l$tH
D$|H
l$pH
D$|L
|$@I
H;|$ D
|$ H
T$<H
T$<f
I9O 
I9G@u
G@t	H;
D$(L
H;{Xt
u"[]
AUATUSH
C(t(
[]A\A]
AVAUATUSH
]A\A]A^
]A\A]A^
AWAVI
AUATUSH
_pdH
D$X1
L$@H
T$8H
t$0fA
\$XdH3
h[]A\A]A^A_
D$8H
n fA
~`I9~Xt
^,fA
D$(A
D$8H
~:fA
D$01
D$8H
~XI;~`t
f*fE
D$(fA9F
F:fA
t$@L
D$,I
T$,A
nXfA
T$,f
n`fA
~,fD
ATE1
[]A\
AVAUATUSH
[]A\A]A^
USHc
D$81
\$8dH3
AVAUATUI
dH34%(
[]A\A]A^
.t:A
AWAVE1
AUATI
|u4H
[]A\A]A^A_
.t9A
AVAUATUSH
[]A\A]A^
        H
    
        
    H
       
@0ing 
        H
      thH
is may bH
e a resuH
lt of usH
AWAVE1
AUATUSH
Borrow or rob
[]A\A]A^A_
D9%%
AWAVAUATA
u|E1
[]A\A]A^A_
Hc0Hcx
ziXXXXXXH
[]A\
AWAVI
AUATI
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
AVAUATUI
[]A\A]A^
=qq#
AVAUATU
x\Hc
/<-w
/<-w
=Vo#
/<-w
/<-w
x)Hc
=Tm#
x:Hc
(currentA
 directoI
[]A\A]A^
(current
 directoH
AUATL
([]A\A]
AWAVH
AUATUSH
/<-w
/<-w
|$ K
l$0E1
D$(E
=Ff#
t$0@
/<-w
/<-w
x*Hc
H+L$
x:Hc
=5c#
=cb#
[]A\A]A^A_
(currentH
 directoH
H+T$
D$(L
=V`#
(currentA
 directoI
t$0@
t$0@
AUATL
([]A\A]
AWAVI
AUATI
[]A\A]A^A_
ziXXXXXXH
=tX#
=xU#
AWAVAUATUSH
H94$
=0z!
<$H9
=Ge#
8[]A\A]A^A_
H+T$ H9
[]A\A]A^A_
5#N#
[]A\A]A^A_
[]A\A]A^A_
H+T$ A
D$(1
L$(dH3
AUATUSH
([]A\A]
AUATUSH
([]A\A]
teHcE
Hc1H
ATU1
[]A\
AWAVAUATA
dH34%(
[]A\A]A^A_
H;-]s!
5E@#
=-@#
=hS#
T$ H
D$89
D$(H9
D$ H9
D$<9
D$@9
D$PH9
D$xH9
ATU1
[]A\
tCATI
[]A\
AWAVAUATA
[]A\A]A^A_
AWAVAUATUSH
t-Hc
([]A\A]A^A_
AWAVAUATUSH
t$ H
T$0H
L$8L
\$@H
L$(H
\$h1
\$hdH3
x[]A\A]A^A_
>x5H
|$`A
D$ D
D$8D
|$`H
|$`t
|$`u
|$`H
|$`H
|$`H
|$`D
Lct$
<=Mc
T$HH
T$HA
T$HH
|$`E
|$`H
T$HIc
T$XL
D$PH
D$PH
L$HD
T$XA
D$(A
T$HI
T$HH
T$HE1
T$HH
T$PH
T$HH
T$PH
T$HH
T$HH
T$HL
T$PM
D$HD
T$PD
t$HL
\$XD
T$HH
T$HA
T$HH
t$`D
T$HH
T$HH
T$HH
T$HH
L$HD
T$PH
l$`D
\$XD
T$\ubM
D$(Lcd$
|$HD
|$`D
D$PH
T$(H
T$(H
t$PD
T$(H
T$(H
D$PA
\$XD
T$\D
AWAVI
AUATUS
?toE
tE</tA
[]A\A]A^A_
-tSE
w8@8
*<1w
ugD8.
t&US
AVAUI
ATUI
]A\A]A^
]A\A]A^
AWAVAUATI
([]A\A]A^A_
([]A\A]A^A_
AUATUSH
0<	w0
[]A\A]
[]A\A]
<Kt^<Mta<Gtd<T
[]A\A]
$0w\E1
dH34%(
D$h1
<$ u?
T$hdH3
AWAVAUATI
[]A\A]A^A_
D9|$
[]A\A]A^A_
gE#H
AWAVAUATI
gE#H
xV4@
5i_!
gE#H
xV4@
([]A\A]A^A_
D$H1
D$HdH3
D$H1
D$HdH3
AVAUI
ATUI
[]A\A]A^
AVAU
ATUH
tf</tbH
[]A\A]A^
AWAVAUATUS
[]A\A]A^A_
u|E1
AWAVI
AUATI
D$HH
D$XH
dH34%(
[]A\A]A^A_
AWAVI
AUATUSH
[]A\A]A^A_
[]A\A]A^A_
AUATI
oPdH
[]A\A]
L$HH
L$*H
t$,H
ATUS
[]A\
=f$!
=rJ!
AWAVAUATUA
}YHc
u9[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
+=g	&
AUATD9
rTtd
]A\A]A^
D$(1
xTHc
t/Hc
D$(dH3
AWAVAUATUSH
|XLc
4$D)
[]A\A]A^A_
%}:!
=18!
ATUA
=T7!
=F7!
[]A\
[]A\
[]A\
=y6!
5a6!
[]A\
~gUS
AWAVAUATUSH
}vLc
t7A9
D9l$
[]A\A]A^A_
AWAVAUATUSH
([]A\A]A^A_
=)2!
AWAVI
AUATI
[]A\A]A^A_
%}	!
=!*!
AWAVA
AUATL
[]A\A]A^A_
%lu>%lu: 
%3ld/%3ld 
[%4s
/%4s] 
-%4s] 
Zip %s (%s). Usage:
July 5th 2008
Do nine men interpret Nine men I nod
[none]
05 Jan 2007
Zip environment options:
%16s:  %s
ZIPOPT
zip I/O error: %s
zip error: %s (%s)
zip I/O error: %s
aborting
bad flag to add_filter
null pattern to add_filter
missing file after @
%c pattern file '%s'
adding filter
adding file
was creating pattern list
was processing arguments
stderr is not a tty
	zip warning: %s%s
unzip pipe error
UnZip %f 
unexpected output of UnZip -v
Found UnZip version %4.2f
test of %s FAILED
original files unmodified
test of %s OK
Verify password: 
Enter password: 
new zip file left as: 
was replacing split file
missing or early
up to date
en_US.UTF-8
specify just one action
do not specify both -r and -R
bad split size:  '%s'
%4d-%2d-%2d
%2d%2d%4d
quit
warn
ignore
escape
UTF8
-UN (unicode) bad value
deflate
store
bzip2
sd: Zipfile name '%s'
no such option ID: %ld
password verification failed
sd: Command line read
command line:
'%s'  
show command line
available options:
long
 %-2s  %-18s %-4s %-3s %-30s
description
-----------
 %-2s  %-18s 
%-4s 
char
%-3s 
logpath
could not open logfile '%s'
---------
Zip log opened %s
command line arguments:
Degas are we not drawn onward no In union drawn onward to new eras aged
fix options require --out
nothing to select from
name not matched: 
can't use - and -@ together
sd: Zipping to stdout
missing suffix list
sd: Reading archive
allocating temp filename
ziXXXXXX
zip file empty
Total %ld entries (
Done %s
splitsize = 
 not found or empty
sd: Scanning archive entries
not in archive: 
sd: Scanning files
current directory for -R
sd: Applying filters
sd: Checking dups
was processing list of files
sd: Scanning files to update
zip diagnostic: %s %s
sd: fcount = %u
Scanning files 
Archive contains:
Would Delete:
Would Freshen:
Would Copy:
Would Add/Update:
     Escaped Unicode:  %s
Total %s entries (%s bytes)
 . -i
Archive is current
cannot grow split archive
sd: Creating new zip file
freshening: %s
      ok: %s
updating: %s
 current: %s
was zipping %s
was copying %s
could not open for reading: 
will just copy entry over: 
 skipping: %s
 copying: %s
user requested abort
(try -F to attempt to fix)
could not seek in output file
bad - skipping: 
deleting: %s
   /    
     /      
sd: Zipping up new entries
was adding files to zip file
  adding: %s
zip warning
zip warning: %s
  files/entries read:  %lu
 (%s bytes)
  skipped:  %lu
sd: Get comment if any
was reading comment lines
Enter comment for %s:
current zip file comment is:
was setting comments to null
sd: Replacing old zip file
sd: Setting file type
planned 
 bytes, actual 
"%s" 
Extended Help for Zip
zipfile entries.
Basic command line:
Some examples:
Basic modes:
Basic options:
  -q        quiet operation
Syntax:
Options and Values:
  For example:
Wildcards:
    zip zipfile -r . -i "*.h"
Include and Exclude:
Case matching:
  the -ic option is used.
Recursion:
Date filtering:
Deletion, File Sync:
  -d        delete files
  -FS       file sync
  on OS.
Compression:
Encryption:
  unchanged.
  and newfile2:
Streaming and FIFOs:
    zip -FI archive fifo
Dots, counts:
Logging:
Testing archives:
Fixing archives:
Difference mode:
Show files:
Unicode:
  set what Zip does:
    zip -sU -UN=e archive
  to match files in archive.
  fields:
Self extractor:
  -h2  show more help
compress-1
compress 1
compress-2
compress 2
compress-3
compress 3
compress-4
compress 4
compress-5
compress 5
compress-6
compress 6
compress-7
compress 7
compress-8
compress 8
compress-9
compress 9
adjust-sfx
adjust self extractor offsets
temp-path
dir to use for temp archive
entry-comments
add comments for each entry
delete
delete entries from archive
display-bytes
display running bytes
display-counts
display running file count
display-dots
display-globaldots
dot-size
display-usize
display-volume
display volume (disk) number
no-dir-entries
difference-archive
encrypt
fixfix
filesync
freshen
force-descriptors
force-zip64
grow
more-help
extended help
include
junk-paths
junk-sfx
DOS-names
force use of 8.3 DOS names
to-crlf
from-crlf
logfile-path
log-append
append to existing log file
log-info
display license
move
not used
must-match
suffixes
no-wild
latest-time
output-file
store paths
password
quiet
recurse-paths
recurse down listed paths
recurse-patterns
regex
allow [list] matching (regex)
split-size
split-pause
split-verbose
split-bell
show-command
show-debug
show debug
show-files
show-options
show options
show-unicode
show-just-unicode
from-date
exclude before date
before-date
include before date
test
unzip-command
update
copy-entries
version
wild-stop-dirs
exclude
strip-extra
symlinks
store symbolic links
archive-comment
ask for archive comment
compression-method
compression method
names-stdin
   Rich Wales, Mike White
       of conditions.
Encryption notice:
USE_EF_UT_TIME       (store Universal Time)
Zip special compilation options:
BZIP2_SUPPORT        (bzip2 library version %.32s)
	[encryption, version %d.%d%s of %s] (modified for Zip 3)
attempting to restore %s to its previous state
cannot write zip file to terminal
zip file is empty, can't make it as old as latest entry
zip file has only directories, can't make it as old as latest entry
was deleting moved files and directories
failed to get information from UnZip
Need UnZip 6.00 or later to test this Zip64 archive
building command string for testing archive
option -ds (--dot-size) has bad size:  '%s'
dot size must be at least 32 KB:  '%s'
-mm not supported, Must_Match is -MM
minimum split size is 64 KB:  '%s'
invalid date entered for -t option - use mmddyyyy or yyyy-mm-dd
invalid date entered for -tt option - use mmddyyyy or yyyy-mm-dd
-UN must be Quit, Warn, Ignore, No, Escape, or UTF8: 
valid compression methods are:  store, deflate, bzip2
unknown compression method found:  
Option -Z (--compression-method):  unknown method
can't use -- before archive name
can't read input (-) and filenames (-@) both from stdin
was getting encryption password
zero length password not allowed
was verifying encryption password
archive name must end in .zip for splits
--out path must be different than in path: %s
can't use --diff (-DF) with fix (-F or -FF)
-U (--copy) requires -O (--out)
                     zip -F indamagedarchive --out outfixedarchive
fix options -F and -FF require --out:
no other actions allowed when fixing archive (-F or -FF)
-DF (--diff) requires -O (--out)
can't use --diff (-DF) with -d or -U
invalid option(s) used with -d; ignored.
can't set method, move, recurse, or comments with copy mode.
can't use -y with -k, -y ignored
can't use -F with -A, -F ignored
can't use -FF with -A, -FF ignored
can't use -T on stdout, -T ignored
can't create split archive while fixing or adjusting
can't create split archive with -d or -g or on stdout
can't use -d, -f, -u, -U, or -g with filesync -FS
God A red nugget A fat egg under a dog
can't use -d, -f, -u, -U, or -g on stdout
Fix archive (-F) - assume mostly intact archive
Fix archive (-FF) - salvage what can
sd: Open zip file and create temp file (-FF)
sd: Creating new zip file (-FF)
sd: Writing central directory (-FF)
was replacing the original zip file
Could not get info for input split: 
cannot repeat names in zip file
sd: Open zip file and create temp file
could not open archive to read
sd: Adding spanning/splitting signature at top of archive
sd: Going through old zip file
could not read local entry information: 
file and directory with the same name: 
zip warning: Not all files were readable
enter new zip file comment (end with .):
sd: Writing central directory
total bytes=%s, compressed=%s -> %d%% savings
sd: Writing end of central directory
SYMLINK_SUPPORT      (symbolic links supported)
LARGE_FILE_SUPPORT   (can read and write large files on file system)
ZIP64_SUPPORT        (use Zip64 to store large files in archives)
UNICODE_SUPPORT      (store and read UTF-8 Unicode paths)
STORE_UNIX_UIDs_GIDs (store UID/GID sizes/values using new extra field)
UIDGID_NOT_16BIT     (old Unix 16-bit UID/GID extra field not used)
See the Zip Manual for more detailed help
Zip stores files in zip archives.  The default action is to add or replace
  zip options archive_name file file ...
  Add file.txt to z.zip (create z if needed):      zip z file.txt
  Zip all files in current dir:                    zip z *
  Zip files in current dir and subdirs also:       zip -r z .
 External modes (selects files from file system):
        add      - add new files/update existing files in archive (default)
  -u    update   - add new files/update existing files only if later date
  -f    freshen  - update existing files only (no files added)
  -FS   filesync - update if date or size changed, delete if no OS match
 Internal modes (selects entries in archive):
  -d    delete   - delete files from archive (see below)
  -U    copy     - select files in archive to copy (use with --out)
  -r        recurse into directories (see Recursion below)
  -m        after archive created, delete original files (move into archive)
  -j        junk directory names (store just file names)
  -v        verbose operation (just "zip -v" shows version information)
  -c        prompt for one-line comment for each entry
  -z        prompt for comment for archive (end with just "." line or EOF)
  -@        read names to zip from stdin (one path per line)
  -o        make zipfile as old as latest entry
  The full command line syntax is:
    zip [-shortopts ...] [--longopt ...] [zipfile [path path ...]] [-xi list]
  Any number of short option and long option arguments are allowed
  (within limits) as well as any number of path arguments for files
  to zip up.  If zipfile exists, the archive is read in.  If zipfile
  is "-", stream to stdout.  If any path is "-", zip stdin.
  For short options that take values, use -ovalue or -o value or -o=value
  For long option values, use either --longoption=value or --longoption value
    zip -ds 10 --temp-dir=path zipfile path1 path2 --exclude pattern pattern
  Avoid -ovalue (no space between) to avoid confusion
  In particular, be aware of 2-character options.  For example:
    -d -s is (delete, split size) while -ds is (dot size)
  Usually better to break short options across multiple arguments by function
    zip -r -dbdcds 10m -lilalf logfile archive input_directory -ll
  All args after just "--" arg are read verbatim as paths and not options.
    zip zipfile path path ... -- verbatimpath verbatimpath ...
  Use -nw to also disable wildcards, so paths are read literally:
    zip zipfile -nw -- "-leadingdashpath" "a[path].c" "path*withwildcard"
  You may still have to escape or quote arguments to avoid shell expansion
  Internally zip supports the following wildcards:
    ?       (or %% or #, depending on OS) matches any single character
    *       matches any number of characters, including zero
    [list]  matches char in list (regex), can do range [ac-f], all but [!bf]
  If port supports [], must escape [ as [[] or use -nw to turn off wildcards
  For shells that expand wildcards, escape (\* or "*") so zip can recurse
  Normally * crosses dir bounds in path, e.g. 'a*b' can match 'ac/db'.  If
   -ws option used, * does not cross dir bounds but ** does
  For DOS and Windows, [list] is now disabled unless the new option
  -RE       enable [list] (regular expression) matching
  is used to avoid problems with file paths containing "[" and "]":
    zip files_ending_with_number -RE foo[0-9].c
  -i pattern pattern ...   include files that match a pattern
  -x pattern pattern ...   exclude files that match a pattern
  Patterns are paths with optional wildcards and match paths as stored in
  archive.  Exclude and include lists end at next option, @, or end of line.
    zip -x pattern pattern @ zipfile path path ...
  On most OS the case of patterns must match the case in the archive, unless
  -ic       ignore case of archive entries
  This option not available on case-sensitive file systems.  On others, case
  ignored when matching files on file system but matching against archive
  entries remains case sensitive for modes -f (freshen), -U (archive copy),
  and -d (delete) because archive paths are always case sensitive.  With
  -ic, all matching ignores case, but it's then possible multiple archive
  entries that differ only in case will match.
End Of Line Translation (text files only):
  -l        change CR or LF (depending on OS) line end to CR LF (Unix->Win)
  -ll       change CR LF to CR or LF (depending on OS) line end (Win->Unix)
  If first buffer read from file contains binary the translation is skipped
  -r        recurse paths, include files in subdirs:  zip -r a path path ...
  -R        recurse current dir and match patterns:   zip -R a ptn ptn ...
  Use -i and -x with either to include or exclude paths
  Path root in archive starts at current dir, so if /a/b/c/file and
   current dir is /a/b, 'zip -r archive .' puts c/file in archive
  -t date   exclude before (include files modified on this date and later)
  -tt date  include before (include files modified before date)
  Can use both at same time to set a date range
  Dates are mmddyyyy or yyyy-mm-dd
  Delete archive entries matching internal archive paths in list
    zip archive -d pattern pattern ...
  Can use -t and -tt to select files in archive, but NOT -x or -i, so
    zip archive -d "*" -t 2005-12-27
  deletes all files from archive.zip with date of 27 Dec 2005 and later
  Note the * (escape as "*" on Unix) to select all files in archive
  Similar to update, but files updated if date or size of entry does not
  match file on OS.  Also deletes entry from archive if no matching file
    zip archive_to_update -FS -r dir_used_before
  Result generally same as creating new archive, but unchanged entries
  are copied instead of being read and compressed so can be faster.
      WARNING:  -FS deletes entries so make backup copy of archive first
  -0        store files (no compression)
  -1 to -9  compress fastest to compress best (default is 6)
  -Z cm     set compression method to cm:
              store   - store without compression, same as option -0
              deflate - original zip deflate, same as -1 to -9 (default)
            if bzip2 is enabled:
              bzip2 - use bzip2 compression (need modern unzip)
  -e        use standard (weak) PKZip 2.0 encryption, prompt for password
  -P pswd   use standard encryption, password is pswd
Splits (archives created as a set of split files):
  -s ssize  create split archive with splits of size ssize, where ssize nm
              n number and m multiplier (kmgt, default m), 100k -> 100 kB
  -sp       pause after each split closed to allow changing disks
      WARNING:  Archives created with -sp use data descriptors and should
                work with most unzips but may not work with some
  -sb       ring bell when pause
  -sv       be verbose about creating splits
      Split archives CANNOT be updated, but see --out and Copy Mode below
Using --out (output to new archive):
  --out oa  output to new archive oa
  Instead of updating input archive, create new output archive oa.
  Result is same as without --out but in new archive.  Input archive
      WARNING:  --out ALWAYS overwrites any existing output file
  For example, to create new_archive like old_archive but add newfile1
    zip old_archive newfile1 newfile2 --out new_archive
  Cannot update split archive, so use --out to out new archive:
    zip in_split_archive newfile1 newfile2 --out out_split_archive
  If input is split, output will default to same split size
  Use -s=0 or -s- to turn off splitting to convert split to single file:
    zip in_split_archive -s 0 --out out_single_file_archive
      WARNING:  If overwriting old split archive but need less splits,
                old splits not overwritten are not needed but remain
Copy Mode (copying from archive to archive):
  -U        (also --copy) select entries in archive to copy (reverse delete)
  Copy Mode copies entries from old to new archive with --out and is used by
  zip when either no input files on command line or -U (--copy) used.
    zip inarchive --copy pattern pattern ... --out outarchive
alula
  To copy only files matching *.c into new archive, excluding foo.c:
    zip old_archive --copy "*.c" --out new_archive -x foo.c
  If no input files and --out, copy all entries in old archive:
    zip old_archive --out new_archive
  prog1 | zip -ll z -      zip output of prog1 to zipfile z, converting CR LF
  zip - -R "*.c" | prog2   zip *.c files in current dir and stream to prog2 
  prog1 | zip | prog2      zip in pipe with no in or out acts like zip - -
  If Zip is Zip64 enabled, streaming stdin creates Zip64 archives by default
   that need PKZip 4.5 unzipper like UnZip 6.0
  WARNING:  Some archives created with streaming use data descriptors and
            should work with most unzips but may not work with some
  Can use -fz- to turn off Zip64 if input not large (< 4 GB):
    prog_with_small_output | zip archive -fz-
  Zip now can read Unix FIFO (named pipes).  Off by default to prevent zip
  from stopping unexpectedly on unfed pipe, use -FI to enable:
  -db       display running count of bytes processed and bytes to go
              (uncompressed size, except delete and copy show stored size)
  -dc       display running count of entries done and entries to go
  -dd       display dots every 10 MB (or dot size) while processing files
  -dg       display dots globally for archive instead of for each file
    zip -qdgds 10m   will turn off most output except dots every 10 MB
  -ds siz   each dot is siz processed where siz is nm as splits (0 no dots)
  -du       display original uncompressed size for each entry as added
  -dv       display volume (disk) number in format in_disk>out_disk
  Dot size is approximate, especially for dot sizes less than 1 MB
  Dot options don't apply to Scanning files dots (dot/2sec) (-q turns off)
  -lf path  open file at path as logfile (overwrite existing file)
  -la       append to existing logfile
  -li       include info messages (default just warnings and errors)
  -T        test completed temp archive with unzip before updating archive
  -TT cmd   use command cmd instead of 'unzip -tqq' to test archive
             On Unix, to use unzip in current directory, could use:
               zip archive file1 file2 -T -TT "./unzip -tqq"
             In cmd, {} replaced by temp archive path, else temp appended.
             The return code is checked for success (0 on Unix)
  -F        attempt to fix a mostly intact archive (try this first)
  -FF       try to salvage what can (may get more but less reliable)
  Fix options copy entries from potentially bad archive to new archive.
  -F tries to read archive normally and copy only intact entries, while
  -FF tries to salvage what can and may result in incomplete entries.
  Must use --out option to specify output archive:
    zip -F bad.zip --out fixed.zip
  Use -v (verbose) with -FF to see details:
    zip reallybad.zip -FF -v --out fixed.zip
  Currently neither option fixes bad entries, as from text mode ftp get.
  -DF       (also --dif) only include files that have changed or are
             new as compared to the input archive
  Difference mode can be used to create incremental backups.  For example:
    zip --dif full_backup.zip -r somedir --out diff.zip
  will store all new files, as well as any files in full_backup.zip where
  either file time or size have changed from that in full_backup.zip,
  in new diff.zip.  Output archive not excluded automatically if exists,
  so either use -x to exclude it or put outside what is being zipped.
DOS Archive bit (Windows only):
  -AS       include only files with the DOS Archive bit set
  -AC       after archive created, clear archive bit of included files
      WARNING: Once the archive bits are cleared they are cleared
               Use -T to test the archive before the bits are cleared
               Can also use -sf to save file list before zipping files
  -sf       show files to operate on and exit (-sf- logfile only)
  -su       as -sf but show escaped UTF-8 Unicode names also if exist
  -sU       as -sf but show escaped UTF-8 Unicode names instead
  Any character not in the current locale is escaped as #Uxxxx, where x
  is hex digit, if 16-bit code is sufficient, or #Lxxxxxx if 24-bits
  are needed.  If add -UN=e, Zip escapes all non-ASCII characters.
  If compiled with Unicode support, Zip stores UTF-8 path of entries.
  This is backward compatible.  Unicode paths allow better conversion
  of entry names between different character sets.
  New Unicode extra field includes checksum to verify Unicode path
  goes with standard path for that entry (as utilities like ZipNote
  can rename entries).  If these do not match, use below options to
      -UN=Quit     - if mismatch, exit with error
      -UN=Warn     - if mismatch, warn, ignore UTF-8 (default)
      -UN=Ignore   - if mismatch, quietly ignore UTF-8
      -UN=No       - ignore any UTF-8 paths, use standard paths for all
  An exception to -UN=N are entries with new UTF-8 bit set (instead
  of using extra fields).  These are always handled as Unicode.
  Normally Zip escapes all chars outside current char set, but leaves
  as is supported chars, which may not be OK in path names.  -UN=Escape
  escapes any character not ASCII:
  Can use either normal path or escaped Unicode path on command line
  Zip now stores UTF-8 in entry path and comment fields on systems
  where UTF-8 char set is default, such as most modern Unix, and
  and on other systems in new extra fields with escaped versions in
  entry path and comment fields for backward compatibility.
  Option -UN=UTF8 will force storing UTF-8 in entry path and comment
      -UN=UTF8     - store UTF-8 in entry path and comment fields
  This option can be useful for multi-byte char sets on Windows where
  escaped paths and comments can be too long to be valid as the UTF-8
  versions tend to be shorter.
  Only UTF-8 comments on UTF-8 native systems supported.  UTF-8 comments
  for other systems planned in next release.
  -A        Adjust offsets - a self extractor is created by prepending
             the extractor executable to archive, but internal offsets
             are then off.  Use -A to fix offsets.
  -J        Junk sfx - removes prepended extractor executable from
             self extractor, leaving a plain zip archive.
More option highlights (see manual for additional options and details):
  -b dir    when creating or updating archive, create the temp archive in
             dir, which allows using seekable temp file when writing to a
             write once CD, such archives compatible with more unzips
             (could require additional file copy if on another device)
  -MM       input patterns must match at least one file and matched files
             must be readable or exit with OPEN error and abort archive
             (without -MM, both are warnings only, and if unreadable files
             are skipped OPEN error (18) returned after archive created)
  -nw       no wildcards (wildcards are like any other character)
  -sc       show command line arguments as processed and exit
  -sd       show debugging as Zip does each step
  -so       show all available options on this system
  -X        default=strip old extra fields, -X- keep old, -X strip most
  -ws       wildcards don't span directory boundaries in paths
zip [-options] [-b path] [-t mmddyyyy] [-n suffixes] [zipfile list] [-xi list]
  The default action is to add or replace zipfile entries from list, which
  can include the special name - to compress standard input.
  If zipfile and list are omitted, zip compresses stdin to stdout.
  -f   freshen: only changed files  -u   update: only changed or new files
  -d   delete entries in zipfile    -m   move into zipfile (delete OS files)
  -r   recurse into directories     -j   junk (don't record) directory names
  -0   store only                   -l   convert LF to CR LF (-ll CR LF to LF)
  -1   compress faster              -9   compress better
  -q   quiet operation              -v   verbose operation/print version info
  -c   add one-line comments        -z   add zipfile comment
  -@   read names from stdin        -o   make zipfile as old as latest entry
  -x   exclude the following names  -i   include only the following names
  -F   fix zipfile (-FF try harder) -D   do not add directory entries
  -A   adjust self-extracting exe   -J   junk zipfile prefix (unzipsfx)
  -T   test zipfile integrity       -X   eXclude eXtra file attributes
  -y   store symbolic links as the link instead of the referenced file
  -e   encrypt                      -n   don't compress these suffixes
display dots as process each file
display dots for archive instead of files
set progress dot size - default 10M bytes
display uncompressed size in bytes
no entries for dirs themselves (-x */)
create diff archive with changed/new files
encrypt entries, ask for password
fix mostly intact archive (try first)
try harder to fix archive (not as reliable)
read Unix FIFO (zip will wait on open pipe)
add/delete entries to make archive match OS
freshen existing archive entries
force data descriptors as if streaming
force use of Zip64 format, negate prevents
grow existing archive instead of replace
include only files matching patterns
strip paths and just store file names
strip self extractor from archive
convert text file line ends - LF->CRLF
convert text file line ends - CRLF->LF
log to log file at path (default overwrite)
include informational messages in log
add files to archive then delete files
error if in file not matched/not readable
suffixes to not compress: .gz:.zip
no wildcards during add or update
use latest entry time as archive time
set out zipfile different than in zipfile
encrypt entries, option value is password
recurse current dir and match patterns
do splits, set split size (-s=0 no splits)
pause while splitting to select destination
be verbose about creating splits
when pause for next split ring bell
show files to operate on and exit
as -sf but also show escaped Unicode
as -sf but only show escaped Unicode
test updates before replacing archive
unzip command to use, name is added to end
update existing entries and add new
select from archive instead of file system
UN=quit, warn, ignore, no, escape
display additional information
(if no other args) show version information
* stops at /, ** includes any /
exclude files matching patterns
-X- keep all ef, -X strip but critical ef
get file names from stdin, one per line
Copyright (c) 1990-2008 Info-ZIP.  All rights reserved.
For the purposes of this copyright and license, "Info-ZIP" is defined as
the following set of individuals:
   Mark Adler, John Bush, Karl Davis, Harald Denker, Jean-Michel Dubois,
   Jean-loup Gailly, Hunter Goatley, Ed Gordon, Ian Gorman, Chris Herborth,
   Dirk Haase, Greg Hartwig, Robert Heath, Jonathan Hudson, Paul Kienitz,
   David Kirschbaum, Johnny Lee, Onno van der Linden, Igor Mandrichenko,
   Steve P. Miller, Sergio Monesi, Keith Owens, George Petrov, Greg Roelofs,
   Kai Uwe Rommel, Steve Salisbury, Dave Smith, Steven M. Schweda,
   Christian Spieler, Cosmin Truta, Antoine Verheijen, Paul von Behren,
This software is provided "as is," without warranty of any kind, express
or implied.  In no event shall Info-ZIP or its contributors be held liable
for any direct, indirect, incidental, special or consequential damages
arising out of the use of or inability to use this software.
Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute it
freely, subject to the above disclaimer and the following restrictions:
    1. Redistributions of source code (in whole or in part) must retain
       the above copyright notice, definition, disclaimer, and this list
    2. Redistributions in binary form (compiled executables and libraries)
       must reproduce the above copyright notice, definition, disclaimer,
       and this list of conditions in documentation and/or other materials
       provided with the distribution.  The sole exception to this condition
       is redistribution of a standard UnZipSFX binary (including SFXWiz) as
       part of a self-extracting archive; that is permitted without inclusion
       of this license, as long as the normal SFX banner has not been removed
       from the binary or disabled.
    3. Altered versions--including, but not limited to, ports to new operating
       systems, existing ports with new graphical interfaces, versions with
       modified or added functionality, and dynamic, shared, or static library
       versions not from Info-ZIP--must be plainly marked as such and must not
       be misrepresented as being the original source or, if binaries,
       compiled from the original source.  Such altered versions also must not
       be misrepresented as being Info-ZIP releases--including, but not
       limited to, labeling of the altered versions with the names "Info-ZIP"
       (or any variation thereof, including, but not limited to, different
       capitalizations), "Pocket UnZip," "WiZ" or "MacZip" without the
       explicit permission of Info-ZIP.  Such altered versions are further
       prohibited from misrepresentative use of the Zip-Bugs or Info-ZIP
       e-mail addresses or the Info-ZIP URL(s), such as to imply Info-ZIP
       will provide support for the altered versions.
    4. Info-ZIP retains the right to use the names "Info-ZIP," "Zip," "UnZip,"
       "UnZipSFX," "WiZ," "Pocket UnZip," "Pocket Zip," and "MacZip" for its
       own source and binary releases.
	The encryption code of this program is not copyrighted and is
	put in the public domain.  It was originally written in Europe
	and, to the best of our knowledge, can be freely distributed
	in both source and object forms from any country, including
	the USA under License Exception TSU of the U.S. Export
	Administration Regulations (section 740.13(e)) of 6 June 2002.
This is %s %s (%s), by Info-ZIP.
Currently maintained by E. Gordon.  Please send bug reports to
the authors using the web page at www.info-zip.org; see README for details.
Latest sources and executables are at ftp://ftp.info-zip.org/pub/infozip,
as of above date; see http://www.info-zip.org/ for other sites.
Copyright (c) 1990-2008 Info-ZIP - Type '%s "-L"' for software license.
made by version %d.%d on system type %d: 
needs unzip %d.%d on system type %d: 
local flags = 0x%04x, central = 0x%04x: 
undefined bits used in flags = 0x%04x: 
unknown compression method %u: 
unknown internal attributes = 0x%04x: 
Unicode Path Extra Field version > 1 - skipping
Unicode does not match path - ignoring Unicode: 
Unicode does not match path:  %s
                     Likely entry name changed but Unicode not updated
                     Use -UN=i to ignore errors or n for no Unicode paths
Local Version Needed (%d) does not match CD (%d): 
Local Entry Flag does not match CD: 
Local Entry CRC does not match CD: 
Large entry support disabled with -fz- but needed
Large entry support disabled with -fz- but entry needs
Compressed/stored entry unexpectedly large - do not use -fz-
Poor compression resulted in unexpectedly large entry - try -fz
Large entry support disabled using -fz- but needed
Illegal host system mapping in local header:  %d
Illegal PK version mapping in local header:  %d
Unrecognized compression method in local header:  %d
Local Version Needed To Extract does not match CD: 
Local Entry name does not match CD: 
no end of stream entry found: 
rewinding and scanning for later entries
expected compressed/stored size %s, actual %s
could not open input archive: 
End record (EOCDR) only %s bytes - assume truncated
End record (EOCDR) has bad disk numbers - ignoring EOCDR
zipfile comment truncated - ignoring
 Found end record (EOCDR) - says expect %lu splits
Is this a single-disk archive?  (y/n): 
  Assuming single-disk archive
user ended reading - closing archive
Zip64 EOCDR found (%2lu %6s)...
Zip64 EOCDL found (%2lu %6s)...
Entry after central directory found (%2lu %6s)...
bad archive - error reading central directory
local (%lu) and cen (%lu) crc mismatch
  Found spanning marker, but did not expect split (multi-disk) archive...
  Found spanning marker - expected as this is split (multi-disk) archive...
  Found spanning marker - could be split archive...
(If all you have are splits (.z01, .z02, ...) and no .zip, try -FF)
bad archive - missing end signature
(If downloaded, was binary mode used?  If not, the
 archive may be scrambled and not recoverable)
missing end signature--probably not a zip file (did you
remember to use binary mode when you transferred it?)
(if you are trying to read a damaged archive try -F)
Adjusting split archives not yet supported
cannot update a split archive (use --out option)
must use --out when fixing an archive
could not seek back to start of central directory: 
central dir not where expected - could not adjust offsets
could not seek back to Zip64 EOCDL: 
unable to read EOCD after seek: 
Adjusting split archives not supported:  
could not seek back to Zip64 EOCDR: 
Could not determine offset of entries
Zip entry offsets appear off by %s bytes - correcting...
Zip entry offsets do not need adjusting
bad archive - could not seek back to Zip64 EOCDL: 
bad archive - could not seek back to Zip64 EOCDR: 
Zip64 EOCDR not found where expected - compensating
bad archive - Zip64 EOCDR not found in split:  
Zip64 End Of Central Directory Record not found:  
bad archive - Zip64 EOCDR bad or truncated
Zip64 EOCD Record bad or truncated
This archive requires version %d.%d
Zip currently only supports up to version 4.6 archives
(up to 4.5 if bzip2 is not compiled in)
If -F fails try -FF to try to salvage something
Attempting to salvage what can
Try -F to attempt to read anyway
bad archive - unexpected signature 
unexpected signature on disk %lu at %s
archive not in correct format: 
central directory header signature on disk %lu at %s
could not allocate memory: scanzipf_reg
expected %s entries but found %s
zip diagnostic: deleting file %s
deleting directory %s (if empty)                
starts on disk %lu: 
write Unicode
Unicode path error
unicode_mismatch = %d
append_ulong_to_mem
append_ushort_to_mem
append_string_to_mem
append_int64_to_mem
extra field copy
reading archive fseek: 
Did not find entry for 
reading local entry: 
reading entry
Entry too big:
Zip64 local extra field
Zip64 Extra Field
UTF-8 Path local extra field
UTF-8 Path Extra Field
UTF-8 Path cen extra field
Skipping:  
out of memory in zipcopy
 copying: %s 
Could not find split
aborting: 
seek failed on output file
entry truncated: 
unable to seek in input file 
  Found archive comment
Scanning for entries...
could not find split: 
skipping disk %lu ...
EOCDR found (%2lu %6s)...
 Local (%2lu %6s):
reading central directory
Central Directory found...
 Cen   (%2lu %6s): 
reading central directory: 
skipping this entry...
zero-length name for entry #
error reading entry:  
reading archive
writing archive seek: 
Error rewriting local header
write archive seek: 
seek after local: 
no local entry: %s
%02x 
on disk %lu at %s
skipping this signature...
No .zip file found
        
could not open input archive
Can't use -F to fix (try -FF)
reading archive: 
(try -A to adjust offsets)
(try -F to attempt recovery)
illegal UTF-8 name: 
error deleting 
overflow in byte count
extra fields copy
unexpected error on zip file
last %s o %s
error writing to zipfile
zlib deflateReset failed
has binary so -l ignored
has binary so -ll ignored
can't rewrite method
 s=%s, actual=%s 
incorrect compressed size
	(in=%s) (out=%s)
 (bzipped %d%%)
 (deflated %d%%)
 (stored 0%%)
write error on zip file
bzlib bzCompressEnd failed
seek wrap - zip file too big to write
allocating zlib/bzlib file-I/O buffers
cannot initialize bzlib compress
bzlib bzCompressInit failure (%d)
unexpected bzlib compress error %d
-l used on binary file - corrupted?
-ll used on binary file - corrupted?
 file size changed while zipping 
zip -0 not supported for I/O on pipes or devices
output buffer too small for in-memory compression
'%s' (%s)
  first full name: %s
 second full name: %s
name in zip file repeated: %s
zip diagnostic: %scluding %s
 fcopy: write error
 replace: can't open %s
split path
Opening disk %d
Writing to:
  %s
base path
More than 99999 splits needed
z%02lu
Could not find:
    s      (skip this split)
Could not find or open
Found:  %s
	Closing split 
Could not write split
could not write split
Not enough room on disk
skipping split file: 
wide_char_to_escape_string
%02x
wide_to_local_string
wide_to_escape_string
local_to_display_string
local_to_wide_string
wide_to_utf8_string
empty name without -j or -r
excluding %s
utf8_to_wide_string
Cannot select stdin when selecting archive entries
Hit ENTER to write to default path of
or enter a new directory path (. for cur dir) and hit ENTER
Path (or hit ENTER to continue): 
Hit c      (change path to where this split file is)
    q      (abort archive - quit)
 or ENTER  (continue with this split): 
 or ENTER  (try reading this split again): 
    e      (end this archive - no more splits)
    z      (look for .zip split - the last split)
Enter path where this split is (ENTER = same dir, . = current dir)
Not enough space to write split
seek failed reading descriptor
file matches zip file -- skipping
long option '%s' not supported
long option '%s' ambiguous
option %s requires number value
option %s requires one character value
short option '%c' not supported
option %s does not allow a value
option %s requires a value
option %s not negatable
Can't get memory for arguments
Unable to read empty number in ReadNumString
Unable to read number (must start with digit): 
Number too long to read (8 characters max): 
.Z:.zip:.zoo:.arc:.lzh:.arj
Normal successful completion
Unexpected end of zip file
FORM
Zip file structure invalid
Out of memory
LOGIC
Internal logic error
NOTE
Invalid comment format
TEST
ABORT
Interrupted
TEMP
Temporary file failure
READ
Input file read failure
NONE
Nothing to do!
NAME
Missing or empty zip file
WRITE
Output file write failure
CREAT
Could not create output file
PARMS
Invalid command arguments
OPEN
COMPERR
Not supported
ZIP64
Entry too big to split, read, or write
Zip file invalid, could not spawn unzip, or wrong unzip
File not found or no read permission
Attempt to read unsupported Zip64 archive
/dev/tty
(line too long--try again)
Reading FIFO (Named Pipe): 
ignoring special file: 
filetime
fstat(stdin)
set_extra_field
Linux ELF
gcc 5.2.1 20150808
ignoring FIFO (Named Pipe) - use -FI to read: 
Compiled with %s for Unix (%s)%s.
MGiI
fatal error (code %d) in bzip2 library
bad pack level
block vanished
;*3$"
2bec95ca3a1e11fe31c0e22a4a84ce8596bd51.debug
.shstrtab
.interp
.note.ABI-tag
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rela.dyn
.rela.plt
.init
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.init_array
.fini_array
.jcr
.dynamic
.got
.got.plt
.data
.bss
.gnu_debuglink
