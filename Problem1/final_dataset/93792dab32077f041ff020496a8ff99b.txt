/lib64/ld-linux-x86-64.so.2
;4.A
libc.so.6
fflush
__printf_chk
exit
readdir
argp_program_version
strrchr
__strdup
unlinkat
closedir
strncpy
puts
time
__stack_chk_fail
realloc
stdin
memchr
__assert_fail
feof
argp_failure
fgets
calloc
strlen
__errno_location
read
memcmp
dup2
__fprintf_chk
stdout
argp_program_bug_address
memcpy
fclose
strtoul
malloc
strcasecmp
fdopendir
argp_err_exit_status
__ctype_b_loc
__open_2
stderr
__snprintf_chk
__fxstat
fileno
strchr
argp_error
fdopen
argp_parse
fcntl
openat
memmove
strerror
__libc_start_main
dirfd
ferror
write
argp_state_help
free
__gmon_start__
GLIBC_2.3
GLIBC_2.14
GLIBC_2.7
GLIBC_2.4
GLIBC_2.2.5
GLIBC_2.3.4
%z~ 
%r~ 
%j~ 
%b~ 
%Z~ 
%R~ 
%J~ 
%B~ 
%:~ 
%2~ 
%*~ 
%"~ 
%z} 
%r} 
%j} 
%b} 
%Z} 
%R} 
%J} 
%B} 
%:} 
%2} 
%*} 
%"} 
%"{ 
AWAVAUATUS
[]A\A]A^A_
Borrow or rob
	t@H
Genu
ineI
ntel
|$ E1
D$H%
D$H%
AYAZ
=?~ 
T$,R
T$2R
T$;RD
L$@L
tZD;{
C(PD
=A} 
d$ H
G(PE
L$ H
-G| 
=mz 
=^z 
alula
=>z 
=By 
=fy 
L$ 1
=_x 
|$ H
=1x 
B0L9
AWAVI
AUATI
[]A\A]A^A_
[]A\A]A^A_
AWAVH
G0AUATI
AWWL
AXAY
0tVD
^_u<I
D9d$
([]A\A]A^A_
[]A\A]A^A_
AWAVA
AUATI
AVAUATUS
[]A\A]A^
AWAVAUATUSH
Beeb
([]A\A]A^A_
-gn 
-Vn 
H;L$
/lib/fir
mware/inf
tel-ucodH
/dev/cpu
/microcoH
H;l$
AWAVE
AUATA
[]A\A]A^A_
AWAVAUATUSH
D$hD
t$`A
D$PI
D$XA
[]A\A]A^A_
t+E9i
[]A\A]A^A_
D$PE
D$XA
[]A\A]A^A_
D$PA
D$XA
AUATA
[]A\A]
]A\A]
AUATA
([]A\A]
AWAVAUATI
T$`D
D$x1
[]A\A]A^A_
=p^ 
d$,H
\$ L
l$0H
T$ H
t$X1
L$XM9
H;l$
=)\ 
=V\ 
=d[ 
=)[ 
d$,H
\$ A
=~Y 
L$8H)
\$ D
d$,L
l$0H
d$,H
\$ A
d$,H
\$ A
l$@I
A Santa lives evil at NASA
D$PH
L$PH
T$XH
t$HH
t$@L
|$XL9
D$HM
t$PL
D$@L
L$PD
AWAVAUATUSH
[]A\A]A^A_
=/S 
=\S 
=4R 
=(R 
=(Q 
=5Q 
=bQ 
AUATUSH
g$VH
^_u:H
[]A\A]
]A\A]
=QO 
=~O 
]A\A]
tW~E
AVAUATUSH
M;4$
L;2H
[]A\A]A^
ATU1
[]A\
AWAVAUATUSH
AWPV1
[]A\A]A^A_
AWAVAUATUSH
5fK 
[]A\A]A^A_
=3I 
=_H 
=vH 
XZE1
=DH 
kernel/x
86/micro
D$0l.biH
code/Genf
L$4H
D$ H
uineInteH
=$G 
07070100H
00000000H)
D$(H
D$0H
00000100H
D$8H
00000000H
D$@H
D$HH
D$PH
D$XH
D$`H
D$hH
00000B00H
D$pH
000000TRH
D$xH
AILER!!!H
=vD 
AVAUATUSH
D$H%
[]A\A]A^
=WC 
=nC 
D$ H
D$(H
D$0H
XZtHM
=mB 
=!B 
=4B 
=aB 
= B 
Tacocat
AWAVAUATUSH
D$81
L$,E1
T$"	
T$$A
D$,P
D$2P
D$;PD
L$@1
t$$1
L$8dH3
H[]A\A]A^A_
4$;Z
=@> 
=m> 
Degas are we not drawn onward no In union drawn onward to new eras aged
D$$I
D$*PD
L$31
|$ D
t$ D
D$$I
=o< 
D$$I
AWAVA
AUATL
[]A\A]A^A_
internal error: invalid intel_ucode_status_t status
internal error: bad parameters passed to function
too many microcodes or signatures to handle
incorrect extended signature table checksum
incorrect extended signature checksum
callback returned failure status
success
invalid microcode data
unknown microcode format
bad extended signature table
incorrect microcode checksum
iucode_tool.c
base
unknown file type: '%s'
unknown file type: '%c'
invalid filter: '%s'
could not add filter '%s'
invalid date: '%s'
could not add path '%s'
%02u/%03u
microcode recovery 
%s: %s: loading (.dat mode)
%s: %s: could not read: %s
mcb && mcb_size >= 1024
mcb_filename
%s: %s: invalid file format
path
(stdin)
%s/%s
%s: %s/%s: path too long
%s: %s: cannot open: %s
%s: %s: reading directory
%s: skipping empty file: %s
%s: microcode %s: %s
/dev/null
uc_write_list
%s: %s: cannot unlink: %s
%s: unlinked %s
writing
skipping
%s: %s: write error: %s
%s: %s: is not a directory
s%08X_m%08X_r%08X.fw
%s: Microcode entry %s: %s
(no filename)
%s: nothing to do...
%s: out of memory
microcode bundle %u: %s
microcode bundle %u:
%s: microcode bundle %s: %s
%s: %s: cannot stat: %s
uploading
%02x-%02x-%02x
selected microcodes:
%s: too many data files
Give this help list
quiet
Quiet operation
verbose
type
! | [!]signature[,pf_mask]
scan-system
no-downgrade
date-before
YYYY-MM-DD
date-after
loose-date-filtering
Eleele
strict-date-filtering
list-all
List all microcode signatures
kernel
device
write-firmware
directory
write-to
file
write-earlyfw
write-named-to
write-all-named-to
no-overwrite
no-strict-checks
no-ignore-broken
-k option can be specified only once
-K option can be specified only once
-w option can be specified only once
--write-earlyfw option can be specified only once
-W option can be specified only once
--write-all-named-to option can be specified only once
%s: %s: %s microcode %s (sig 0x%08x, pf_mask 0x%02x, rev 0x%04x)
%s: %s: loading (%sbinary mode)
%s: microcode scan: microcode block at position %zu, size %zu bytes
%s: microcode scan: found %u microcode block(s), total size: %zu bytes
%s: microcode bundle %u: %s (%zu bytes)
%s: %s: no microcodes found in data file, skipping...
%s: %s: could not allocate memory while loading
%s: %s: line %lu: invalid file format
%s: %s: cowardly refusing to load an insanely large data file
%s: %s: cannot walk directory: %s
%s: %s: cannot stat inode: %s
%s: %s: cannot open directory: %s
%s: %s: skipping nested directory: %s
%s: aborting microcode processing...
%s: Cannot add index entry: out of memory
%s: Internal error: uclist_merge_signature() returned EINVAL
%s: could not attach /dev/null to file descriptor %d: %s
070701%08X%08X%08X%08X%08X%08lX%08zX%08X%08X%08X%08X%08X%08X%s
%s: %s: cannot write to, or create file: %s
%s: %s: error while closing file: %s
%s: %s: %u microcode entries written, %zu bytes
%s: Writing selected microcodes to: %s
%s: All microcodes in %s were skipped, file unchanged
%s: Writing microcode file(s) into %s
%s: %lu file(s) were written into %s
%s: no files were written into %s
  %6s: sig 0x%08x, pf mask 0x%02x, %04x-%02x-%02x, rev 0x%04x, size %u
          sig 0x%08x, pf mask 0x%02x, %04x-%02x-%02x, rev 0x%04x
%s: WARNING: Microcode %s has the same revision and signature as a previously loaded microcode, but different contents
%s: Internal error: uclist_add_signature() returned EINVAL
Do nine men interpret Nine men I nod
%s: Failed to add microcode entry %s: %s
%s: Failed to select microcode entry %s: %s
%s: trying to get CPUID information directly
%s: microcode signature unavailable
%s: system has processor(s) with signature 0x%08x
%s: assuming all processors have the same signature
%s: running on a non-Intel processor
%s: processed %lu valid microcode(s), %lu signature(s), %lu unique signature(s)
%03lu: sig 0x%08x, pf mask 0x%02x, %04x-%02x-%02x, rev 0x%04x, size %u
%s: selected %lu microcode(s), %lu signature(s)
%s: Uploading selected microcodes to: %s
%s: %s: cannot open for writing: %s
%s: %s: not a character device
%s: %s: error while closing device: %s
%s: %s: %u microcode entries uploaded, %zu bytes
%s: Writing microcode firmware file(s) into %s
%s: No valid microcodes were selected, nothing to do...
%s: No valid microcodes were loaded, nothing to do...
Verbose operation (cumulative)
Sets input file type for the next microcode files. The type is a single character: "b" (binary), "d" (Intel .dat), "r" (search inside unknown binary data), or "a" (type will be selected by filename suffix)
Select microcodes by the specificed signature and processor flags mask.  Specify more than once to select/unselect more microcodes.  Prefix with ! to unselect microcodes.  Use -s ! to disable the default behaviour of selecting all microcodes when no -s or -S filter is specified
Select microcodes by scanning all online processors on this system for their signatures.  Can be combined with the -s option.  Note: this option has precedence over the -s option, microcodes selected by --scan-system cannot be unselected by -s
Instead of discarding microcodes based on revision level, keep the one from the file loaded last.  Files are loaded in the order they were specified in the command line
Keep the microcode with the highest revision level, regardless of the file load order (default)
Select only microcodes older than the specified date
Select only microcodes newer than the specified date
Consider for selection other revisions (outside of the date range) of every microcode that was selected within the date range
Select only microcodes strictly within the date range (default)
List selected microcode signatures
Upload selected microcodes to the kernel.  Optionally, the device path can be specified (default: /dev/cpu/microcode)
Write selected microcodes with the filenames expected by the Linux kernel firmware loader.  Optionally, the destination directory can be specified (default: /lib/firmware/intel-ucode)
Write selected microcodes to a file in binary format.  The binary format is suitable to be uploaded to the kernel
Write selected microcodes to an early initramfs file, which should be prepended to the regular initramfs
Write selected microcodes to files in the specified directory, in binary format.  The file name will reflect the microcode signature, mask and revision
Write every microcode to files in the specified directory, in binary format.  The file name will reflect the microcode signature, mask and revision.  This is the only way to write out every revision of a microcode
Unlink (remove) destination files before writing
Do not remove existing files (default)
Perform strict checks on the microcode data (default)
Perform less strict checks on the microcode data
Skip broken microcode entries instead of aborting
Abort on broken microcode entries (default)
xx_write_cpio_hdrentry
write_intel_microcodes
upload_intel_microcodes
xx_process_ucode_signature_cb
xx_process_ucode_entry_cb
add_intel_microcode_bundle
load_intel_microcode
add_filter_to_list
iucode_tool 1.5.1
Copyright (c) 2010-2016 by Henrique de Moraes Holschuh
Based on code from the Linux microcode_intel driver and from
the microcode.ctl package, copyright (c) 2000 by Simon Trimmer
and Tigran Aivazian.
God A red nugget A fat egg under a dog
This is free software; see the source for copying conditions.
There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR
A PARTICULAR PURPOSE.
;*3$"
[[-t<type>] filename] ...
iucode_tool - Tool to manipulate Intel IA32/X86_64 microcode bundles
The microcode bundle files should be specified as arguments.  The bundle type is determined by the file name suffix.  It defaults to the binary format.
Should the filename end with ".bin", binary mode will be used.  Should the filename end with ".dat", text mode will be used.  The -t option can be used to set the type of the microcode bundle files that come after it, e.g. -td /tmp/dat-file -tb /tmp/binary /tmp/binary2.
To load microcode data from stdin, use "-" as the filename.  File type will be assumed to be text (".dat"), use option -tb to load binary data from stdin.
To load all files from a directory, specify the directory name.  It will not recurse into subdirectories, they will be skipped.
Empty files and directories will be ignored, and will be skipped.
iucode_tool
.shstrtab
.interp
.note.ABI-tag
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rela.dyn
.rela.plt
.init
.plt.got
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.init_array
.fini_array
.jcr
.dynamic
.got.plt
.data
.bss
.gnu_debuglink
